
Project_HK231.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003120  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800322c  0800322c  0001322c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003250  08003250  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08003250  08003250  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003250  08003250  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003250  08003250  00013250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003254  08003254  00013254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08003258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000034  0800328c  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  0800328c  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac24  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002024  00000000  00000000  0002ac81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002cca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002d760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e28  00000000  00000000  0002e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c95a  00000000  00000000  0002ff20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000847fc  00000000  00000000  0003c87a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c1076  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d0  00000000  00000000  000c10cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08003214 	.word	0x08003214

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08003214 	.word	0x08003214

0800014c <auto_fsm>:




uint8_t mode=AUTO_M;
void auto_fsm(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (autolightstate) {
 8000150:	4b5e      	ldr	r3, [pc, #376]	; (80002cc <auto_fsm+0x180>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b05      	cmp	r3, #5
 8000156:	f200 80b7 	bhi.w	80002c8 <auto_fsm+0x17c>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <auto_fsm+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000179 	.word	0x08000179
 8000164:	0800019d 	.word	0x0800019d
 8000168:	080001af 	.word	0x080001af
 800016c:	080001ed 	.word	0x080001ed
 8000170:	08000233 	.word	0x08000233
 8000174:	08000271 	.word	0x08000271
	case INIT:
		if(FLAG_AUTO==1){
 8000178:	4b55      	ldr	r3, [pc, #340]	; (80002d0 <auto_fsm+0x184>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d10d      	bne.n	800019c <auto_fsm+0x50>
			autoLightHandler();
 8000180:	f000 f8ae 	bl	80002e0 <autoLightHandler>
			lightdisplay[0]=lightDuration[0];
 8000184:	4b53      	ldr	r3, [pc, #332]	; (80002d4 <auto_fsm+0x188>)
 8000186:	781a      	ldrb	r2, [r3, #0]
 8000188:	4b53      	ldr	r3, [pc, #332]	; (80002d8 <auto_fsm+0x18c>)
 800018a:	701a      	strb	r2, [r3, #0]
			lightdisplay[1]=lightDuration[2];
 800018c:	4b51      	ldr	r3, [pc, #324]	; (80002d4 <auto_fsm+0x188>)
 800018e:	789a      	ldrb	r2, [r3, #2]
 8000190:	4b51      	ldr	r3, [pc, #324]	; (80002d8 <auto_fsm+0x18c>)
 8000192:	705a      	strb	r2, [r3, #1]
			autolightstate=RG;
 8000194:	4b4d      	ldr	r3, [pc, #308]	; (80002cc <auto_fsm+0x180>)
 8000196:	2202      	movs	r2, #2
 8000198:	701a      	strb	r2, [r3, #0]
			break;
 800019a:	e095      	b.n	80002c8 <auto_fsm+0x17c>
		}
	case HOLD:
		if(mode==AUTO_M){
 800019c:	4b4f      	ldr	r3, [pc, #316]	; (80002dc <auto_fsm+0x190>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	f040 8088 	bne.w	80002b6 <auto_fsm+0x16a>
			autolightstate=INIT;
 80001a6:	4b49      	ldr	r3, [pc, #292]	; (80002cc <auto_fsm+0x180>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	701a      	strb	r2, [r3, #0]
		}
		break;
 80001ac:	e083      	b.n	80002b6 <auto_fsm+0x16a>
	case RG:
		if(FLAG_BUT_CD==1){
 80001ae:	4b48      	ldr	r3, [pc, #288]	; (80002d0 <auto_fsm+0x184>)
 80001b0:	789b      	ldrb	r3, [r3, #2]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d104      	bne.n	80001c0 <auto_fsm+0x74>
//			FLAG_BUT_CD=0;
			autoButtonHandler();
 80001b6:	f000 f93d 	bl	8000434 <autoButtonHandler>
			setButtonCooldownTimer(100);
 80001ba:	2064      	movs	r0, #100	; 0x64
 80001bc:	f000 fe7a 	bl	8000eb4 <setButtonCooldownTimer>
		}
		if(FLAG_AUTO==1){
 80001c0:	4b43      	ldr	r3, [pc, #268]	; (80002d0 <auto_fsm+0x184>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d178      	bne.n	80002ba <auto_fsm+0x16e>
//			FLAG_AUTO=0;
			if(lightdisplay[1]==0){
 80001c8:	4b43      	ldr	r3, [pc, #268]	; (80002d8 <auto_fsm+0x18c>)
 80001ca:	785b      	ldrb	r3, [r3, #1]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d106      	bne.n	80001de <auto_fsm+0x92>
				lightdisplay[1]=lightDuration[1];
 80001d0:	4b40      	ldr	r3, [pc, #256]	; (80002d4 <auto_fsm+0x188>)
 80001d2:	785a      	ldrb	r2, [r3, #1]
 80001d4:	4b40      	ldr	r3, [pc, #256]	; (80002d8 <auto_fsm+0x18c>)
 80001d6:	705a      	strb	r2, [r3, #1]
				autolightstate=RY;
 80001d8:	4b3c      	ldr	r3, [pc, #240]	; (80002cc <auto_fsm+0x180>)
 80001da:	2203      	movs	r2, #3
 80001dc:	701a      	strb	r2, [r3, #0]
			}
			autoLightHandler();
 80001de:	f000 f87f 	bl	80002e0 <autoLightHandler>
			setAutoLightTimer(1000);
 80001e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e6:	f000 fe3d 	bl	8000e64 <setAutoLightTimer>
		}
		break;
 80001ea:	e066      	b.n	80002ba <auto_fsm+0x16e>
	case RY:
		if(FLAG_BUT_CD==1){
 80001ec:	4b38      	ldr	r3, [pc, #224]	; (80002d0 <auto_fsm+0x184>)
 80001ee:	789b      	ldrb	r3, [r3, #2]
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d104      	bne.n	80001fe <auto_fsm+0xb2>
//			FLAG_BUT_CD=0;
			autoButtonHandler();
 80001f4:	f000 f91e 	bl	8000434 <autoButtonHandler>
			setButtonCooldownTimer(100);
 80001f8:	2064      	movs	r0, #100	; 0x64
 80001fa:	f000 fe5b 	bl	8000eb4 <setButtonCooldownTimer>
		}
		if(FLAG_AUTO==1){
 80001fe:	4b34      	ldr	r3, [pc, #208]	; (80002d0 <auto_fsm+0x184>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	2b01      	cmp	r3, #1
 8000204:	d15b      	bne.n	80002be <auto_fsm+0x172>
//			FLAG_AUTO=0;
			if(lightdisplay[1]==0){
 8000206:	4b34      	ldr	r3, [pc, #208]	; (80002d8 <auto_fsm+0x18c>)
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d10a      	bne.n	8000224 <auto_fsm+0xd8>
				lightdisplay[0]=lightDuration[2];
 800020e:	4b31      	ldr	r3, [pc, #196]	; (80002d4 <auto_fsm+0x188>)
 8000210:	789a      	ldrb	r2, [r3, #2]
 8000212:	4b31      	ldr	r3, [pc, #196]	; (80002d8 <auto_fsm+0x18c>)
 8000214:	701a      	strb	r2, [r3, #0]
				lightdisplay[1]=lightDuration[0];
 8000216:	4b2f      	ldr	r3, [pc, #188]	; (80002d4 <auto_fsm+0x188>)
 8000218:	781a      	ldrb	r2, [r3, #0]
 800021a:	4b2f      	ldr	r3, [pc, #188]	; (80002d8 <auto_fsm+0x18c>)
 800021c:	705a      	strb	r2, [r3, #1]
				autolightstate=GR;
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <auto_fsm+0x180>)
 8000220:	2204      	movs	r2, #4
 8000222:	701a      	strb	r2, [r3, #0]
			}
			autoLightHandler();
 8000224:	f000 f85c 	bl	80002e0 <autoLightHandler>
			setAutoLightTimer(1000);
 8000228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022c:	f000 fe1a 	bl	8000e64 <setAutoLightTimer>
		}
		break;
 8000230:	e045      	b.n	80002be <auto_fsm+0x172>
	case GR:
		if(FLAG_BUT_CD==1){
 8000232:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <auto_fsm+0x184>)
 8000234:	789b      	ldrb	r3, [r3, #2]
 8000236:	2b01      	cmp	r3, #1
 8000238:	d104      	bne.n	8000244 <auto_fsm+0xf8>
//			FLAG_BUT_CD=0;
			autoButtonHandler();
 800023a:	f000 f8fb 	bl	8000434 <autoButtonHandler>
			setButtonCooldownTimer(100);
 800023e:	2064      	movs	r0, #100	; 0x64
 8000240:	f000 fe38 	bl	8000eb4 <setButtonCooldownTimer>
		}
		if(FLAG_AUTO==1){
 8000244:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <auto_fsm+0x184>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b01      	cmp	r3, #1
 800024a:	d13a      	bne.n	80002c2 <auto_fsm+0x176>
//			FLAG_AUTO=0;
			if(lightdisplay[0]==0){
 800024c:	4b22      	ldr	r3, [pc, #136]	; (80002d8 <auto_fsm+0x18c>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d106      	bne.n	8000262 <auto_fsm+0x116>
				lightdisplay[0]=lightDuration[1];
 8000254:	4b1f      	ldr	r3, [pc, #124]	; (80002d4 <auto_fsm+0x188>)
 8000256:	785a      	ldrb	r2, [r3, #1]
 8000258:	4b1f      	ldr	r3, [pc, #124]	; (80002d8 <auto_fsm+0x18c>)
 800025a:	701a      	strb	r2, [r3, #0]
				autolightstate=YR;
 800025c:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <auto_fsm+0x180>)
 800025e:	2205      	movs	r2, #5
 8000260:	701a      	strb	r2, [r3, #0]
			}
			autoLightHandler();
 8000262:	f000 f83d 	bl	80002e0 <autoLightHandler>
			setAutoLightTimer(1000);
 8000266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026a:	f000 fdfb 	bl	8000e64 <setAutoLightTimer>
		}
		break;
 800026e:	e028      	b.n	80002c2 <auto_fsm+0x176>
	case YR:
		if(FLAG_BUT_CD==1){
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <auto_fsm+0x184>)
 8000272:	789b      	ldrb	r3, [r3, #2]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d104      	bne.n	8000282 <auto_fsm+0x136>
//			FLAG_BUT_CD=0;
			autoButtonHandler();
 8000278:	f000 f8dc 	bl	8000434 <autoButtonHandler>
			setButtonCooldownTimer(100);
 800027c:	2064      	movs	r0, #100	; 0x64
 800027e:	f000 fe19 	bl	8000eb4 <setButtonCooldownTimer>
		}
		if(FLAG_AUTO==1){
 8000282:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <auto_fsm+0x184>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b01      	cmp	r3, #1
 8000288:	d11d      	bne.n	80002c6 <auto_fsm+0x17a>
//			FLAG_AUTO=0;
			if(lightdisplay[0]==0){
 800028a:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <auto_fsm+0x18c>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d10a      	bne.n	80002a8 <auto_fsm+0x15c>
				lightdisplay[0]=lightDuration[0];
 8000292:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <auto_fsm+0x188>)
 8000294:	781a      	ldrb	r2, [r3, #0]
 8000296:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <auto_fsm+0x18c>)
 8000298:	701a      	strb	r2, [r3, #0]
				lightdisplay[1]=lightDuration[2];
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <auto_fsm+0x188>)
 800029c:	789a      	ldrb	r2, [r3, #2]
 800029e:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <auto_fsm+0x18c>)
 80002a0:	705a      	strb	r2, [r3, #1]
				autolightstate=RG;
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <auto_fsm+0x180>)
 80002a4:	2202      	movs	r2, #2
 80002a6:	701a      	strb	r2, [r3, #0]
			}
			autoLightHandler();
 80002a8:	f000 f81a 	bl	80002e0 <autoLightHandler>
			setAutoLightTimer(1000);
 80002ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b0:	f000 fdd8 	bl	8000e64 <setAutoLightTimer>
		}
		break;
 80002b4:	e007      	b.n	80002c6 <auto_fsm+0x17a>
		break;
 80002b6:	bf00      	nop
 80002b8:	e006      	b.n	80002c8 <auto_fsm+0x17c>
		break;
 80002ba:	bf00      	nop
 80002bc:	e004      	b.n	80002c8 <auto_fsm+0x17c>
		break;
 80002be:	bf00      	nop
 80002c0:	e002      	b.n	80002c8 <auto_fsm+0x17c>
		break;
 80002c2:	bf00      	nop
 80002c4:	e000      	b.n	80002c8 <auto_fsm+0x17c>
		break;
 80002c6:	bf00      	nop
	}
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000072 	.word	0x20000072
 80002d0:	20000108 	.word	0x20000108
 80002d4:	20000020 	.word	0x20000020
 80002d8:	20000070 	.word	0x20000070
 80002dc:	20000050 	.word	0x20000050

080002e0 <autoLightHandler>:
void autoLightHandler(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	switch (autolightstate) {
 80002e4:	4b4f      	ldr	r3, [pc, #316]	; (8000424 <autoLightHandler+0x144>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b05      	cmp	r3, #5
 80002ea:	f200 8099 	bhi.w	8000420 <autoLightHandler+0x140>
 80002ee:	a201      	add	r2, pc, #4	; (adr r2, 80002f4 <autoLightHandler+0x14>)
 80002f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f4:	0800030d 	.word	0x0800030d
 80002f8:	0800041f 	.word	0x0800041f
 80002fc:	08000339 	.word	0x08000339
 8000300:	0800037d 	.word	0x0800037d
 8000304:	080003ab 	.word	0x080003ab
 8000308:	080003ef 	.word	0x080003ef
	case INIT:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 800030c:	2201      	movs	r2, #1
 800030e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000312:	4845      	ldr	r0, [pc, #276]	; (8000428 <autoLightHandler+0x148>)
 8000314:	f001 fbdf 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000318:	2200      	movs	r2, #0
 800031a:	2108      	movs	r1, #8
 800031c:	4843      	ldr	r0, [pc, #268]	; (800042c <autoLightHandler+0x14c>)
 800031e:	f001 fbda 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000322:	2200      	movs	r2, #0
 8000324:	2120      	movs	r1, #32
 8000326:	4841      	ldr	r0, [pc, #260]	; (800042c <autoLightHandler+0x14c>)
 8000328:	f001 fbd5 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 800032c:	2201      	movs	r2, #1
 800032e:	2110      	movs	r1, #16
 8000330:	483e      	ldr	r0, [pc, #248]	; (800042c <autoLightHandler+0x14c>)
 8000332:	f001 fbd0 	bl	8001ad6 <HAL_GPIO_WritePin>
		break;
 8000336:	e073      	b.n	8000420 <autoLightHandler+0x140>
	case HOLD:
		break;
	case RG:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800033e:	483a      	ldr	r0, [pc, #232]	; (8000428 <autoLightHandler+0x148>)
 8000340:	f001 fbc9 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000344:	2200      	movs	r2, #0
 8000346:	2108      	movs	r1, #8
 8000348:	4838      	ldr	r0, [pc, #224]	; (800042c <autoLightHandler+0x14c>)
 800034a:	f001 fbc4 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2120      	movs	r1, #32
 8000352:	4836      	ldr	r0, [pc, #216]	; (800042c <autoLightHandler+0x14c>)
 8000354:	f001 fbbf 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000358:	2201      	movs	r2, #1
 800035a:	2110      	movs	r1, #16
 800035c:	4833      	ldr	r0, [pc, #204]	; (800042c <autoLightHandler+0x14c>)
 800035e:	f001 fbba 	bl	8001ad6 <HAL_GPIO_WritePin>
		lightdisplay[0]--;
 8000362:	4b33      	ldr	r3, [pc, #204]	; (8000430 <autoLightHandler+0x150>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	3b01      	subs	r3, #1
 8000368:	b2da      	uxtb	r2, r3
 800036a:	4b31      	ldr	r3, [pc, #196]	; (8000430 <autoLightHandler+0x150>)
 800036c:	701a      	strb	r2, [r3, #0]
		lightdisplay[1]--;
 800036e:	4b30      	ldr	r3, [pc, #192]	; (8000430 <autoLightHandler+0x150>)
 8000370:	785b      	ldrb	r3, [r3, #1]
 8000372:	3b01      	subs	r3, #1
 8000374:	b2da      	uxtb	r2, r3
 8000376:	4b2e      	ldr	r3, [pc, #184]	; (8000430 <autoLightHandler+0x150>)
 8000378:	705a      	strb	r2, [r3, #1]
		break;
 800037a:	e051      	b.n	8000420 <autoLightHandler+0x140>
	case RY:
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 800037c:	2201      	movs	r2, #1
 800037e:	2120      	movs	r1, #32
 8000380:	482a      	ldr	r0, [pc, #168]	; (800042c <autoLightHandler+0x14c>)
 8000382:	f001 fba8 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000386:	2201      	movs	r2, #1
 8000388:	2110      	movs	r1, #16
 800038a:	4828      	ldr	r0, [pc, #160]	; (800042c <autoLightHandler+0x14c>)
 800038c:	f001 fba3 	bl	8001ad6 <HAL_GPIO_WritePin>
		lightdisplay[0]--;
 8000390:	4b27      	ldr	r3, [pc, #156]	; (8000430 <autoLightHandler+0x150>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	3b01      	subs	r3, #1
 8000396:	b2da      	uxtb	r2, r3
 8000398:	4b25      	ldr	r3, [pc, #148]	; (8000430 <autoLightHandler+0x150>)
 800039a:	701a      	strb	r2, [r3, #0]
		lightdisplay[1]--;
 800039c:	4b24      	ldr	r3, [pc, #144]	; (8000430 <autoLightHandler+0x150>)
 800039e:	785b      	ldrb	r3, [r3, #1]
 80003a0:	3b01      	subs	r3, #1
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	4b22      	ldr	r3, [pc, #136]	; (8000430 <autoLightHandler+0x150>)
 80003a6:	705a      	strb	r2, [r3, #1]
		break;
 80003a8:	e03a      	b.n	8000420 <autoLightHandler+0x140>
	case GR:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b0:	481d      	ldr	r0, [pc, #116]	; (8000428 <autoLightHandler+0x148>)
 80003b2:	f001 fb90 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2108      	movs	r1, #8
 80003ba:	481c      	ldr	r0, [pc, #112]	; (800042c <autoLightHandler+0x14c>)
 80003bc:	f001 fb8b 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2120      	movs	r1, #32
 80003c4:	4819      	ldr	r0, [pc, #100]	; (800042c <autoLightHandler+0x14c>)
 80003c6:	f001 fb86 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2110      	movs	r1, #16
 80003ce:	4817      	ldr	r0, [pc, #92]	; (800042c <autoLightHandler+0x14c>)
 80003d0:	f001 fb81 	bl	8001ad6 <HAL_GPIO_WritePin>
		lightdisplay[0]--;
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <autoLightHandler+0x150>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	3b01      	subs	r3, #1
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <autoLightHandler+0x150>)
 80003de:	701a      	strb	r2, [r3, #0]
		lightdisplay[1]--;
 80003e0:	4b13      	ldr	r3, [pc, #76]	; (8000430 <autoLightHandler+0x150>)
 80003e2:	785b      	ldrb	r3, [r3, #1]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	b2da      	uxtb	r2, r3
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <autoLightHandler+0x150>)
 80003ea:	705a      	strb	r2, [r3, #1]
		break;
 80003ec:	e018      	b.n	8000420 <autoLightHandler+0x140>
	case YR:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003f4:	480c      	ldr	r0, [pc, #48]	; (8000428 <autoLightHandler+0x148>)
 80003f6:	f001 fb6e 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2108      	movs	r1, #8
 80003fe:	480b      	ldr	r0, [pc, #44]	; (800042c <autoLightHandler+0x14c>)
 8000400:	f001 fb69 	bl	8001ad6 <HAL_GPIO_WritePin>
		lightdisplay[0]--;
 8000404:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <autoLightHandler+0x150>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	3b01      	subs	r3, #1
 800040a:	b2da      	uxtb	r2, r3
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <autoLightHandler+0x150>)
 800040e:	701a      	strb	r2, [r3, #0]
		lightdisplay[1]--;
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <autoLightHandler+0x150>)
 8000412:	785b      	ldrb	r3, [r3, #1]
 8000414:	3b01      	subs	r3, #1
 8000416:	b2da      	uxtb	r2, r3
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <autoLightHandler+0x150>)
 800041a:	705a      	strb	r2, [r3, #1]
		break;
 800041c:	e000      	b.n	8000420 <autoLightHandler+0x140>
		break;
 800041e:	bf00      	nop
	}
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000072 	.word	0x20000072
 8000428:	40010800 	.word	0x40010800
 800042c:	40010c00 	.word	0x40010c00
 8000430:	20000070 	.word	0x20000070

08000434 <autoButtonHandler>:
void autoButtonHandler(){
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	if(is_button_pressed(0)){
 8000438:	2000      	movs	r0, #0
 800043a:	f000 f8ab 	bl	8000594 <is_button_pressed>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d003      	beq.n	800044c <autoButtonHandler+0x18>
		flag_mode_press=1;
 8000444:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <autoButtonHandler+0x7c>)
 8000446:	2201      	movs	r2, #1
 8000448:	701a      	strb	r2, [r3, #0]
 800044a:	e012      	b.n	8000472 <autoButtonHandler+0x3e>
	}
	else if(!is_button_pressed(0) && flag_mode_press==1){
 800044c:	2000      	movs	r0, #0
 800044e:	f000 f8a1 	bl	8000594 <is_button_pressed>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d10c      	bne.n	8000472 <autoButtonHandler+0x3e>
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <autoButtonHandler+0x7c>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d108      	bne.n	8000472 <autoButtonHandler+0x3e>
		flag_mode_press=0;
 8000460:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <autoButtonHandler+0x7c>)
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
		mode=TUNING_M;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <autoButtonHandler+0x80>)
 8000468:	2201      	movs	r2, #1
 800046a:	701a      	strb	r2, [r3, #0]
		autolightstate=HOLD;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <autoButtonHandler+0x84>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
	}
	if(is_button_pressed(1)){
 8000472:	2001      	movs	r0, #1
 8000474:	f000 f88e 	bl	8000594 <is_button_pressed>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d003      	beq.n	8000486 <autoButtonHandler+0x52>
		flag_man_press=1;
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <autoButtonHandler+0x88>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]
	else if (!is_button_pressed(1) && flag_man_press==1){
		flag_man_press=0;
		mode=MANUAL_M;
		autolightstate=HOLD;
	}
}
 8000484:	e012      	b.n	80004ac <autoButtonHandler+0x78>
	else if (!is_button_pressed(1) && flag_man_press==1){
 8000486:	2001      	movs	r0, #1
 8000488:	f000 f884 	bl	8000594 <is_button_pressed>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d10c      	bne.n	80004ac <autoButtonHandler+0x78>
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <autoButtonHandler+0x88>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d108      	bne.n	80004ac <autoButtonHandler+0x78>
		flag_man_press=0;
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <autoButtonHandler+0x88>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
		mode=MANUAL_M;
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <autoButtonHandler+0x80>)
 80004a2:	2202      	movs	r2, #2
 80004a4:	701a      	strb	r2, [r3, #0]
		autolightstate=HOLD;
 80004a6:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <autoButtonHandler+0x84>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	701a      	strb	r2, [r3, #0]
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000006c 	.word	0x2000006c
 80004b4:	20000050 	.word	0x20000050
 80004b8:	20000072 	.word	0x20000072
 80004bc:	20000076 	.word	0x20000076

080004c0 <button_reading>:
static uint8_t flagForButtonPress1s [ NO_OF_BUTTONS ];

static uint16_t counterForButtonPress1s [ NO_OF_BUTTONS ];


void button_reading(void){
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
	for(char i=0;i< NO_OF_BUTTONS;i++){
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	e04c      	b.n	8000566 <button_reading+0xa6>
		debounceButtonBuffer2[i]=debounceButtonBuffer1[i];
 80004cc:	79fa      	ldrb	r2, [r7, #7]
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	4929      	ldr	r1, [pc, #164]	; (8000578 <button_reading+0xb8>)
 80004d2:	5c89      	ldrb	r1, [r1, r2]
 80004d4:	4a29      	ldr	r2, [pc, #164]	; (800057c <button_reading+0xbc>)
 80004d6:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i]= HAL_GPIO_ReadPin(GPIO_Buttons[i], Buttons[i]);
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	4a29      	ldr	r2, [pc, #164]	; (8000580 <button_reading+0xc0>)
 80004dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004e0:	4618      	mov	r0, r3
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	4a27      	ldr	r2, [pc, #156]	; (8000584 <button_reading+0xc4>)
 80004e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	79fc      	ldrb	r4, [r7, #7]
 80004ee:	4619      	mov	r1, r3
 80004f0:	f001 fada 	bl	8001aa8 <HAL_GPIO_ReadPin>
 80004f4:	4603      	mov	r3, r0
 80004f6:	461a      	mov	r2, r3
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <button_reading+0xb8>)
 80004fa:	551a      	strb	r2, [r3, r4]
		if(debounceButtonBuffer1[i]==debounceButtonBuffer2[i]) buttonBuffer[i]= debounceButtonBuffer1[i];
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <button_reading+0xb8>)
 8000500:	5cd2      	ldrb	r2, [r2, r3]
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	491d      	ldr	r1, [pc, #116]	; (800057c <button_reading+0xbc>)
 8000506:	5ccb      	ldrb	r3, [r1, r3]
 8000508:	429a      	cmp	r2, r3
 800050a:	d105      	bne.n	8000518 <button_reading+0x58>
 800050c:	79fa      	ldrb	r2, [r7, #7]
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	4919      	ldr	r1, [pc, #100]	; (8000578 <button_reading+0xb8>)
 8000512:	5c89      	ldrb	r1, [r1, r2]
 8000514:	4a1c      	ldr	r2, [pc, #112]	; (8000588 <button_reading+0xc8>)
 8000516:	54d1      	strb	r1, [r2, r3]

		if(buttonBuffer[i]==BUTTON_IS_PRESSED){
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	4a1b      	ldr	r2, [pc, #108]	; (8000588 <button_reading+0xc8>)
 800051c:	5cd3      	ldrb	r3, [r2, r3]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d115      	bne.n	800054e <button_reading+0x8e>
			if(counterForButtonPress1s[i]<DURATION_FOR_AUTO_INCREASING){
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	4a19      	ldr	r2, [pc, #100]	; (800058c <button_reading+0xcc>)
 8000526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800052a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800052e:	d209      	bcs.n	8000544 <button_reading+0x84>
				counterForButtonPress1s[i]++;
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4a16      	ldr	r2, [pc, #88]	; (800058c <button_reading+0xcc>)
 8000534:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000538:	3201      	adds	r2, #1
 800053a:	b291      	uxth	r1, r2
 800053c:	4a13      	ldr	r2, [pc, #76]	; (800058c <button_reading+0xcc>)
 800053e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000542:	e00d      	b.n	8000560 <button_reading+0xa0>
				}
			else{
					flagForButtonPress1s[i]=1;
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <button_reading+0xd0>)
 8000548:	2101      	movs	r1, #1
 800054a:	54d1      	strb	r1, [r2, r3]
 800054c:	e008      	b.n	8000560 <button_reading+0xa0>
				}
		}
		else{
			counterForButtonPress1s[i]=0;
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	4a0e      	ldr	r2, [pc, #56]	; (800058c <button_reading+0xcc>)
 8000552:	2100      	movs	r1, #0
 8000554:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i]=0;
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <button_reading+0xd0>)
 800055c:	2100      	movs	r1, #0
 800055e:	54d1      	strb	r1, [r2, r3]
	for(char i=0;i< NO_OF_BUTTONS;i++){
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	3301      	adds	r3, #1
 8000564:	71fb      	strb	r3, [r7, #7]
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d9af      	bls.n	80004cc <button_reading+0xc>
		}
	}
}
 800056c:	bf00      	nop
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bd90      	pop	{r4, r7, pc}
 8000576:	bf00      	nop
 8000578:	20000058 	.word	0x20000058
 800057c:	2000005c 	.word	0x2000005c
 8000580:	20000010 	.word	0x20000010
 8000584:	20000000 	.word	0x20000000
 8000588:	20000054 	.word	0x20000054
 800058c:	20000064 	.word	0x20000064
 8000590:	20000060 	.word	0x20000060

08000594 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	if(index>=NO_OF_BUTTONS) return 0;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b03      	cmp	r3, #3
 80005a2:	d901      	bls.n	80005a8 <is_button_pressed+0x14>
 80005a4:	2300      	movs	r3, #0
 80005a6:	e007      	b.n	80005b8 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <is_button_pressed+0x30>)
 80005ac:	5cd3      	ldrb	r3, [r2, r3]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	bf0c      	ite	eq
 80005b2:	2301      	moveq	r3, #1
 80005b4:	2300      	movne	r3, #0
 80005b6:	b2db      	uxtb	r3, r3
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000054 	.word	0x20000054

080005c8 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	if(index>= NO_OF_BUTTONS) return 0xff;
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	d901      	bls.n	80005dc <is_button_pressed_1s+0x14>
 80005d8:	23ff      	movs	r3, #255	; 0xff
 80005da:	e007      	b.n	80005ec <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <is_button_pressed_1s+0x30>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	bf0c      	ite	eq
 80005e6:	2301      	moveq	r3, #1
 80005e8:	2300      	movne	r3, #0
 80005ea:	b2db      	uxtb	r3, r3
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000060 	.word	0x20000060

080005fc <system_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void system_init(){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
//	SCH_Init();
	setAutoLightTimer(100);
 8000600:	2064      	movs	r0, #100	; 0x64
 8000602:	f000 fc2f 	bl	8000e64 <setAutoLightTimer>
	setButtonCooldownTimer(100);
 8000606:	2064      	movs	r0, #100	; 0x64
 8000608:	f000 fc54 	bl	8000eb4 <setButtonCooldownTimer>
	setAutoIncTimer(100);
 800060c:	2064      	movs	r0, #100	; 0x64
 800060e:	f000 fc65 	bl	8000edc <setAutoIncTimer>
	setTuningLightTimer(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 fc3a 	bl	8000e8c <setTuningLightTimer>
	setBuzzerStateTimer(100);
 8000618:	2064      	movs	r0, #100	; 0x64
 800061a:	f000 fc73 	bl	8000f04 <setBuzzerStateTimer>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 ff4a 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f81c 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 f91e 	bl	8000870 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000634:	f000 f85a 	bl	80006ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8000638:	f000 f8a4 	bl	8000784 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <main+0x3c>)
 800063e:	f001 fea7 	bl	8002390 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000642:	2100      	movs	r1, #0
 8000644:	4807      	ldr	r0, [pc, #28]	; (8000664 <main+0x40>)
 8000646:	f001 ff4d 	bl	80024e4 <HAL_TIM_PWM_Start>
  system_init();
 800064a:	f7ff ffd7 	bl	80005fc <system_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  auto_fsm();
 800064e:	f7ff fd7d 	bl	800014c <auto_fsm>
	  tuning_fsm();
 8000652:	f000 fd81 	bl	8001158 <tuning_fsm>
	  manual_fsm();
 8000656:	f000 f98f 	bl	8000978 <manual_fsm>
	  pedestrian_fsm();
 800065a:	f000 fab1 	bl	8000bc0 <pedestrian_fsm>
  {
 800065e:	e7f6      	b.n	800064e <main+0x2a>
 8000660:	200000c0 	.word	0x200000c0
 8000664:	20000078 	.word	0x20000078

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b090      	sub	sp, #64	; 0x40
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	2228      	movs	r2, #40	; 0x28
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fdc4 	bl	8003204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068a:	2302      	movs	r3, #2
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068e:	2301      	movs	r3, #1
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	2310      	movs	r3, #16
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800069a:	2300      	movs	r3, #0
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800069e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0318 	add.w	r3, r7, #24
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fa45 	bl	8001b38 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006b4:	f000 f95b 	bl	800096e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2102      	movs	r1, #2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fcb0 	bl	8002038 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006de:	f000 f946 	bl	800096e <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3740      	adds	r7, #64	; 0x40
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	463b      	mov	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_TIM2_Init+0x94>)
 800070a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_TIM2_Init+0x94>)
 8000712:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000716:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_TIM2_Init+0x94>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_TIM2_Init+0x94>)
 8000720:	2209      	movs	r2, #9
 8000722:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_TIM2_Init+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_TIM2_Init+0x94>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000730:	4813      	ldr	r0, [pc, #76]	; (8000780 <MX_TIM2_Init+0x94>)
 8000732:	f001 fddd 	bl	80022f0 <HAL_TIM_Base_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800073c:	f000 f917 	bl	800096e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000744:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	4619      	mov	r1, r3
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <MX_TIM2_Init+0x94>)
 800074e:	f002 f935 	bl	80029bc <HAL_TIM_ConfigClockSource>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000758:	f000 f909 	bl	800096e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_TIM2_Init+0x94>)
 800076a:	f002 fcb7 	bl	80030dc <HAL_TIMEx_MasterConfigSynchronization>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000774:	f000 f8fb 	bl	800096e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000c0 	.word	0x200000c0

08000784 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	; 0x38
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
 80007b0:	615a      	str	r2, [r3, #20]
 80007b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b4:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <MX_TIM3_Init+0xe4>)
 80007b6:	4a2d      	ldr	r2, [pc, #180]	; (800086c <MX_TIM3_Init+0xe8>)
 80007b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80007ba:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <MX_TIM3_Init+0xe4>)
 80007bc:	223f      	movs	r2, #63	; 0x3f
 80007be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <MX_TIM3_Init+0xe4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <MX_TIM3_Init+0xe4>)
 80007c8:	2209      	movs	r2, #9
 80007ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007cc:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_TIM3_Init+0xe4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <MX_TIM3_Init+0xe4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007d8:	4823      	ldr	r0, [pc, #140]	; (8000868 <MX_TIM3_Init+0xe4>)
 80007da:	f001 fd89 	bl	80022f0 <HAL_TIM_Base_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80007e4:	f000 f8c3 	bl	800096e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f2:	4619      	mov	r1, r3
 80007f4:	481c      	ldr	r0, [pc, #112]	; (8000868 <MX_TIM3_Init+0xe4>)
 80007f6:	f002 f8e1 	bl	80029bc <HAL_TIM_ConfigClockSource>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000800:	f000 f8b5 	bl	800096e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000804:	4818      	ldr	r0, [pc, #96]	; (8000868 <MX_TIM3_Init+0xe4>)
 8000806:	f001 fe15 	bl	8002434 <HAL_TIM_PWM_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000810:	f000 f8ad 	bl	800096e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4619      	mov	r1, r3
 8000822:	4811      	ldr	r0, [pc, #68]	; (8000868 <MX_TIM3_Init+0xe4>)
 8000824:	f002 fc5a 	bl	80030dc <HAL_TIMEx_MasterConfigSynchronization>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800082e:	f000 f89e 	bl	800096e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000832:	2360      	movs	r3, #96	; 0x60
 8000834:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	4619      	mov	r1, r3
 8000848:	4807      	ldr	r0, [pc, #28]	; (8000868 <MX_TIM3_Init+0xe4>)
 800084a:	f001 fff5 	bl	8002838 <HAL_TIM_PWM_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000854:	f000 f88b 	bl	800096e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000858:	4803      	ldr	r0, [pc, #12]	; (8000868 <MX_TIM3_Init+0xe4>)
 800085a:	f000 fc09 	bl	8001070 <HAL_TIM_MspPostInit>

}
 800085e:	bf00      	nop
 8000860:	3738      	adds	r7, #56	; 0x38
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000078 	.word	0x20000078
 800086c:	40000400 	.word	0x40000400

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <MX_GPIO_Init+0xd0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a2d      	ldr	r2, [pc, #180]	; (8000940 <MX_GPIO_Init+0xd0>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <MX_GPIO_Init+0xd0>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089c:	4b28      	ldr	r3, [pc, #160]	; (8000940 <MX_GPIO_Init+0xd0>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a27      	ldr	r2, [pc, #156]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008a2:	f043 0308 	orr.w	r3, r3, #8
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0308 	and.w	r3, r3, #8
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80008ba:	4822      	ldr	r0, [pc, #136]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008bc:	f001 f90b 	bl	8001ad6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80008c6:	4820      	ldr	r0, [pc, #128]	; (8000948 <MX_GPIO_Init+0xd8>)
 80008c8:	f001 f905 	bl	8001ad6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 80008cc:	2313      	movs	r3, #19
 80008ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	4619      	mov	r1, r3
 80008de:	4819      	ldr	r0, [pc, #100]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008e0:	f000 ff5e 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|D7_Pin|D2_Pin;
 80008e4:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80008e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2302      	movs	r3, #2
 80008f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	4619      	mov	r1, r3
 80008fc:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008fe:	f000 ff4f 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000902:	2301      	movs	r3, #1
 8000904:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090a:	2301      	movs	r3, #1
 800090c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	4619      	mov	r1, r3
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_GPIO_Init+0xd8>)
 8000916:	f000 ff43 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 800091a:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800091e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2302      	movs	r3, #2
 800092a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	4619      	mov	r1, r3
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_GPIO_Init+0xd8>)
 8000934:	f000 ff34 	bl	80017a0 <HAL_GPIO_Init>

}
 8000938:	bf00      	nop
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000
 8000944:	40010800 	.word	0x40010800
 8000948:	40010c00 	.word	0x40010c00

0800094c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800095c:	d103      	bne.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 800095e:	f7ff fdaf 	bl	80004c0 <button_reading>
//		SCH_Update();
		timerRun();
 8000962:	f000 fae3 	bl	8000f2c <timerRun>
	}
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000972:	b672      	cpsid	i
}
 8000974:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000976:	e7fe      	b.n	8000976 <Error_Handler+0x8>

08000978 <manual_fsm>:
#include "manual_fsm.h"

enum MANLIGHTSTATE{M_INIT,M_HOLD,M_RG,M_RY,M_GR,M_YR};
enum MANLIGHTSTATE manlightstate=M_HOLD;

void manual_fsm(){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	switch(manlightstate){
 800097c:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <manual_fsm+0xb8>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b05      	cmp	r3, #5
 8000982:	d852      	bhi.n	8000a2a <manual_fsm+0xb2>
 8000984:	a201      	add	r2, pc, #4	; (adr r2, 800098c <manual_fsm+0x14>)
 8000986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098a:	bf00      	nop
 800098c:	080009a5 	.word	0x080009a5
 8000990:	080009b1 	.word	0x080009b1
 8000994:	080009c1 	.word	0x080009c1
 8000998:	080009d7 	.word	0x080009d7
 800099c:	080009ed 	.word	0x080009ed
 80009a0:	08000a03 	.word	0x08000a03
	case M_INIT:
		manLightHandler();
 80009a4:	f000 f84a 	bl	8000a3c <manLightHandler>
		manlightstate=RG;
 80009a8:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <manual_fsm+0xb8>)
 80009aa:	2202      	movs	r2, #2
 80009ac:	701a      	strb	r2, [r3, #0]
		break;
 80009ae:	e03c      	b.n	8000a2a <manual_fsm+0xb2>
	case M_HOLD:
		if(mode==MANUAL_M) manlightstate=INIT;
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <manual_fsm+0xbc>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d12f      	bne.n	8000a18 <manual_fsm+0xa0>
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <manual_fsm+0xb8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
		break;
 80009be:	e02b      	b.n	8000a18 <manual_fsm+0xa0>
	case M_RG:
		if(FLAG_BUT_CD==1){
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <manual_fsm+0xc0>)
 80009c2:	789b      	ldrb	r3, [r3, #2]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d129      	bne.n	8000a1c <manual_fsm+0xa4>
			manButtonHandler(RY);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f8af 	bl	8000b2c <manButtonHandler>
			setButtonCooldownTimer(100);
 80009ce:	2064      	movs	r0, #100	; 0x64
 80009d0:	f000 fa70 	bl	8000eb4 <setButtonCooldownTimer>
		}
		break;
 80009d4:	e022      	b.n	8000a1c <manual_fsm+0xa4>
	case M_RY:
		if(FLAG_BUT_CD==1){
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <manual_fsm+0xc0>)
 80009d8:	789b      	ldrb	r3, [r3, #2]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d120      	bne.n	8000a20 <manual_fsm+0xa8>
			manButtonHandler(GR);
 80009de:	2004      	movs	r0, #4
 80009e0:	f000 f8a4 	bl	8000b2c <manButtonHandler>
			setButtonCooldownTimer(100);
 80009e4:	2064      	movs	r0, #100	; 0x64
 80009e6:	f000 fa65 	bl	8000eb4 <setButtonCooldownTimer>
		}
		break;
 80009ea:	e019      	b.n	8000a20 <manual_fsm+0xa8>
	case M_GR:
		if(FLAG_BUT_CD==1){
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <manual_fsm+0xc0>)
 80009ee:	789b      	ldrb	r3, [r3, #2]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d117      	bne.n	8000a24 <manual_fsm+0xac>
			manButtonHandler(YR);
 80009f4:	2005      	movs	r0, #5
 80009f6:	f000 f899 	bl	8000b2c <manButtonHandler>
			setButtonCooldownTimer(100);
 80009fa:	2064      	movs	r0, #100	; 0x64
 80009fc:	f000 fa5a 	bl	8000eb4 <setButtonCooldownTimer>
		}
		break;
 8000a00:	e010      	b.n	8000a24 <manual_fsm+0xac>
	case M_YR:
		if(FLAG_BUT_CD==1){
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <manual_fsm+0xc0>)
 8000a04:	789b      	ldrb	r3, [r3, #2]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d10e      	bne.n	8000a28 <manual_fsm+0xb0>
			manButtonHandler(RG);
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	f000 f88e 	bl	8000b2c <manButtonHandler>
			setButtonCooldownTimer(100);
 8000a10:	2064      	movs	r0, #100	; 0x64
 8000a12:	f000 fa4f 	bl	8000eb4 <setButtonCooldownTimer>
		}
		break;
 8000a16:	e007      	b.n	8000a28 <manual_fsm+0xb0>
		break;
 8000a18:	bf00      	nop
 8000a1a:	e006      	b.n	8000a2a <manual_fsm+0xb2>
		break;
 8000a1c:	bf00      	nop
 8000a1e:	e004      	b.n	8000a2a <manual_fsm+0xb2>
		break;
 8000a20:	bf00      	nop
 8000a22:	e002      	b.n	8000a2a <manual_fsm+0xb2>
		break;
 8000a24:	bf00      	nop
 8000a26:	e000      	b.n	8000a2a <manual_fsm+0xb2>
		break;
 8000a28:	bf00      	nop
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000023 	.word	0x20000023
 8000a34:	20000050 	.word	0x20000050
 8000a38:	20000108 	.word	0x20000108

08000a3c <manLightHandler>:

void manLightHandler(){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	switch(manlightstate){
 8000a40:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <manLightHandler+0xe4>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b05      	cmp	r3, #5
 8000a46:	d868      	bhi.n	8000b1a <manLightHandler+0xde>
 8000a48:	a201      	add	r2, pc, #4	; (adr r2, 8000a50 <manLightHandler+0x14>)
 8000a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000a69 	.word	0x08000a69
 8000a54:	08000b19 	.word	0x08000b19
 8000a58:	08000a95 	.word	0x08000a95
 8000a5c:	08000aab 	.word	0x08000aab
 8000a60:	08000ad7 	.word	0x08000ad7
 8000a64:	08000af9 	.word	0x08000af9
	case M_INIT:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6e:	482d      	ldr	r0, [pc, #180]	; (8000b24 <manLightHandler+0xe8>)
 8000a70:	f001 f831 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2108      	movs	r1, #8
 8000a78:	482b      	ldr	r0, [pc, #172]	; (8000b28 <manLightHandler+0xec>)
 8000a7a:	f001 f82c 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2120      	movs	r1, #32
 8000a82:	4829      	ldr	r0, [pc, #164]	; (8000b28 <manLightHandler+0xec>)
 8000a84:	f001 f827 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	4826      	ldr	r0, [pc, #152]	; (8000b28 <manLightHandler+0xec>)
 8000a8e:	f001 f822 	bl	8001ad6 <HAL_GPIO_WritePin>
		break;
 8000a92:	e042      	b.n	8000b1a <manLightHandler+0xde>
	case M_HOLD:
		break;
	case M_RG:
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2120      	movs	r1, #32
 8000a98:	4823      	ldr	r0, [pc, #140]	; (8000b28 <manLightHandler+0xec>)
 8000a9a:	f001 f81c 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	4821      	ldr	r0, [pc, #132]	; (8000b28 <manLightHandler+0xec>)
 8000aa4:	f001 f817 	bl	8001ad6 <HAL_GPIO_WritePin>
		break;
 8000aa8:	e037      	b.n	8000b1a <manLightHandler+0xde>
	case M_RY:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab0:	481c      	ldr	r0, [pc, #112]	; (8000b24 <manLightHandler+0xe8>)
 8000ab2:	f001 f810 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2108      	movs	r1, #8
 8000aba:	481b      	ldr	r0, [pc, #108]	; (8000b28 <manLightHandler+0xec>)
 8000abc:	f001 f80b 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	4818      	ldr	r0, [pc, #96]	; (8000b28 <manLightHandler+0xec>)
 8000ac6:	f001 f806 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2110      	movs	r1, #16
 8000ace:	4816      	ldr	r0, [pc, #88]	; (8000b28 <manLightHandler+0xec>)
 8000ad0:	f001 f801 	bl	8001ad6 <HAL_GPIO_WritePin>
		break;
 8000ad4:	e021      	b.n	8000b1a <manLightHandler+0xde>
	case M_GR:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <manLightHandler+0xe8>)
 8000ade:	f000 fffa 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2108      	movs	r1, #8
 8000ae6:	4810      	ldr	r0, [pc, #64]	; (8000b28 <manLightHandler+0xec>)
 8000ae8:	f000 fff5 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2120      	movs	r1, #32
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <manLightHandler+0xec>)
 8000af2:	f000 fff0 	bl	8001ad6 <HAL_GPIO_WritePin>
		break;
 8000af6:	e010      	b.n	8000b1a <manLightHandler+0xde>
	case M_YR:
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2108      	movs	r1, #8
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <manLightHandler+0xec>)
 8000afe:	f000 ffea 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2120      	movs	r1, #32
 8000b06:	4808      	ldr	r0, [pc, #32]	; (8000b28 <manLightHandler+0xec>)
 8000b08:	f000 ffe5 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2110      	movs	r1, #16
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <manLightHandler+0xec>)
 8000b12:	f000 ffe0 	bl	8001ad6 <HAL_GPIO_WritePin>
		break;
 8000b16:	e000      	b.n	8000b1a <manLightHandler+0xde>
		break;
 8000b18:	bf00      	nop
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000023 	.word	0x20000023
 8000b24:	40010800 	.word	0x40010800
 8000b28:	40010c00 	.word	0x40010c00

08000b2c <manButtonHandler>:
void manButtonHandler(enum MANLIGHTSTATE nextState){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	if(is_button_pressed(1)){
 8000b36:	2001      	movs	r0, #1
 8000b38:	f7ff fd2c 	bl	8000594 <is_button_pressed>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <manButtonHandler+0x1e>
			flag_man_press=1;
 8000b42:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <manButtonHandler+0x84>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	e011      	b.n	8000b6e <manButtonHandler+0x42>
	}
	else if (!is_button_pressed(1) && flag_man_press==1){
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f7ff fd22 	bl	8000594 <is_button_pressed>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10b      	bne.n	8000b6e <manButtonHandler+0x42>
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <manButtonHandler+0x84>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d107      	bne.n	8000b6e <manButtonHandler+0x42>
		flag_man_press=0;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <manButtonHandler+0x84>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
		manlightstate=nextState;
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <manButtonHandler+0x88>)
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	7013      	strb	r3, [r2, #0]
		manLightHandler();
 8000b6a:	f7ff ff67 	bl	8000a3c <manLightHandler>
	}
	if(is_button_pressed(0)){
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff fd10 	bl	8000594 <is_button_pressed>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <manButtonHandler+0x56>
		flag_mode_press=1;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <manButtonHandler+0x8c>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
	else if(!is_button_pressed(0) && flag_mode_press==1){
		flag_mode_press=0;
		mode=AUTO_M;
		manlightstate=HOLD;
	}
}
 8000b80:	e012      	b.n	8000ba8 <manButtonHandler+0x7c>
	else if(!is_button_pressed(0) && flag_mode_press==1){
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff fd06 	bl	8000594 <is_button_pressed>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d10c      	bne.n	8000ba8 <manButtonHandler+0x7c>
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <manButtonHandler+0x8c>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d108      	bne.n	8000ba8 <manButtonHandler+0x7c>
		flag_mode_press=0;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <manButtonHandler+0x8c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
		mode=AUTO_M;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <manButtonHandler+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
		manlightstate=HOLD;
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <manButtonHandler+0x88>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000076 	.word	0x20000076
 8000bb4:	20000023 	.word	0x20000023
 8000bb8:	2000006c 	.word	0x2000006c
 8000bbc:	20000050 	.word	0x20000050

08000bc0 <pedestrian_fsm>:



TIM_HandleTypeDef htim3;
uint8_t buzzstate=0;
void pedestrian_fsm(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	switch(pedstate){
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <pedestrian_fsm+0x6c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <pedestrian_fsm+0x12>
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d01b      	beq.n	8000c08 <pedestrian_fsm+0x48>
		}
		pedLightHandler();
		pedBuzzHandler();
		break;
	}
}
 8000bd0:	e029      	b.n	8000c26 <pedestrian_fsm+0x66>
		if(FLAG_BUT_CD==1){
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <pedestrian_fsm+0x70>)
 8000bd4:	789b      	ldrb	r3, [r3, #2]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d105      	bne.n	8000be6 <pedestrian_fsm+0x26>
			pedButtonHandler(ON);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f000 f90e 	bl	8000dfc <pedButtonHandler>
			setButtonCooldownTimer(100);
 8000be0:	2064      	movs	r0, #100	; 0x64
 8000be2:	f000 f967 	bl	8000eb4 <setButtonCooldownTimer>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <pedestrian_fsm+0x74>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2200      	movs	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf4:	4810      	ldr	r0, [pc, #64]	; (8000c38 <pedestrian_fsm+0x78>)
 8000bf6:	f000 ff6e 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c00:	480e      	ldr	r0, [pc, #56]	; (8000c3c <pedestrian_fsm+0x7c>)
 8000c02:	f000 ff68 	bl	8001ad6 <HAL_GPIO_WritePin>
		break;
 8000c06:	e00e      	b.n	8000c26 <pedestrian_fsm+0x66>
		if(FLAG_BUT_CD==1){
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <pedestrian_fsm+0x70>)
 8000c0a:	789b      	ldrb	r3, [r3, #2]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d105      	bne.n	8000c1c <pedestrian_fsm+0x5c>
			pedButtonHandler(OFF);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f000 f8f3 	bl	8000dfc <pedButtonHandler>
			setButtonCooldownTimer(100);
 8000c16:	2064      	movs	r0, #100	; 0x64
 8000c18:	f000 f94c 	bl	8000eb4 <setButtonCooldownTimer>
		pedLightHandler();
 8000c1c:	f000 f810 	bl	8000c40 <pedLightHandler>
		pedBuzzHandler();
 8000c20:	f000 f8ac 	bl	8000d7c <pedBuzzHandler>
		break;
 8000c24:	bf00      	nop
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000073 	.word	0x20000073
 8000c30:	20000108 	.word	0x20000108
 8000c34:	20000078 	.word	0x20000078
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	40010800 	.word	0x40010800

08000c40 <pedLightHandler>:
void pedLightHandler(){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	switch(autolightstate){
 8000c44:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <pedLightHandler+0xcc>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b05      	cmp	r3, #5
 8000c4a:	d85d      	bhi.n	8000d08 <pedLightHandler+0xc8>
 8000c4c:	a201      	add	r2, pc, #4	; (adr r2, 8000c54 <pedLightHandler+0x14>)
 8000c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c52:	bf00      	nop
 8000c54:	08000c6d 	.word	0x08000c6d
 8000c58:	08000c87 	.word	0x08000c87
 8000c5c:	08000ca1 	.word	0x08000ca1
 8000c60:	08000cbb 	.word	0x08000cbb
 8000c64:	08000cd5 	.word	0x08000cd5
 8000c68:	08000cef 	.word	0x08000cef
	case INIT:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c72:	4827      	ldr	r0, [pc, #156]	; (8000d10 <pedLightHandler+0xd0>)
 8000c74:	f000 ff2f 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7e:	4825      	ldr	r0, [pc, #148]	; (8000d14 <pedLightHandler+0xd4>)
 8000c80:	f000 ff29 	bl	8001ad6 <HAL_GPIO_WritePin>
		break;
 8000c84:	e040      	b.n	8000d08 <pedLightHandler+0xc8>
	case HOLD:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8c:	4820      	ldr	r0, [pc, #128]	; (8000d10 <pedLightHandler+0xd0>)
 8000c8e:	f000 ff22 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c98:	481e      	ldr	r0, [pc, #120]	; (8000d14 <pedLightHandler+0xd4>)
 8000c9a:	f000 ff1c 	bl	8001ad6 <HAL_GPIO_WritePin>
		break;
 8000c9e:	e033      	b.n	8000d08 <pedLightHandler+0xc8>
	case RG:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca6:	481a      	ldr	r0, [pc, #104]	; (8000d10 <pedLightHandler+0xd0>)
 8000ca8:	f000 ff15 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8000cac:	2201      	movs	r2, #1
 8000cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb2:	4818      	ldr	r0, [pc, #96]	; (8000d14 <pedLightHandler+0xd4>)
 8000cb4:	f000 ff0f 	bl	8001ad6 <HAL_GPIO_WritePin>
		break;
 8000cb8:	e026      	b.n	8000d08 <pedLightHandler+0xc8>
	case RY:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <pedLightHandler+0xd0>)
 8000cc2:	f000 ff08 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ccc:	4811      	ldr	r0, [pc, #68]	; (8000d14 <pedLightHandler+0xd4>)
 8000cce:	f000 ff02 	bl	8001ad6 <HAL_GPIO_WritePin>
		break;
 8000cd2:	e019      	b.n	8000d08 <pedLightHandler+0xc8>
	case GR:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cda:	480d      	ldr	r0, [pc, #52]	; (8000d10 <pedLightHandler+0xd0>)
 8000cdc:	f000 fefb 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce6:	480b      	ldr	r0, [pc, #44]	; (8000d14 <pedLightHandler+0xd4>)
 8000ce8:	f000 fef5 	bl	8001ad6 <HAL_GPIO_WritePin>
		break;
 8000cec:	e00c      	b.n	8000d08 <pedLightHandler+0xc8>
	case YR:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf4:	4806      	ldr	r0, [pc, #24]	; (8000d10 <pedLightHandler+0xd0>)
 8000cf6:	f000 feee 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <pedLightHandler+0xd4>)
 8000d02:	f000 fee8 	bl	8001ad6 <HAL_GPIO_WritePin>
		break;
 8000d06:	bf00      	nop
	}
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000072 	.word	0x20000072
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	40010800 	.word	0x40010800

08000d18 <buzzerChangeState>:
void buzzerChangeState(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	switch(buzzstate){
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <buzzerChangeState+0x58>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <buzzerChangeState+0x12>
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d00f      	beq.n	8000d48 <buzzerChangeState+0x30>
			setBuzzerStateTimer(100);
			buzzstate=0;
		}
		break;
	}
}
 8000d28:	e020      	b.n	8000d6c <buzzerChangeState+0x54>
		if(FLAG_BUZZER==1){
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <buzzerChangeState+0x5c>)
 8000d2c:	791b      	ldrb	r3, [r3, #4]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d119      	bne.n	8000d66 <buzzerChangeState+0x4e>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,10);
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <buzzerChangeState+0x60>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	220a      	movs	r2, #10
 8000d38:	635a      	str	r2, [r3, #52]	; 0x34
			setBuzzerStateTimer(100);
 8000d3a:	2064      	movs	r0, #100	; 0x64
 8000d3c:	f000 f8e2 	bl	8000f04 <setBuzzerStateTimer>
			buzzstate=1;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <buzzerChangeState+0x58>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
		break;
 8000d46:	e00e      	b.n	8000d66 <buzzerChangeState+0x4e>
		if(FLAG_BUZZER==1){
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <buzzerChangeState+0x5c>)
 8000d4a:	791b      	ldrb	r3, [r3, #4]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10c      	bne.n	8000d6a <buzzerChangeState+0x52>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <buzzerChangeState+0x60>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2200      	movs	r2, #0
 8000d56:	635a      	str	r2, [r3, #52]	; 0x34
			setBuzzerStateTimer(100);
 8000d58:	2064      	movs	r0, #100	; 0x64
 8000d5a:	f000 f8d3 	bl	8000f04 <setBuzzerStateTimer>
			buzzstate=0;
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <buzzerChangeState+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
		break;
 8000d64:	e001      	b.n	8000d6a <buzzerChangeState+0x52>
		break;
 8000d66:	bf00      	nop
 8000d68:	e000      	b.n	8000d6c <buzzerChangeState+0x54>
		break;
 8000d6a:	bf00      	nop
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000074 	.word	0x20000074
 8000d74:	20000108 	.word	0x20000108
 8000d78:	20000078 	.word	0x20000078

08000d7c <pedBuzzHandler>:
void pedBuzzHandler(){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	switch(autolightstate){
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <pedBuzzHandler+0x74>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b05      	cmp	r3, #5
 8000d86:	d830      	bhi.n	8000dea <pedBuzzHandler+0x6e>
 8000d88:	a201      	add	r2, pc, #4	; (adr r2, 8000d90 <pedBuzzHandler+0x14>)
 8000d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8e:	bf00      	nop
 8000d90:	08000da9 	.word	0x08000da9
 8000d94:	08000db3 	.word	0x08000db3
 8000d98:	08000dbd 	.word	0x08000dbd
 8000d9c:	08000dcf 	.word	0x08000dcf
 8000da0:	08000dd5 	.word	0x08000dd5
 8000da4:	08000ddf 	.word	0x08000ddf
	case INIT:
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <pedBuzzHandler+0x78>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2200      	movs	r2, #0
 8000dae:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000db0:	e01b      	b.n	8000dea <pedBuzzHandler+0x6e>
	case HOLD:
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <pedBuzzHandler+0x78>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2200      	movs	r2, #0
 8000db8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000dba:	e016      	b.n	8000dea <pedBuzzHandler+0x6e>
	case RG:
		if(lightdisplay[1]<5)
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <pedBuzzHandler+0x7c>)
 8000dbe:	785b      	ldrb	r3, [r3, #1]
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	d811      	bhi.n	8000de8 <pedBuzzHandler+0x6c>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,10);
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <pedBuzzHandler+0x78>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	220a      	movs	r2, #10
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000dcc:	e00c      	b.n	8000de8 <pedBuzzHandler+0x6c>
	case RY:
		buzzerChangeState();
 8000dce:	f7ff ffa3 	bl	8000d18 <buzzerChangeState>
		break;
 8000dd2:	e00a      	b.n	8000dea <pedBuzzHandler+0x6e>
	case GR:
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <pedBuzzHandler+0x78>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000ddc:	e005      	b.n	8000dea <pedBuzzHandler+0x6e>
	case YR:
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <pedBuzzHandler+0x78>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2200      	movs	r2, #0
 8000de4:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000de6:	e000      	b.n	8000dea <pedBuzzHandler+0x6e>
		break;
 8000de8:	bf00      	nop
	}
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000072 	.word	0x20000072
 8000df4:	20000078 	.word	0x20000078
 8000df8:	20000070 	.word	0x20000070

08000dfc <pedButtonHandler>:
void pedButtonHandler(enum PEDESTRIANSTATE nextState){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	if(is_button_pressed(3)){
 8000e06:	2003      	movs	r0, #3
 8000e08:	f7ff fbc4 	bl	8000594 <is_button_pressed>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <pedButtonHandler+0x1e>
		flag_ped_press=1;
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <pedButtonHandler+0x58>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
			autolightstate=INIT;
			FLAG_AUTO=1;
		}
#endif
	}
}
 8000e18:	e018      	b.n	8000e4c <pedButtonHandler+0x50>
	else if(!is_button_pressed(3) && flag_ped_press==1){
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	f7ff fbba 	bl	8000594 <is_button_pressed>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d112      	bne.n	8000e4c <pedButtonHandler+0x50>
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <pedButtonHandler+0x58>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d10e      	bne.n	8000e4c <pedButtonHandler+0x50>
		flag_ped_press=0;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <pedButtonHandler+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
		pedstate=nextState;
 8000e34:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <pedButtonHandler+0x5c>)
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	7013      	strb	r3, [r2, #0]
		if(nextState==ON){
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d105      	bne.n	8000e4c <pedButtonHandler+0x50>
			autolightstate=INIT;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <pedButtonHandler+0x60>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
			FLAG_AUTO=1;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <pedButtonHandler+0x64>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000077 	.word	0x20000077
 8000e58:	20000073 	.word	0x20000073
 8000e5c:	20000072 	.word	0x20000072
 8000e60:	20000108 	.word	0x20000108

08000e64 <setAutoLightTimer>:


uint8_t flag[MAX_SOFTWARE_TIMER];
uint32_t counter[MAX_SOFTWARE_TIMER];

void setAutoLightTimer(int duration){
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	flag[0]=0;
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <setAutoLightTimer+0x20>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
	counter[0]=duration/TIMER_CYCLE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <setAutoLightTimer+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000108 	.word	0x20000108
 8000e88:	20000114 	.word	0x20000114

08000e8c <setTuningLightTimer>:

void setTuningLightTimer(int duration){
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	flag[1]=0;
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <setTuningLightTimer+0x20>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	705a      	strb	r2, [r3, #1]
	counter[1]=duration/TIMER_CYCLE;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <setTuningLightTimer+0x24>)
 8000e9e:	6053      	str	r3, [r2, #4]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000108 	.word	0x20000108
 8000eb0:	20000114 	.word	0x20000114

08000eb4 <setButtonCooldownTimer>:

void setButtonCooldownTimer(int duration){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	flag[2]=0;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <setButtonCooldownTimer+0x20>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	709a      	strb	r2, [r3, #2]
	counter[2]=duration/TIMER_CYCLE;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <setButtonCooldownTimer+0x24>)
 8000ec6:	6093      	str	r3, [r2, #8]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000108 	.word	0x20000108
 8000ed8:	20000114 	.word	0x20000114

08000edc <setAutoIncTimer>:

void setAutoIncTimer(int duration){
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	flag[3]=0;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <setAutoIncTimer+0x20>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	70da      	strb	r2, [r3, #3]
	counter[3]=duration/TIMER_CYCLE;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <setAutoIncTimer+0x24>)
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000108 	.word	0x20000108
 8000f00:	20000114 	.word	0x20000114

08000f04 <setBuzzerStateTimer>:
void setBuzzerStateTimer(int duration){
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	flag[4]=0;
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <setBuzzerStateTimer+0x20>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	711a      	strb	r2, [r3, #4]
	counter[4]=duration/TIMER_CYCLE;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <setBuzzerStateTimer+0x24>)
 8000f16:	6113      	str	r3, [r2, #16]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000108 	.word	0x20000108
 8000f28:	20000114 	.word	0x20000114

08000f2c <timerRun>:

void timerRun(){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_SOFTWARE_TIMER;i++){
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	e01c      	b.n	8000f72 <timerRun+0x46>
		if(counter[i]>0) counter[i]--;
 8000f38:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <timerRun+0x58>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d008      	beq.n	8000f56 <timerRun+0x2a>
 8000f44:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <timerRun+0x58>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4c:	1e5a      	subs	r2, r3, #1
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <timerRun+0x58>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(counter[i]==0) flag[i]=1;
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <timerRun+0x58>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d104      	bne.n	8000f6c <timerRun+0x40>
 8000f62:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <timerRun+0x5c>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4413      	add	r3, r2
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<MAX_SOFTWARE_TIMER;i++){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b09      	cmp	r3, #9
 8000f76:	dddf      	ble.n	8000f38 <timerRun+0xc>
	}
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	20000114 	.word	0x20000114
 8000f88:	20000108 	.word	0x20000108

08000f8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_MspInit+0x5c>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <HAL_MspInit+0x5c>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6193      	str	r3, [r2, #24]
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_MspInit+0x5c>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_MspInit+0x5c>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <HAL_MspInit+0x5c>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	61d3      	str	r3, [r2, #28]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_MspInit+0x5c>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_MspInit+0x60>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_MspInit+0x60>)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010000 	.word	0x40010000

08000ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001000:	d114      	bne.n	800102c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_TIM_Base_MspInit+0x78>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a18      	ldr	r2, [pc, #96]	; (8001068 <HAL_TIM_Base_MspInit+0x78>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	61d3      	str	r3, [r2, #28]
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_TIM_Base_MspInit+0x78>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	201c      	movs	r0, #28
 8001020:	f000 fb87 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001024:	201c      	movs	r0, #28
 8001026:	f000 fba0 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800102a:	e018      	b.n	800105e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <HAL_TIM_Base_MspInit+0x7c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d113      	bne.n	800105e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_TIM_Base_MspInit+0x78>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_TIM_Base_MspInit+0x78>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_TIM_Base_MspInit+0x78>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	201d      	movs	r0, #29
 8001054:	f000 fb6d 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001058:	201d      	movs	r0, #29
 800105a:	f000 fb86 	bl	800176a <HAL_NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000
 800106c:	40000400 	.word	0x40000400

08001070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <HAL_TIM_MspPostInit+0x58>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d117      	bne.n	80010c0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_TIM_MspPostInit+0x5c>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <HAL_TIM_MspPostInit+0x5c>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_TIM_MspPostInit+0x5c>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 80010a8:	2340      	movs	r3, #64	; 0x40
 80010aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4619      	mov	r1, r3
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <HAL_TIM_MspPostInit+0x60>)
 80010bc:	f000 fb70 	bl	80017a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010c0:	bf00      	nop
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40000400 	.word	0x40000400
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010800 	.word	0x40010800

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <NMI_Handler+0x4>

080010da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <MemManage_Handler+0x4>

080010e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111a:	f000 fa17 	bl	800154c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <TIM2_IRQHandler+0x10>)
 800112a:	f001 fa7d 	bl	8002628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200000c0 	.word	0x200000c0

08001138 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <TIM3_IRQHandler+0x10>)
 800113e:	f001 fa73 	bl	8002628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000078 	.word	0x20000078

0800114c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <tuning_fsm>:
enum TUNINGLIGHT tunlightstate=T_HOLD;

#include <tuning_fsm.h>

uint8_t temp_lightdisplay=0;
void tuning_fsm(){
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	switch(tunlightstate){
 800115c:	4b35      	ldr	r3, [pc, #212]	; (8001234 <tuning_fsm+0xdc>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b04      	cmp	r3, #4
 8001162:	d865      	bhi.n	8001230 <tuning_fsm+0xd8>
 8001164:	a201      	add	r2, pc, #4	; (adr r2, 800116c <tuning_fsm+0x14>)
 8001166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116a:	bf00      	nop
 800116c:	080011a5 	.word	0x080011a5
 8001170:	080011cf 	.word	0x080011cf
 8001174:	080011f9 	.word	0x080011f9
 8001178:	08001181 	.word	0x08001181
 800117c:	08001195 	.word	0x08001195
	case T_INIT:
		adjTuningLight();
 8001180:	f000 f862 	bl	8001248 <adjTuningLight>
		tunlightstate=T_RED;
 8001184:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <tuning_fsm+0xdc>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
		temp_lightdisplay=lightDuration[0];
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <tuning_fsm+0xe0>)
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	4b2b      	ldr	r3, [pc, #172]	; (800123c <tuning_fsm+0xe4>)
 8001190:	701a      	strb	r2, [r3, #0]
		break;
 8001192:	e04d      	b.n	8001230 <tuning_fsm+0xd8>
	case T_HOLD:
		if(mode==TUNING_M){
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <tuning_fsm+0xe8>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d142      	bne.n	8001222 <tuning_fsm+0xca>
			tunlightstate=T_INIT;
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <tuning_fsm+0xdc>)
 800119e:	2203      	movs	r2, #3
 80011a0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80011a2:	e03e      	b.n	8001222 <tuning_fsm+0xca>
	case T_RED:
		if(FLAG_TUN==1){
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <tuning_fsm+0xec>)
 80011a6:	785b      	ldrb	r3, [r3, #1]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d104      	bne.n	80011b6 <tuning_fsm+0x5e>
//			FLAG_MAN=0;
			adjTuningLight();
 80011ac:	f000 f84c 	bl	8001248 <adjTuningLight>
			setTuningLightTimer(250);
 80011b0:	20fa      	movs	r0, #250	; 0xfa
 80011b2:	f7ff fe6b 	bl	8000e8c <setTuningLightTimer>
		}
		if(FLAG_BUT_CD==1){
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <tuning_fsm+0xec>)
 80011b8:	789b      	ldrb	r3, [r3, #2]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d133      	bne.n	8001226 <tuning_fsm+0xce>
//			FLAG_BUT_CD=0;
			tunButtonHandler(0, T_YELLOW);
 80011be:	2101      	movs	r1, #1
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f8b7 	bl	8001334 <tunButtonHandler>
			setButtonCooldownTimer(100);
 80011c6:	2064      	movs	r0, #100	; 0x64
 80011c8:	f7ff fe74 	bl	8000eb4 <setButtonCooldownTimer>
		}
		break;
 80011cc:	e02b      	b.n	8001226 <tuning_fsm+0xce>
	case T_YELLOW:
		if(FLAG_TUN==1){
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <tuning_fsm+0xec>)
 80011d0:	785b      	ldrb	r3, [r3, #1]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d104      	bne.n	80011e0 <tuning_fsm+0x88>
//			FLAG_MAN=0;
			adjTuningLight();
 80011d6:	f000 f837 	bl	8001248 <adjTuningLight>
			setTuningLightTimer(250);
 80011da:	20fa      	movs	r0, #250	; 0xfa
 80011dc:	f7ff fe56 	bl	8000e8c <setTuningLightTimer>
		}
		if(FLAG_BUT_CD==1){
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <tuning_fsm+0xec>)
 80011e2:	789b      	ldrb	r3, [r3, #2]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d120      	bne.n	800122a <tuning_fsm+0xd2>
//			FLAG_BUT_CD=0;
			tunButtonHandler(1, T_GREEN);
 80011e8:	2102      	movs	r1, #2
 80011ea:	2001      	movs	r0, #1
 80011ec:	f000 f8a2 	bl	8001334 <tunButtonHandler>
			setButtonCooldownTimer(100);
 80011f0:	2064      	movs	r0, #100	; 0x64
 80011f2:	f7ff fe5f 	bl	8000eb4 <setButtonCooldownTimer>
		}
		break;
 80011f6:	e018      	b.n	800122a <tuning_fsm+0xd2>
	case T_GREEN:
		if(FLAG_TUN==1){
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <tuning_fsm+0xec>)
 80011fa:	785b      	ldrb	r3, [r3, #1]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d104      	bne.n	800120a <tuning_fsm+0xb2>
//			FLAG_MAN=0;
			adjTuningLight();
 8001200:	f000 f822 	bl	8001248 <adjTuningLight>
			setTuningLightTimer(250);
 8001204:	20fa      	movs	r0, #250	; 0xfa
 8001206:	f7ff fe41 	bl	8000e8c <setTuningLightTimer>
		}
		if(FLAG_BUT_CD==1){
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <tuning_fsm+0xec>)
 800120c:	789b      	ldrb	r3, [r3, #2]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d10d      	bne.n	800122e <tuning_fsm+0xd6>
//			FLAG_BUT_CD=0;
			tunButtonHandler(2, T_HOLD);
 8001212:	2104      	movs	r1, #4
 8001214:	2002      	movs	r0, #2
 8001216:	f000 f88d 	bl	8001334 <tunButtonHandler>
			setButtonCooldownTimer(100);
 800121a:	2064      	movs	r0, #100	; 0x64
 800121c:	f7ff fe4a 	bl	8000eb4 <setButtonCooldownTimer>
		}
		break;
 8001220:	e005      	b.n	800122e <tuning_fsm+0xd6>
		break;
 8001222:	bf00      	nop
 8001224:	e004      	b.n	8001230 <tuning_fsm+0xd8>
		break;
 8001226:	bf00      	nop
 8001228:	e002      	b.n	8001230 <tuning_fsm+0xd8>
		break;
 800122a:	bf00      	nop
 800122c:	e000      	b.n	8001230 <tuning_fsm+0xd8>
		break;
 800122e:	bf00      	nop
	}
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000028 	.word	0x20000028
 8001238:	20000020 	.word	0x20000020
 800123c:	20000075 	.word	0x20000075
 8001240:	20000050 	.word	0x20000050
 8001244:	20000108 	.word	0x20000108

08001248 <adjTuningLight>:

void adjTuningLight(){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	switch(tunlightstate){
 800124c:	4b27      	ldr	r3, [pc, #156]	; (80012ec <adjTuningLight+0xa4>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b04      	cmp	r3, #4
 8001252:	d849      	bhi.n	80012e8 <adjTuningLight+0xa0>
 8001254:	a201      	add	r2, pc, #4	; (adr r2, 800125c <adjTuningLight+0x14>)
 8001256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125a:	bf00      	nop
 800125c:	0800129d 	.word	0x0800129d
 8001260:	080012b1 	.word	0x080012b1
 8001264:	080012d5 	.word	0x080012d5
 8001268:	08001271 	.word	0x08001271
 800126c:	080012e7 	.word	0x080012e7
	case T_INIT:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001276:	481e      	ldr	r0, [pc, #120]	; (80012f0 <adjTuningLight+0xa8>)
 8001278:	f000 fc2d 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2108      	movs	r1, #8
 8001280:	481c      	ldr	r0, [pc, #112]	; (80012f4 <adjTuningLight+0xac>)
 8001282:	f000 fc28 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2120      	movs	r1, #32
 800128a:	481a      	ldr	r0, [pc, #104]	; (80012f4 <adjTuningLight+0xac>)
 800128c:	f000 fc23 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2110      	movs	r1, #16
 8001294:	4817      	ldr	r0, [pc, #92]	; (80012f4 <adjTuningLight+0xac>)
 8001296:	f000 fc1e 	bl	8001ad6 <HAL_GPIO_WritePin>
		break;
 800129a:	e025      	b.n	80012e8 <adjTuningLight+0xa0>
	case T_HOLD:
		break;
	case T_RED:
		HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 800129c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <adjTuningLight+0xa8>)
 80012a2:	f000 fc30 	bl	8001b06 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80012a6:	2120      	movs	r1, #32
 80012a8:	4812      	ldr	r0, [pc, #72]	; (80012f4 <adjTuningLight+0xac>)
 80012aa:	f000 fc2c 	bl	8001b06 <HAL_GPIO_TogglePin>
		break;
 80012ae:	e01b      	b.n	80012e8 <adjTuningLight+0xa0>
	case T_YELLOW:
		HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 80012b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b4:	480e      	ldr	r0, [pc, #56]	; (80012f0 <adjTuningLight+0xa8>)
 80012b6:	f000 fc26 	bl	8001b06 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 80012ba:	2108      	movs	r1, #8
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <adjTuningLight+0xac>)
 80012be:	f000 fc22 	bl	8001b06 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80012c2:	2120      	movs	r1, #32
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <adjTuningLight+0xac>)
 80012c6:	f000 fc1e 	bl	8001b06 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 80012ca:	2110      	movs	r1, #16
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <adjTuningLight+0xac>)
 80012ce:	f000 fc1a 	bl	8001b06 <HAL_GPIO_TogglePin>
		break;
 80012d2:	e009      	b.n	80012e8 <adjTuningLight+0xa0>
	case T_GREEN:
		HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 80012d4:	2108      	movs	r1, #8
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <adjTuningLight+0xac>)
 80012d8:	f000 fc15 	bl	8001b06 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 80012dc:	2110      	movs	r1, #16
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <adjTuningLight+0xac>)
 80012e0:	f000 fc11 	bl	8001b06 <HAL_GPIO_TogglePin>
		break;
 80012e4:	e000      	b.n	80012e8 <adjTuningLight+0xa0>
		break;
 80012e6:	bf00      	nop
	}
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000028 	.word	0x20000028
 80012f0:	40010800 	.word	0x40010800
 80012f4:	40010c00 	.word	0x40010c00

080012f8 <turnOffCurrentLight>:

void turnOffCurrentLight(){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001302:	480a      	ldr	r0, [pc, #40]	; (800132c <turnOffCurrentLight+0x34>)
 8001304:	f000 fbe7 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2108      	movs	r1, #8
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <turnOffCurrentLight+0x38>)
 800130e:	f000 fbe2 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2120      	movs	r1, #32
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <turnOffCurrentLight+0x38>)
 8001318:	f000 fbdd 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	2110      	movs	r1, #16
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <turnOffCurrentLight+0x38>)
 8001322:	f000 fbd8 	bl	8001ad6 <HAL_GPIO_WritePin>
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40010800 	.word	0x40010800
 8001330:	40010c00 	.word	0x40010c00

08001334 <tunButtonHandler>:

void tunButtonHandler(enum TUNINGLIGHT curLight,enum TUNINGLIGHT nextLight){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]
	if(is_button_pressed(0)){
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff f925 	bl	8000594 <is_button_pressed>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <tunButtonHandler+0x24>
		flag_mode_press=1;
 8001350:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <tunButtonHandler+0x11c>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	e01d      	b.n	8001394 <tunButtonHandler+0x60>
	}
	else if(!is_button_pressed(0) && flag_mode_press==1){
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff f91b 	bl	8000594 <is_button_pressed>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d117      	bne.n	8001394 <tunButtonHandler+0x60>
 8001364:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <tunButtonHandler+0x11c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d113      	bne.n	8001394 <tunButtonHandler+0x60>
		flag_mode_press=0;
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <tunButtonHandler+0x11c>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
		if(nextLight==T_HOLD) mode=AUTO_M;
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	2b04      	cmp	r3, #4
 8001376:	d103      	bne.n	8001380 <tunButtonHandler+0x4c>
 8001378:	4b36      	ldr	r3, [pc, #216]	; (8001454 <tunButtonHandler+0x120>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	e004      	b.n	800138a <tunButtonHandler+0x56>
		else temp_lightdisplay=lightDuration[nextLight];
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	4a35      	ldr	r2, [pc, #212]	; (8001458 <tunButtonHandler+0x124>)
 8001384:	5cd2      	ldrb	r2, [r2, r3]
 8001386:	4b35      	ldr	r3, [pc, #212]	; (800145c <tunButtonHandler+0x128>)
 8001388:	701a      	strb	r2, [r3, #0]
		tunlightstate=nextLight;
 800138a:	4a35      	ldr	r2, [pc, #212]	; (8001460 <tunButtonHandler+0x12c>)
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	7013      	strb	r3, [r2, #0]
		turnOffCurrentLight();
 8001390:	f7ff ffb2 	bl	80012f8 <turnOffCurrentLight>
	}

	if(is_button_pressed(1)){
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff f8fd 	bl	8000594 <is_button_pressed>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d01a      	beq.n	80013d6 <tunButtonHandler+0xa2>
		flag_inc_press=1;
 80013a0:	4b30      	ldr	r3, [pc, #192]	; (8001464 <tunButtonHandler+0x130>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
		if(is_button_pressed_1s(1)){
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7ff f90e 	bl	80005c8 <is_button_pressed_1s>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d02c      	beq.n	800140c <tunButtonHandler+0xd8>
			flag_hold=1;
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <tunButtonHandler+0x134>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
			if(FLAG_AUTO_INC==1){
 80013b8:	4b2c      	ldr	r3, [pc, #176]	; (800146c <tunButtonHandler+0x138>)
 80013ba:	78db      	ldrb	r3, [r3, #3]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d125      	bne.n	800140c <tunButtonHandler+0xd8>
//				FLAG_AUTO_INC=0;
				temp_lightdisplay++;
 80013c0:	4b26      	ldr	r3, [pc, #152]	; (800145c <tunButtonHandler+0x128>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <tunButtonHandler+0x128>)
 80013ca:	701a      	strb	r2, [r3, #0]
				setAutoIncTimer(500);
 80013cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013d0:	f7ff fd84 	bl	8000edc <setAutoIncTimer>
 80013d4:	e01a      	b.n	800140c <tunButtonHandler+0xd8>
			}
		}
	}
	else if (!is_button_pressed(1) && flag_inc_press==1){
 80013d6:	2001      	movs	r0, #1
 80013d8:	f7ff f8dc 	bl	8000594 <is_button_pressed>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d114      	bne.n	800140c <tunButtonHandler+0xd8>
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <tunButtonHandler+0x130>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d110      	bne.n	800140c <tunButtonHandler+0xd8>
		flag_inc_press=0;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <tunButtonHandler+0x130>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
		(flag_hold==0)?(temp_lightdisplay++):(flag_hold=0);
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <tunButtonHandler+0x134>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d106      	bne.n	8001406 <tunButtonHandler+0xd2>
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <tunButtonHandler+0x128>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <tunButtonHandler+0x128>)
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	e002      	b.n	800140c <tunButtonHandler+0xd8>
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <tunButtonHandler+0x134>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
	}

	if(is_button_pressed(2)){
 800140c:	2002      	movs	r0, #2
 800140e:	f7ff f8c1 	bl	8000594 <is_button_pressed>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <tunButtonHandler+0xec>
		flag_set_press=1;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <tunButtonHandler+0x13c>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
	}
	else if (!is_button_pressed(2) && flag_inc_press==1){
		flag_set_press=0;
		lightDuration[curLight]=temp_lightdisplay+1;
	}
}
 800141e:	e013      	b.n	8001448 <tunButtonHandler+0x114>
	else if (!is_button_pressed(2) && flag_inc_press==1){
 8001420:	2002      	movs	r0, #2
 8001422:	f7ff f8b7 	bl	8000594 <is_button_pressed>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10d      	bne.n	8001448 <tunButtonHandler+0x114>
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <tunButtonHandler+0x130>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d109      	bne.n	8001448 <tunButtonHandler+0x114>
		flag_set_press=0;
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <tunButtonHandler+0x13c>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
		lightDuration[curLight]=temp_lightdisplay+1;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <tunButtonHandler+0x128>)
 800143c:	781a      	ldrb	r2, [r3, #0]
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	3201      	adds	r2, #1
 8001442:	b2d1      	uxtb	r1, r2
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <tunButtonHandler+0x124>)
 8001446:	54d1      	strb	r1, [r2, r3]
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000006c 	.word	0x2000006c
 8001454:	20000050 	.word	0x20000050
 8001458:	20000020 	.word	0x20000020
 800145c:	20000075 	.word	0x20000075
 8001460:	20000028 	.word	0x20000028
 8001464:	2000006d 	.word	0x2000006d
 8001468:	2000006f 	.word	0x2000006f
 800146c:	20000108 	.word	0x20000108
 8001470:	2000006e 	.word	0x2000006e

08001474 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001474:	f7ff fe6a 	bl	800114c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001478:	480b      	ldr	r0, [pc, #44]	; (80014a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800147a:	490c      	ldr	r1, [pc, #48]	; (80014ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800147c:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001490:	4c09      	ldr	r4, [pc, #36]	; (80014b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149e:	f001 fe8d 	bl	80031bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014a2:	f7ff f8bf 	bl	8000624 <main>
  bx lr
 80014a6:	4770      	bx	lr
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80014b0:	08003258 	.word	0x08003258
  ldr r2, =_sbss
 80014b4:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80014b8:	20000140 	.word	0x20000140

080014bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC1_2_IRQHandler>
	...

080014c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_Init+0x28>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_Init+0x28>)
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f000 f923 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d6:	200f      	movs	r0, #15
 80014d8:	f000 f808 	bl	80014ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014dc:	f7ff fd56 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x54>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x58>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f93b 	bl	8001786 <HAL_SYSTICK_Config>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00e      	b.n	8001538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d80a      	bhi.n	8001536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f000 f903 	bl	8001732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800152c:	4a06      	ldr	r2, [pc, #24]	; (8001548 <HAL_InitTick+0x5c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000024 	.word	0x20000024
 8001544:	20000030 	.word	0x20000030
 8001548:	2000002c 	.word	0x2000002c

0800154c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_IncTick+0x1c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_IncTick+0x20>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <HAL_IncTick+0x20>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	20000030 	.word	0x20000030
 800156c:	2000013c 	.word	0x2000013c

08001570 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b02      	ldr	r3, [pc, #8]	; (8001580 <HAL_GetTick+0x10>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	2000013c 	.word	0x2000013c

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4906      	ldr	r1, [pc, #24]	; (800161c <__NVIC_EnableIRQ+0x34>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0a      	blt.n	800164a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	; (800166c <__NVIC_SetPriority+0x4c>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	440b      	add	r3, r1
 8001644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001648:	e00a      	b.n	8001660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4908      	ldr	r1, [pc, #32]	; (8001670 <__NVIC_SetPriority+0x50>)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3b04      	subs	r3, #4
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	440b      	add	r3, r1
 800165e:	761a      	strb	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f1c3 0307 	rsb	r3, r3, #7
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf28      	it	cs
 8001692:	2304      	movcs	r3, #4
 8001694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	2b06      	cmp	r3, #6
 800169c:	d902      	bls.n	80016a4 <NVIC_EncodePriority+0x30>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3b03      	subs	r3, #3
 80016a2:	e000      	b.n	80016a6 <NVIC_EncodePriority+0x32>
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	4313      	orrs	r3, r2
         );
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7ff ff90 	bl	8001620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff2d 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff42 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff90 	bl	8001674 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5f 	bl	8001620 <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff35 	bl	80015e8 <__NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffa2 	bl	80016d8 <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b08b      	sub	sp, #44	; 0x2c
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b2:	e169      	b.n	8001a88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017b4:	2201      	movs	r2, #1
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8158 	bne.w	8001a82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4a9a      	ldr	r2, [pc, #616]	; (8001a40 <HAL_GPIO_Init+0x2a0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d05e      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017dc:	4a98      	ldr	r2, [pc, #608]	; (8001a40 <HAL_GPIO_Init+0x2a0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d875      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017e2:	4a98      	ldr	r2, [pc, #608]	; (8001a44 <HAL_GPIO_Init+0x2a4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d058      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017e8:	4a96      	ldr	r2, [pc, #600]	; (8001a44 <HAL_GPIO_Init+0x2a4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d86f      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017ee:	4a96      	ldr	r2, [pc, #600]	; (8001a48 <HAL_GPIO_Init+0x2a8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d052      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017f4:	4a94      	ldr	r2, [pc, #592]	; (8001a48 <HAL_GPIO_Init+0x2a8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d869      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017fa:	4a94      	ldr	r2, [pc, #592]	; (8001a4c <HAL_GPIO_Init+0x2ac>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d04c      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 8001800:	4a92      	ldr	r2, [pc, #584]	; (8001a4c <HAL_GPIO_Init+0x2ac>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d863      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 8001806:	4a92      	ldr	r2, [pc, #584]	; (8001a50 <HAL_GPIO_Init+0x2b0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d046      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 800180c:	4a90      	ldr	r2, [pc, #576]	; (8001a50 <HAL_GPIO_Init+0x2b0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d85d      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 8001812:	2b12      	cmp	r3, #18
 8001814:	d82a      	bhi.n	800186c <HAL_GPIO_Init+0xcc>
 8001816:	2b12      	cmp	r3, #18
 8001818:	d859      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <HAL_GPIO_Init+0x80>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	0800189b 	.word	0x0800189b
 8001824:	08001875 	.word	0x08001875
 8001828:	08001887 	.word	0x08001887
 800182c:	080018c9 	.word	0x080018c9
 8001830:	080018cf 	.word	0x080018cf
 8001834:	080018cf 	.word	0x080018cf
 8001838:	080018cf 	.word	0x080018cf
 800183c:	080018cf 	.word	0x080018cf
 8001840:	080018cf 	.word	0x080018cf
 8001844:	080018cf 	.word	0x080018cf
 8001848:	080018cf 	.word	0x080018cf
 800184c:	080018cf 	.word	0x080018cf
 8001850:	080018cf 	.word	0x080018cf
 8001854:	080018cf 	.word	0x080018cf
 8001858:	080018cf 	.word	0x080018cf
 800185c:	080018cf 	.word	0x080018cf
 8001860:	080018cf 	.word	0x080018cf
 8001864:	0800187d 	.word	0x0800187d
 8001868:	08001891 	.word	0x08001891
 800186c:	4a79      	ldr	r2, [pc, #484]	; (8001a54 <HAL_GPIO_Init+0x2b4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001872:	e02c      	b.n	80018ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	623b      	str	r3, [r7, #32]
          break;
 800187a:	e029      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	3304      	adds	r3, #4
 8001882:	623b      	str	r3, [r7, #32]
          break;
 8001884:	e024      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	3308      	adds	r3, #8
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e01f      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	330c      	adds	r3, #12
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e01a      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018a2:	2304      	movs	r3, #4
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e013      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b0:	2308      	movs	r3, #8
 80018b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	611a      	str	r2, [r3, #16]
          break;
 80018ba:	e009      	b.n	80018d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018bc:	2308      	movs	r3, #8
 80018be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	615a      	str	r2, [r3, #20]
          break;
 80018c6:	e003      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
          break;
 80018cc:	e000      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          break;
 80018ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2bff      	cmp	r3, #255	; 0xff
 80018d4:	d801      	bhi.n	80018da <HAL_GPIO_Init+0x13a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	e001      	b.n	80018de <HAL_GPIO_Init+0x13e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3304      	adds	r3, #4
 80018de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2bff      	cmp	r3, #255	; 0xff
 80018e4:	d802      	bhi.n	80018ec <HAL_GPIO_Init+0x14c>
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x152>
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	3b08      	subs	r3, #8
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	210f      	movs	r1, #15
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	401a      	ands	r2, r3
 8001904:	6a39      	ldr	r1, [r7, #32]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	431a      	orrs	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80b1 	beq.w	8001a82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001920:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <HAL_GPIO_Init+0x2b8>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a4c      	ldr	r2, [pc, #304]	; (8001a58 <HAL_GPIO_Init+0x2b8>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <HAL_GPIO_Init+0x2b8>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001938:	4a48      	ldr	r2, [pc, #288]	; (8001a5c <HAL_GPIO_Init+0x2bc>)
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a40      	ldr	r2, [pc, #256]	; (8001a60 <HAL_GPIO_Init+0x2c0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d013      	beq.n	800198c <HAL_GPIO_Init+0x1ec>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a3f      	ldr	r2, [pc, #252]	; (8001a64 <HAL_GPIO_Init+0x2c4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d00d      	beq.n	8001988 <HAL_GPIO_Init+0x1e8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a3e      	ldr	r2, [pc, #248]	; (8001a68 <HAL_GPIO_Init+0x2c8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <HAL_GPIO_Init+0x1e4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a3d      	ldr	r2, [pc, #244]	; (8001a6c <HAL_GPIO_Init+0x2cc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_GPIO_Init+0x1e0>
 800197c:	2303      	movs	r3, #3
 800197e:	e006      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001980:	2304      	movs	r3, #4
 8001982:	e004      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001984:	2302      	movs	r3, #2
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 800198c:	2300      	movs	r3, #0
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	f002 0203 	and.w	r2, r2, #3
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	4093      	lsls	r3, r2
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800199e:	492f      	ldr	r1, [pc, #188]	; (8001a5c <HAL_GPIO_Init+0x2bc>)
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	492c      	ldr	r1, [pc, #176]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019c6:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4928      	ldr	r1, [pc, #160]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	4922      	ldr	r1, [pc, #136]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60cb      	str	r3, [r1, #12]
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	491e      	ldr	r1, [pc, #120]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	4918      	ldr	r1, [pc, #96]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4914      	ldr	r1, [pc, #80]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d021      	beq.n	8001a74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	490e      	ldr	r1, [pc, #56]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
 8001a3c:	e021      	b.n	8001a82 <HAL_GPIO_Init+0x2e2>
 8001a3e:	bf00      	nop
 8001a40:	10320000 	.word	0x10320000
 8001a44:	10310000 	.word	0x10310000
 8001a48:	10220000 	.word	0x10220000
 8001a4c:	10210000 	.word	0x10210000
 8001a50:	10120000 	.word	0x10120000
 8001a54:	10110000 	.word	0x10110000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	40010800 	.word	0x40010800
 8001a64:	40010c00 	.word	0x40010c00
 8001a68:	40011000 	.word	0x40011000
 8001a6c:	40011400 	.word	0x40011400
 8001a70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	4909      	ldr	r1, [pc, #36]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	3301      	adds	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f47f ae8e 	bne.w	80017b4 <HAL_GPIO_Init+0x14>
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	372c      	adds	r7, #44	; 0x2c
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e001      	b.n	8001aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	807b      	strh	r3, [r7, #2]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae6:	787b      	ldrb	r3, [r7, #1]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aec:	887a      	ldrh	r2, [r7, #2]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001af2:	e003      	b.n	8001afc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001af4:	887b      	ldrh	r3, [r7, #2]
 8001af6:	041a      	lsls	r2, r3, #16
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	611a      	str	r2, [r3, #16]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b18:	887a      	ldrh	r2, [r7, #2]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	041a      	lsls	r2, r3, #16
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	400b      	ands	r3, r1
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	611a      	str	r2, [r3, #16]
}
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e26c      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8087 	beq.w	8001c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b58:	4b92      	ldr	r3, [pc, #584]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d00c      	beq.n	8001b7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b64:	4b8f      	ldr	r3, [pc, #572]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d112      	bne.n	8001b96 <HAL_RCC_OscConfig+0x5e>
 8001b70:	4b8c      	ldr	r3, [pc, #560]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7c:	d10b      	bne.n	8001b96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7e:	4b89      	ldr	r3, [pc, #548]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d06c      	beq.n	8001c64 <HAL_RCC_OscConfig+0x12c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d168      	bne.n	8001c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e246      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x76>
 8001ba0:	4b80      	ldr	r3, [pc, #512]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a7f      	ldr	r2, [pc, #508]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	e02e      	b.n	8001c0c <HAL_RCC_OscConfig+0xd4>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x98>
 8001bb6:	4b7b      	ldr	r3, [pc, #492]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a7a      	ldr	r2, [pc, #488]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b78      	ldr	r3, [pc, #480]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a77      	ldr	r2, [pc, #476]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e01d      	b.n	8001c0c <HAL_RCC_OscConfig+0xd4>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0xbc>
 8001bda:	4b72      	ldr	r3, [pc, #456]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a71      	ldr	r2, [pc, #452]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b6f      	ldr	r3, [pc, #444]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6e      	ldr	r2, [pc, #440]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0xd4>
 8001bf4:	4b6b      	ldr	r3, [pc, #428]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a6a      	ldr	r2, [pc, #424]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b68      	ldr	r3, [pc, #416]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a67      	ldr	r2, [pc, #412]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fcac 	bl	8001570 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fca8 	bl	8001570 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e1fa      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0xe4>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fc98 	bl	8001570 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fc94 	bl	8001570 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1e6      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x10c>
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d063      	beq.n	8001d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c72:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c7e:	4b49      	ldr	r3, [pc, #292]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d11c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x18c>
 8001c8a:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d116      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_RCC_OscConfig+0x176>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e1ba      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cae:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4939      	ldr	r1, [pc, #228]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	e03a      	b.n	8001d3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <HAL_RCC_OscConfig+0x270>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fc4d 	bl	8001570 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cda:	f7ff fc49 	bl	8001570 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e19b      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4927      	ldr	r1, [pc, #156]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
 8001d0c:	e015      	b.n	8001d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <HAL_RCC_OscConfig+0x270>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff fc2c 	bl	8001570 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fc28 	bl	8001570 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e17a      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d03a      	beq.n	8001dbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d019      	beq.n	8001d82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7ff fc0c 	bl	8001570 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fc08 	bl	8001570 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e15a      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	f000 fa9a 	bl	80022b4 <RCC_Delay>
 8001d80:	e01c      	b.n	8001dbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d88:	f7ff fbf2 	bl	8001570 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8e:	e00f      	b.n	8001db0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff fbee 	bl	8001570 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d908      	bls.n	8001db0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e140      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	42420000 	.word	0x42420000
 8001dac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	4b9e      	ldr	r3, [pc, #632]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1e9      	bne.n	8001d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80a6 	beq.w	8001f16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dce:	4b97      	ldr	r3, [pc, #604]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10d      	bne.n	8001df6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	4b94      	ldr	r3, [pc, #592]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	4a93      	ldr	r2, [pc, #588]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	61d3      	str	r3, [r2, #28]
 8001de6:	4b91      	ldr	r3, [pc, #580]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df6:	4b8e      	ldr	r3, [pc, #568]	; (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d118      	bne.n	8001e34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e02:	4b8b      	ldr	r3, [pc, #556]	; (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a8a      	ldr	r2, [pc, #552]	; (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fbaf 	bl	8001570 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e16:	f7ff fbab 	bl	8001570 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b64      	cmp	r3, #100	; 0x64
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0fd      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	4b81      	ldr	r3, [pc, #516]	; (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x312>
 8001e3c:	4b7b      	ldr	r3, [pc, #492]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a7a      	ldr	r2, [pc, #488]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	e02d      	b.n	8001ea6 <HAL_RCC_OscConfig+0x36e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x334>
 8001e52:	4b76      	ldr	r3, [pc, #472]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a75      	ldr	r2, [pc, #468]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	6213      	str	r3, [r2, #32]
 8001e5e:	4b73      	ldr	r3, [pc, #460]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a72      	ldr	r2, [pc, #456]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	f023 0304 	bic.w	r3, r3, #4
 8001e68:	6213      	str	r3, [r2, #32]
 8001e6a:	e01c      	b.n	8001ea6 <HAL_RCC_OscConfig+0x36e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b05      	cmp	r3, #5
 8001e72:	d10c      	bne.n	8001e8e <HAL_RCC_OscConfig+0x356>
 8001e74:	4b6d      	ldr	r3, [pc, #436]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4a6c      	ldr	r2, [pc, #432]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	6213      	str	r3, [r2, #32]
 8001e80:	4b6a      	ldr	r3, [pc, #424]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4a69      	ldr	r2, [pc, #420]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6213      	str	r3, [r2, #32]
 8001e8c:	e00b      	b.n	8001ea6 <HAL_RCC_OscConfig+0x36e>
 8001e8e:	4b67      	ldr	r3, [pc, #412]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a66      	ldr	r2, [pc, #408]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6213      	str	r3, [r2, #32]
 8001e9a:	4b64      	ldr	r3, [pc, #400]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a63      	ldr	r2, [pc, #396]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d015      	beq.n	8001eda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7ff fb5f 	bl	8001570 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7ff fb5b 	bl	8001570 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0ab      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ecc:	4b57      	ldr	r3, [pc, #348]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ee      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x37e>
 8001ed8:	e014      	b.n	8001f04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7ff fb49 	bl	8001570 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff fb45 	bl	8001570 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e095      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef8:	4b4c      	ldr	r3, [pc, #304]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1ee      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d105      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0a:	4b48      	ldr	r3, [pc, #288]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a47      	ldr	r2, [pc, #284]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8081 	beq.w	8002022 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f20:	4b42      	ldr	r3, [pc, #264]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d061      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d146      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f34:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <HAL_RCC_OscConfig+0x4fc>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7ff fb19 	bl	8001570 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f42:	f7ff fb15 	bl	8001570 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e067      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f68:	d108      	bne.n	8001f7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f6a:	4b30      	ldr	r3, [pc, #192]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	492d      	ldr	r1, [pc, #180]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a19      	ldr	r1, [r3, #32]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	4927      	ldr	r1, [pc, #156]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f94:	4b27      	ldr	r3, [pc, #156]	; (8002034 <HAL_RCC_OscConfig+0x4fc>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fae9 	bl	8001570 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7ff fae5 	bl	8001570 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e037      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x46a>
 8001fc0:	e02f      	b.n	8002022 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_RCC_OscConfig+0x4fc>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fad2 	bl	8001570 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff face 	bl	8001570 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e020      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x498>
 8001fee:	e018      	b.n	8002022 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e013      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	429a      	cmp	r2, r3
 800200e:	d106      	bne.n	800201e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
 8002034:	42420060 	.word	0x42420060

08002038 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0d0      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800204c:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d910      	bls.n	800207c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 0207 	bic.w	r2, r3, #7
 8002062:	4965      	ldr	r1, [pc, #404]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0b8      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002094:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800209e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ac:	4b53      	ldr	r3, [pc, #332]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a52      	ldr	r2, [pc, #328]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	494d      	ldr	r1, [pc, #308]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d040      	beq.n	8002158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d115      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e07f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e073      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002106:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06b      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f023 0203 	bic.w	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4936      	ldr	r1, [pc, #216]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002128:	f7ff fa22 	bl	8001570 <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	e00a      	b.n	8002146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7ff fa1e 	bl	8001570 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e053      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 020c 	and.w	r2, r3, #12
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	429a      	cmp	r2, r3
 8002156:	d1eb      	bne.n	8002130 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d210      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 0207 	bic.w	r2, r3, #7
 800216e:	4922      	ldr	r1, [pc, #136]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e032      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4916      	ldr	r1, [pc, #88]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	490e      	ldr	r1, [pc, #56]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021c6:	f000 f821 	bl	800220c <HAL_RCC_GetSysClockFreq>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	490a      	ldr	r1, [pc, #40]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	5ccb      	ldrb	r3, [r1, r3]
 80021da:	fa22 f303 	lsr.w	r3, r2, r3
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1cc>)
 80021e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1d0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff f980 	bl	80014ec <HAL_InitTick>

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40022000 	.word	0x40022000
 80021fc:	40021000 	.word	0x40021000
 8002200:	0800322c 	.word	0x0800322c
 8002204:	20000024 	.word	0x20000024
 8002208:	2000002c 	.word	0x2000002c

0800220c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b04      	cmp	r3, #4
 8002234:	d002      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x30>
 8002236:	2b08      	cmp	r3, #8
 8002238:	d003      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x36>
 800223a:	e027      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800223e:	613b      	str	r3, [r7, #16]
      break;
 8002240:	e027      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	0c9b      	lsrs	r3, r3, #18
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800224c:	5cd3      	ldrb	r3, [r2, r3]
 800224e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d010      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	0c5b      	lsrs	r3, r3, #17
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	4a11      	ldr	r2, [pc, #68]	; (80022ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800226e:	fb02 f203 	mul.w	r2, r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e004      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	613b      	str	r3, [r7, #16]
      break;
 800228a:	e002      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800228e:	613b      	str	r3, [r7, #16]
      break;
 8002290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002292:	693b      	ldr	r3, [r7, #16]
}
 8002294:	4618      	mov	r0, r3
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	007a1200 	.word	0x007a1200
 80022a8:	0800323c 	.word	0x0800323c
 80022ac:	0800324c 	.word	0x0800324c
 80022b0:	003d0900 	.word	0x003d0900

080022b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <RCC_Delay+0x34>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <RCC_Delay+0x38>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	0a5b      	lsrs	r3, r3, #9
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022d0:	bf00      	nop
  }
  while (Delay --);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	60fa      	str	r2, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f9      	bne.n	80022d0 <RCC_Delay+0x1c>
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	20000024 	.word	0x20000024
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e041      	b.n	8002386 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe fe6a 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3304      	adds	r3, #4
 800232c:	4619      	mov	r1, r3
 800232e:	4610      	mov	r0, r2
 8002330:	f000 fc30 	bl	8002b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d001      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e03a      	b.n	800241e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a18      	ldr	r2, [pc, #96]	; (8002428 <HAL_TIM_Base_Start_IT+0x98>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00e      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x58>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d2:	d009      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x58>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <HAL_TIM_Base_Start_IT+0x9c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x58>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <HAL_TIM_Base_Start_IT+0xa0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d111      	bne.n	800240c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d010      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240a:	e007      	b.n	800241c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	40012c00 	.word	0x40012c00
 800242c:	40000400 	.word	0x40000400
 8002430:	40000800 	.word	0x40000800

08002434 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e041      	b.n	80024ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f839 	bl	80024d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	4619      	mov	r1, r3
 8002472:	4610      	mov	r0, r2
 8002474:	f000 fb8e 	bl	8002b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <HAL_TIM_PWM_Start+0x24>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e022      	b.n	800254e <HAL_TIM_PWM_Start+0x6a>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b04      	cmp	r3, #4
 800250c:	d109      	bne.n	8002522 <HAL_TIM_PWM_Start+0x3e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b01      	cmp	r3, #1
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	e015      	b.n	800254e <HAL_TIM_PWM_Start+0x6a>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d109      	bne.n	800253c <HAL_TIM_PWM_Start+0x58>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	e008      	b.n	800254e <HAL_TIM_PWM_Start+0x6a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b01      	cmp	r3, #1
 8002546:	bf14      	ite	ne
 8002548:	2301      	movne	r3, #1
 800254a:	2300      	moveq	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e05e      	b.n	8002614 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d104      	bne.n	8002566 <HAL_TIM_PWM_Start+0x82>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002564:	e013      	b.n	800258e <HAL_TIM_PWM_Start+0xaa>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b04      	cmp	r3, #4
 800256a:	d104      	bne.n	8002576 <HAL_TIM_PWM_Start+0x92>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002574:	e00b      	b.n	800258e <HAL_TIM_PWM_Start+0xaa>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d104      	bne.n	8002586 <HAL_TIM_PWM_Start+0xa2>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002584:	e003      	b.n	800258e <HAL_TIM_PWM_Start+0xaa>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2201      	movs	r2, #1
 8002594:	6839      	ldr	r1, [r7, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fd7c 	bl	8003094 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1e      	ldr	r2, [pc, #120]	; (800261c <HAL_TIM_PWM_Start+0x138>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d107      	bne.n	80025b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a18      	ldr	r2, [pc, #96]	; (800261c <HAL_TIM_PWM_Start+0x138>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00e      	beq.n	80025de <HAL_TIM_PWM_Start+0xfa>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c8:	d009      	beq.n	80025de <HAL_TIM_PWM_Start+0xfa>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a14      	ldr	r2, [pc, #80]	; (8002620 <HAL_TIM_PWM_Start+0x13c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d004      	beq.n	80025de <HAL_TIM_PWM_Start+0xfa>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_TIM_PWM_Start+0x140>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d111      	bne.n	8002602 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b06      	cmp	r3, #6
 80025ee:	d010      	beq.n	8002612 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002600:	e007      	b.n	8002612 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40012c00 	.word	0x40012c00
 8002620:	40000400 	.word	0x40000400
 8002624:	40000800 	.word	0x40000800

08002628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b02      	cmp	r3, #2
 800263c:	d122      	bne.n	8002684 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b02      	cmp	r3, #2
 800264a:	d11b      	bne.n	8002684 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0202 	mvn.w	r2, #2
 8002654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fa76 	bl	8002b5c <HAL_TIM_IC_CaptureCallback>
 8002670:	e005      	b.n	800267e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fa69 	bl	8002b4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fa78 	bl	8002b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b04      	cmp	r3, #4
 8002690:	d122      	bne.n	80026d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b04      	cmp	r3, #4
 800269e:	d11b      	bne.n	80026d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0204 	mvn.w	r2, #4
 80026a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa4c 	bl	8002b5c <HAL_TIM_IC_CaptureCallback>
 80026c4:	e005      	b.n	80026d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fa3f 	bl	8002b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fa4e 	bl	8002b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d122      	bne.n	800272c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d11b      	bne.n	800272c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0208 	mvn.w	r2, #8
 80026fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2204      	movs	r2, #4
 8002702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa22 	bl	8002b5c <HAL_TIM_IC_CaptureCallback>
 8002718:	e005      	b.n	8002726 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fa15 	bl	8002b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fa24 	bl	8002b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b10      	cmp	r3, #16
 8002738:	d122      	bne.n	8002780 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b10      	cmp	r3, #16
 8002746:	d11b      	bne.n	8002780 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0210 	mvn.w	r2, #16
 8002750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2208      	movs	r2, #8
 8002756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f9f8 	bl	8002b5c <HAL_TIM_IC_CaptureCallback>
 800276c:	e005      	b.n	800277a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f9eb 	bl	8002b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f9fa 	bl	8002b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d10e      	bne.n	80027ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d107      	bne.n	80027ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0201 	mvn.w	r2, #1
 80027a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe f8d0 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b6:	2b80      	cmp	r3, #128	; 0x80
 80027b8:	d10e      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c4:	2b80      	cmp	r3, #128	; 0x80
 80027c6:	d107      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fce9 	bl	80031aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	d107      	bne.n	8002804 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f9be 	bl	8002b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b20      	cmp	r3, #32
 8002810:	d10e      	bne.n	8002830 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b20      	cmp	r3, #32
 800281e:	d107      	bne.n	8002830 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0220 	mvn.w	r2, #32
 8002828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fcb4 	bl	8003198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002852:	2302      	movs	r3, #2
 8002854:	e0ae      	b.n	80029b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b0c      	cmp	r3, #12
 8002862:	f200 809f 	bhi.w	80029a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002866:	a201      	add	r2, pc, #4	; (adr r2, 800286c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286c:	080028a1 	.word	0x080028a1
 8002870:	080029a5 	.word	0x080029a5
 8002874:	080029a5 	.word	0x080029a5
 8002878:	080029a5 	.word	0x080029a5
 800287c:	080028e1 	.word	0x080028e1
 8002880:	080029a5 	.word	0x080029a5
 8002884:	080029a5 	.word	0x080029a5
 8002888:	080029a5 	.word	0x080029a5
 800288c:	08002923 	.word	0x08002923
 8002890:	080029a5 	.word	0x080029a5
 8002894:	080029a5 	.word	0x080029a5
 8002898:	080029a5 	.word	0x080029a5
 800289c:	08002963 	.word	0x08002963
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f9d6 	bl	8002c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0208 	orr.w	r2, r2, #8
 80028ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0204 	bic.w	r2, r2, #4
 80028ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6999      	ldr	r1, [r3, #24]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	619a      	str	r2, [r3, #24]
      break;
 80028de:	e064      	b.n	80029aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 fa1c 	bl	8002d24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6999      	ldr	r1, [r3, #24]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	021a      	lsls	r2, r3, #8
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	619a      	str	r2, [r3, #24]
      break;
 8002920:	e043      	b.n	80029aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fa65 	bl	8002df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69da      	ldr	r2, [r3, #28]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0208 	orr.w	r2, r2, #8
 800293c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0204 	bic.w	r2, r2, #4
 800294c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	69d9      	ldr	r1, [r3, #28]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	61da      	str	r2, [r3, #28]
      break;
 8002960:	e023      	b.n	80029aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	4618      	mov	r0, r3
 800296a:	f000 faaf 	bl	8002ecc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69da      	ldr	r2, [r3, #28]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800297c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	69da      	ldr	r2, [r3, #28]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800298c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69d9      	ldr	r1, [r3, #28]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	021a      	lsls	r2, r3, #8
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	61da      	str	r2, [r3, #28]
      break;
 80029a2:	e002      	b.n	80029aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	75fb      	strb	r3, [r7, #23]
      break;
 80029a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_TIM_ConfigClockSource+0x1c>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e0b4      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x186>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a10:	d03e      	beq.n	8002a90 <HAL_TIM_ConfigClockSource+0xd4>
 8002a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a16:	f200 8087 	bhi.w	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1e:	f000 8086 	beq.w	8002b2e <HAL_TIM_ConfigClockSource+0x172>
 8002a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a26:	d87f      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a28:	2b70      	cmp	r3, #112	; 0x70
 8002a2a:	d01a      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0xa6>
 8002a2c:	2b70      	cmp	r3, #112	; 0x70
 8002a2e:	d87b      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a30:	2b60      	cmp	r3, #96	; 0x60
 8002a32:	d050      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0x11a>
 8002a34:	2b60      	cmp	r3, #96	; 0x60
 8002a36:	d877      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a38:	2b50      	cmp	r3, #80	; 0x50
 8002a3a:	d03c      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0xfa>
 8002a3c:	2b50      	cmp	r3, #80	; 0x50
 8002a3e:	d873      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a40:	2b40      	cmp	r3, #64	; 0x40
 8002a42:	d058      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x13a>
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d86f      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a48:	2b30      	cmp	r3, #48	; 0x30
 8002a4a:	d064      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x15a>
 8002a4c:	2b30      	cmp	r3, #48	; 0x30
 8002a4e:	d86b      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d060      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x15a>
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d867      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d05c      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x15a>
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d05a      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x15a>
 8002a60:	e062      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6899      	ldr	r1, [r3, #8]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f000 faf0 	bl	8003056 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	609a      	str	r2, [r3, #8]
      break;
 8002a8e:	e04f      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	6899      	ldr	r1, [r3, #8]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f000 fad9 	bl	8003056 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ab2:	609a      	str	r2, [r3, #8]
      break;
 8002ab4:	e03c      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6859      	ldr	r1, [r3, #4]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f000 fa50 	bl	8002f68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2150      	movs	r1, #80	; 0x50
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 faa7 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 8002ad4:	e02c      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f000 fa6e 	bl	8002fc4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2160      	movs	r1, #96	; 0x60
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fa97 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 8002af4:	e01c      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f000 fa30 	bl	8002f68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2140      	movs	r1, #64	; 0x40
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fa87 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 8002b14:	e00c      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4610      	mov	r0, r2
 8002b22:	f000 fa7e 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 8002b26:	e003      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2c:	e000      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
	...

08002b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a29      	ldr	r2, [pc, #164]	; (8002c4c <TIM_Base_SetConfig+0xb8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00b      	beq.n	8002bc4 <TIM_Base_SetConfig+0x30>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb2:	d007      	beq.n	8002bc4 <TIM_Base_SetConfig+0x30>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a26      	ldr	r2, [pc, #152]	; (8002c50 <TIM_Base_SetConfig+0xbc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d003      	beq.n	8002bc4 <TIM_Base_SetConfig+0x30>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a25      	ldr	r2, [pc, #148]	; (8002c54 <TIM_Base_SetConfig+0xc0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d108      	bne.n	8002bd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <TIM_Base_SetConfig+0xb8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00b      	beq.n	8002bf6 <TIM_Base_SetConfig+0x62>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be4:	d007      	beq.n	8002bf6 <TIM_Base_SetConfig+0x62>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <TIM_Base_SetConfig+0xbc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d003      	beq.n	8002bf6 <TIM_Base_SetConfig+0x62>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <TIM_Base_SetConfig+0xc0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d108      	bne.n	8002c08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <TIM_Base_SetConfig+0xb8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d103      	bne.n	8002c3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	615a      	str	r2, [r3, #20]
}
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800

08002c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f023 0201 	bic.w	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0303 	bic.w	r3, r3, #3
 8002c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f023 0302 	bic.w	r3, r3, #2
 8002ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a1c      	ldr	r2, [pc, #112]	; (8002d20 <TIM_OC1_SetConfig+0xc8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10c      	bne.n	8002cce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f023 0308 	bic.w	r3, r3, #8
 8002cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <TIM_OC1_SetConfig+0xc8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d111      	bne.n	8002cfa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	621a      	str	r2, [r3, #32]
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40012c00 	.word	0x40012c00

08002d24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f023 0210 	bic.w	r2, r3, #16
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f023 0320 	bic.w	r3, r3, #32
 8002d6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a1d      	ldr	r2, [pc, #116]	; (8002df4 <TIM_OC2_SetConfig+0xd0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10d      	bne.n	8002da0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <TIM_OC2_SetConfig+0xd0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d113      	bne.n	8002dd0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	621a      	str	r2, [r3, #32]
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	40012c00 	.word	0x40012c00

08002df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <TIM_OC3_SetConfig+0xd0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d10d      	bne.n	8002e72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <TIM_OC3_SetConfig+0xd0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d113      	bne.n	8002ea2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	621a      	str	r2, [r3, #32]
}
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40012c00 	.word	0x40012c00

08002ecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	031b      	lsls	r3, r3, #12
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a0f      	ldr	r2, [pc, #60]	; (8002f64 <TIM_OC4_SetConfig+0x98>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d109      	bne.n	8002f40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	019b      	lsls	r3, r3, #6
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	621a      	str	r2, [r3, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	40012c00 	.word	0x40012c00

08002f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f023 0201 	bic.w	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f023 030a 	bic.w	r3, r3, #10
 8002fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f023 0210 	bic.w	r2, r3, #16
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	031b      	lsls	r3, r3, #12
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003000:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	621a      	str	r2, [r3, #32]
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003022:	b480      	push	{r7}
 8003024:	b085      	sub	sp, #20
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	f043 0307 	orr.w	r3, r3, #7
 8003044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	609a      	str	r2, [r3, #8]
}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003056:	b480      	push	{r7}
 8003058:	b087      	sub	sp, #28
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003070:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	021a      	lsls	r2, r3, #8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	431a      	orrs	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4313      	orrs	r3, r2
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	609a      	str	r2, [r3, #8]
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	2201      	movs	r2, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1a      	ldr	r2, [r3, #32]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1a      	ldr	r2, [r3, #32]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	431a      	orrs	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e046      	b.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a16      	ldr	r2, [pc, #88]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00e      	beq.n	8003156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003140:	d009      	beq.n	8003156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a12      	ldr	r2, [pc, #72]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d004      	beq.n	8003156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a10      	ldr	r2, [pc, #64]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d10c      	bne.n	8003170 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800315c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	4313      	orrs	r3, r2
 8003166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800

08003198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <__libc_init_array>:
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	2600      	movs	r6, #0
 80031c0:	4d0c      	ldr	r5, [pc, #48]	; (80031f4 <__libc_init_array+0x38>)
 80031c2:	4c0d      	ldr	r4, [pc, #52]	; (80031f8 <__libc_init_array+0x3c>)
 80031c4:	1b64      	subs	r4, r4, r5
 80031c6:	10a4      	asrs	r4, r4, #2
 80031c8:	42a6      	cmp	r6, r4
 80031ca:	d109      	bne.n	80031e0 <__libc_init_array+0x24>
 80031cc:	f000 f822 	bl	8003214 <_init>
 80031d0:	2600      	movs	r6, #0
 80031d2:	4d0a      	ldr	r5, [pc, #40]	; (80031fc <__libc_init_array+0x40>)
 80031d4:	4c0a      	ldr	r4, [pc, #40]	; (8003200 <__libc_init_array+0x44>)
 80031d6:	1b64      	subs	r4, r4, r5
 80031d8:	10a4      	asrs	r4, r4, #2
 80031da:	42a6      	cmp	r6, r4
 80031dc:	d105      	bne.n	80031ea <__libc_init_array+0x2e>
 80031de:	bd70      	pop	{r4, r5, r6, pc}
 80031e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e4:	4798      	blx	r3
 80031e6:	3601      	adds	r6, #1
 80031e8:	e7ee      	b.n	80031c8 <__libc_init_array+0xc>
 80031ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ee:	4798      	blx	r3
 80031f0:	3601      	adds	r6, #1
 80031f2:	e7f2      	b.n	80031da <__libc_init_array+0x1e>
 80031f4:	08003250 	.word	0x08003250
 80031f8:	08003250 	.word	0x08003250
 80031fc:	08003250 	.word	0x08003250
 8003200:	08003254 	.word	0x08003254

08003204 <memset>:
 8003204:	4603      	mov	r3, r0
 8003206:	4402      	add	r2, r0
 8003208:	4293      	cmp	r3, r2
 800320a:	d100      	bne.n	800320e <memset+0xa>
 800320c:	4770      	bx	lr
 800320e:	f803 1b01 	strb.w	r1, [r3], #1
 8003212:	e7f9      	b.n	8003208 <memset+0x4>

08003214 <_init>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	bf00      	nop
 8003218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	469e      	mov	lr, r3
 800321e:	4770      	bx	lr

08003220 <_fini>:
 8003220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003222:	bf00      	nop
 8003224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003226:	bc08      	pop	{r3}
 8003228:	469e      	mov	lr, r3
 800322a:	4770      	bx	lr
