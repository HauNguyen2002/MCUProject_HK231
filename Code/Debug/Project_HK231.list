
Project_HK231.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dec  08003dec  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08003dec  08003dec  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dec  08003dec  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dec  08003dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08003df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000034  08003e28  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003e28  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2e5  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002586  00000000  00000000  0002f342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000318c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00032628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002223  00000000  00000000  00033278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101b2  00000000  00000000  0003549b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ed9  00000000  00000000  0004564d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc526  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000359c  00000000  00000000  000cc57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08003da8 	.word	0x08003da8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08003da8 	.word	0x08003da8

0800014c <auto_fsm>:




uint8_t mode=AUTO_M;
void auto_fsm(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (autolightstate) {
 8000150:	4b67      	ldr	r3, [pc, #412]	; (80002f0 <auto_fsm+0x1a4>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b05      	cmp	r3, #5
 8000156:	f200 80c8 	bhi.w	80002ea <auto_fsm+0x19e>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <auto_fsm+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000179 	.word	0x08000179
 8000164:	0800019d 	.word	0x0800019d
 8000168:	080001af 	.word	0x080001af
 800016c:	080001f7 	.word	0x080001f7
 8000170:	08000245 	.word	0x08000245
 8000174:	0800028b 	.word	0x0800028b
	case INIT:
		if(FLAG_AUTO==1){
 8000178:	4b5e      	ldr	r3, [pc, #376]	; (80002f4 <auto_fsm+0x1a8>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d10d      	bne.n	800019c <auto_fsm+0x50>
			autoLightHandler();
 8000180:	f000 f8c2 	bl	8000308 <autoLightHandler>
			lightdisplay[0]=lightDuration[0];
 8000184:	4b5c      	ldr	r3, [pc, #368]	; (80002f8 <auto_fsm+0x1ac>)
 8000186:	781a      	ldrb	r2, [r3, #0]
 8000188:	4b5c      	ldr	r3, [pc, #368]	; (80002fc <auto_fsm+0x1b0>)
 800018a:	701a      	strb	r2, [r3, #0]
			lightdisplay[1]=lightDuration[2];
 800018c:	4b5a      	ldr	r3, [pc, #360]	; (80002f8 <auto_fsm+0x1ac>)
 800018e:	789a      	ldrb	r2, [r3, #2]
 8000190:	4b5a      	ldr	r3, [pc, #360]	; (80002fc <auto_fsm+0x1b0>)
 8000192:	705a      	strb	r2, [r3, #1]
			autolightstate=RG;
 8000194:	4b56      	ldr	r3, [pc, #344]	; (80002f0 <auto_fsm+0x1a4>)
 8000196:	2202      	movs	r2, #2
 8000198:	701a      	strb	r2, [r3, #0]
			break;
 800019a:	e0a6      	b.n	80002ea <auto_fsm+0x19e>
		}
	case HOLD:
		if(mode==AUTO_M){
 800019c:	4b58      	ldr	r3, [pc, #352]	; (8000300 <auto_fsm+0x1b4>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	f040 8099 	bne.w	80002d8 <auto_fsm+0x18c>
			autolightstate=INIT;
 80001a6:	4b52      	ldr	r3, [pc, #328]	; (80002f0 <auto_fsm+0x1a4>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	701a      	strb	r2, [r3, #0]
		}
		break;
 80001ac:	e094      	b.n	80002d8 <auto_fsm+0x18c>
	case RG:
		if(FLAG_BUT_CD==1){
 80001ae:	4b51      	ldr	r3, [pc, #324]	; (80002f4 <auto_fsm+0x1a8>)
 80001b0:	789b      	ldrb	r3, [r3, #2]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d104      	bne.n	80001c0 <auto_fsm+0x74>
//			FLAG_BUT_CD=0;
			autoButtonHandler();
 80001b6:	f000 f951 	bl	800045c <autoButtonHandler>
			setButtonCooldownTimer(100);
 80001ba:	2064      	movs	r0, #100	; 0x64
 80001bc:	f000 fdc4 	bl	8000d48 <setButtonCooldownTimer>
		}
		if(FLAG_AUTO==1){
 80001c0:	4b4c      	ldr	r3, [pc, #304]	; (80002f4 <auto_fsm+0x1a8>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	f040 8089 	bne.w	80002dc <auto_fsm+0x190>
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80001ca:	2120      	movs	r1, #32
 80001cc:	484d      	ldr	r0, [pc, #308]	; (8000304 <auto_fsm+0x1b8>)
 80001ce:	f001 fd00 	bl	8001bd2 <HAL_GPIO_TogglePin>
//			FLAG_AUTO=0;
			if(lightdisplay[1]==0){
 80001d2:	4b4a      	ldr	r3, [pc, #296]	; (80002fc <auto_fsm+0x1b0>)
 80001d4:	785b      	ldrb	r3, [r3, #1]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d106      	bne.n	80001e8 <auto_fsm+0x9c>
				lightdisplay[1]=lightDuration[1];
 80001da:	4b47      	ldr	r3, [pc, #284]	; (80002f8 <auto_fsm+0x1ac>)
 80001dc:	785a      	ldrb	r2, [r3, #1]
 80001de:	4b47      	ldr	r3, [pc, #284]	; (80002fc <auto_fsm+0x1b0>)
 80001e0:	705a      	strb	r2, [r3, #1]
				autolightstate=RY;
 80001e2:	4b43      	ldr	r3, [pc, #268]	; (80002f0 <auto_fsm+0x1a4>)
 80001e4:	2203      	movs	r2, #3
 80001e6:	701a      	strb	r2, [r3, #0]
			}
			autoLightHandler();
 80001e8:	f000 f88e 	bl	8000308 <autoLightHandler>
			setAutoLightTimer(1000);
 80001ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f0:	f000 fd82 	bl	8000cf8 <setAutoLightTimer>
		}
		break;
 80001f4:	e072      	b.n	80002dc <auto_fsm+0x190>
	case RY:
		if(FLAG_BUT_CD==1){
 80001f6:	4b3f      	ldr	r3, [pc, #252]	; (80002f4 <auto_fsm+0x1a8>)
 80001f8:	789b      	ldrb	r3, [r3, #2]
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d104      	bne.n	8000208 <auto_fsm+0xbc>
//			FLAG_BUT_CD=0;
			autoButtonHandler();
 80001fe:	f000 f92d 	bl	800045c <autoButtonHandler>
			setButtonCooldownTimer(100);
 8000202:	2064      	movs	r0, #100	; 0x64
 8000204:	f000 fda0 	bl	8000d48 <setButtonCooldownTimer>
		}
		if(FLAG_AUTO==1){
 8000208:	4b3a      	ldr	r3, [pc, #232]	; (80002f4 <auto_fsm+0x1a8>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	2b01      	cmp	r3, #1
 800020e:	d167      	bne.n	80002e0 <auto_fsm+0x194>
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000210:	2120      	movs	r1, #32
 8000212:	483c      	ldr	r0, [pc, #240]	; (8000304 <auto_fsm+0x1b8>)
 8000214:	f001 fcdd 	bl	8001bd2 <HAL_GPIO_TogglePin>
//			FLAG_AUTO=0;
			if(lightdisplay[1]==0){
 8000218:	4b38      	ldr	r3, [pc, #224]	; (80002fc <auto_fsm+0x1b0>)
 800021a:	785b      	ldrb	r3, [r3, #1]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d10a      	bne.n	8000236 <auto_fsm+0xea>
				lightdisplay[0]=lightDuration[2];
 8000220:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <auto_fsm+0x1ac>)
 8000222:	789a      	ldrb	r2, [r3, #2]
 8000224:	4b35      	ldr	r3, [pc, #212]	; (80002fc <auto_fsm+0x1b0>)
 8000226:	701a      	strb	r2, [r3, #0]
				lightdisplay[1]=lightDuration[0];
 8000228:	4b33      	ldr	r3, [pc, #204]	; (80002f8 <auto_fsm+0x1ac>)
 800022a:	781a      	ldrb	r2, [r3, #0]
 800022c:	4b33      	ldr	r3, [pc, #204]	; (80002fc <auto_fsm+0x1b0>)
 800022e:	705a      	strb	r2, [r3, #1]
				autolightstate=GR;
 8000230:	4b2f      	ldr	r3, [pc, #188]	; (80002f0 <auto_fsm+0x1a4>)
 8000232:	2204      	movs	r2, #4
 8000234:	701a      	strb	r2, [r3, #0]
			}
			autoLightHandler();
 8000236:	f000 f867 	bl	8000308 <autoLightHandler>
			setAutoLightTimer(1000);
 800023a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023e:	f000 fd5b 	bl	8000cf8 <setAutoLightTimer>
		}
		break;
 8000242:	e04d      	b.n	80002e0 <auto_fsm+0x194>
	case GR:
		if(FLAG_BUT_CD==1){
 8000244:	4b2b      	ldr	r3, [pc, #172]	; (80002f4 <auto_fsm+0x1a8>)
 8000246:	789b      	ldrb	r3, [r3, #2]
 8000248:	2b01      	cmp	r3, #1
 800024a:	d104      	bne.n	8000256 <auto_fsm+0x10a>
//			FLAG_BUT_CD=0;
			autoButtonHandler();
 800024c:	f000 f906 	bl	800045c <autoButtonHandler>
			setButtonCooldownTimer(100);
 8000250:	2064      	movs	r0, #100	; 0x64
 8000252:	f000 fd79 	bl	8000d48 <setButtonCooldownTimer>
		}
		if(FLAG_AUTO==1){
 8000256:	4b27      	ldr	r3, [pc, #156]	; (80002f4 <auto_fsm+0x1a8>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b01      	cmp	r3, #1
 800025c:	d142      	bne.n	80002e4 <auto_fsm+0x198>
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800025e:	2120      	movs	r1, #32
 8000260:	4828      	ldr	r0, [pc, #160]	; (8000304 <auto_fsm+0x1b8>)
 8000262:	f001 fcb6 	bl	8001bd2 <HAL_GPIO_TogglePin>
//			FLAG_AUTO=0;
			if(lightdisplay[0]==0){
 8000266:	4b25      	ldr	r3, [pc, #148]	; (80002fc <auto_fsm+0x1b0>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d106      	bne.n	800027c <auto_fsm+0x130>
				lightdisplay[0]=lightDuration[1];
 800026e:	4b22      	ldr	r3, [pc, #136]	; (80002f8 <auto_fsm+0x1ac>)
 8000270:	785a      	ldrb	r2, [r3, #1]
 8000272:	4b22      	ldr	r3, [pc, #136]	; (80002fc <auto_fsm+0x1b0>)
 8000274:	701a      	strb	r2, [r3, #0]
				autolightstate=YR;
 8000276:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <auto_fsm+0x1a4>)
 8000278:	2205      	movs	r2, #5
 800027a:	701a      	strb	r2, [r3, #0]
			}
			autoLightHandler();
 800027c:	f000 f844 	bl	8000308 <autoLightHandler>
			setAutoLightTimer(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f000 fd38 	bl	8000cf8 <setAutoLightTimer>
		}
		break;
 8000288:	e02c      	b.n	80002e4 <auto_fsm+0x198>
	case YR:
		if(FLAG_BUT_CD==1){
 800028a:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <auto_fsm+0x1a8>)
 800028c:	789b      	ldrb	r3, [r3, #2]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d104      	bne.n	800029c <auto_fsm+0x150>
//			FLAG_BUT_CD=0;
			autoButtonHandler();
 8000292:	f000 f8e3 	bl	800045c <autoButtonHandler>
			setButtonCooldownTimer(100);
 8000296:	2064      	movs	r0, #100	; 0x64
 8000298:	f000 fd56 	bl	8000d48 <setButtonCooldownTimer>
		}
		if(FLAG_AUTO==1){
 800029c:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <auto_fsm+0x1a8>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d121      	bne.n	80002e8 <auto_fsm+0x19c>
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80002a4:	2120      	movs	r1, #32
 80002a6:	4817      	ldr	r0, [pc, #92]	; (8000304 <auto_fsm+0x1b8>)
 80002a8:	f001 fc93 	bl	8001bd2 <HAL_GPIO_TogglePin>
//			FLAG_AUTO=0;
			if(lightdisplay[0]==0){
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <auto_fsm+0x1b0>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d10a      	bne.n	80002ca <auto_fsm+0x17e>
				lightdisplay[0]=lightDuration[0];
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <auto_fsm+0x1ac>)
 80002b6:	781a      	ldrb	r2, [r3, #0]
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <auto_fsm+0x1b0>)
 80002ba:	701a      	strb	r2, [r3, #0]
				lightdisplay[1]=lightDuration[2];
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <auto_fsm+0x1ac>)
 80002be:	789a      	ldrb	r2, [r3, #2]
 80002c0:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <auto_fsm+0x1b0>)
 80002c2:	705a      	strb	r2, [r3, #1]
				autolightstate=RG;
 80002c4:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <auto_fsm+0x1a4>)
 80002c6:	2202      	movs	r2, #2
 80002c8:	701a      	strb	r2, [r3, #0]
			}
			autoLightHandler();
 80002ca:	f000 f81d 	bl	8000308 <autoLightHandler>
			setAutoLightTimer(1000);
 80002ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d2:	f000 fd11 	bl	8000cf8 <setAutoLightTimer>
		}
		break;
 80002d6:	e007      	b.n	80002e8 <auto_fsm+0x19c>
		break;
 80002d8:	bf00      	nop
 80002da:	e006      	b.n	80002ea <auto_fsm+0x19e>
		break;
 80002dc:	bf00      	nop
 80002de:	e004      	b.n	80002ea <auto_fsm+0x19e>
		break;
 80002e0:	bf00      	nop
 80002e2:	e002      	b.n	80002ea <auto_fsm+0x19e>
		break;
 80002e4:	bf00      	nop
 80002e6:	e000      	b.n	80002ea <auto_fsm+0x19e>
		break;
 80002e8:	bf00      	nop
	}
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000072 	.word	0x20000072
 80002f4:	20000150 	.word	0x20000150
 80002f8:	20000020 	.word	0x20000020
 80002fc:	20000070 	.word	0x20000070
 8000300:	20000050 	.word	0x20000050
 8000304:	40010800 	.word	0x40010800

08000308 <autoLightHandler>:
void autoLightHandler(){
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	switch (autolightstate) {
 800030c:	4b4f      	ldr	r3, [pc, #316]	; (800044c <autoLightHandler+0x144>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b05      	cmp	r3, #5
 8000312:	f200 8099 	bhi.w	8000448 <autoLightHandler+0x140>
 8000316:	a201      	add	r2, pc, #4	; (adr r2, 800031c <autoLightHandler+0x14>)
 8000318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031c:	08000335 	.word	0x08000335
 8000320:	08000447 	.word	0x08000447
 8000324:	08000361 	.word	0x08000361
 8000328:	080003a5 	.word	0x080003a5
 800032c:	080003d3 	.word	0x080003d3
 8000330:	08000417 	.word	0x08000417
	case INIT:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000334:	2201      	movs	r2, #1
 8000336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800033a:	4845      	ldr	r0, [pc, #276]	; (8000450 <autoLightHandler+0x148>)
 800033c:	f001 fc31 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000340:	2200      	movs	r2, #0
 8000342:	2108      	movs	r1, #8
 8000344:	4843      	ldr	r0, [pc, #268]	; (8000454 <autoLightHandler+0x14c>)
 8000346:	f001 fc2c 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 800034a:	2200      	movs	r2, #0
 800034c:	2120      	movs	r1, #32
 800034e:	4841      	ldr	r0, [pc, #260]	; (8000454 <autoLightHandler+0x14c>)
 8000350:	f001 fc27 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000354:	2201      	movs	r2, #1
 8000356:	2110      	movs	r1, #16
 8000358:	483e      	ldr	r0, [pc, #248]	; (8000454 <autoLightHandler+0x14c>)
 800035a:	f001 fc22 	bl	8001ba2 <HAL_GPIO_WritePin>
		break;
 800035e:	e073      	b.n	8000448 <autoLightHandler+0x140>
	case HOLD:
		break;
	case RG:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000360:	2201      	movs	r2, #1
 8000362:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000366:	483a      	ldr	r0, [pc, #232]	; (8000450 <autoLightHandler+0x148>)
 8000368:	f001 fc1b 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2108      	movs	r1, #8
 8000370:	4838      	ldr	r0, [pc, #224]	; (8000454 <autoLightHandler+0x14c>)
 8000372:	f001 fc16 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2120      	movs	r1, #32
 800037a:	4836      	ldr	r0, [pc, #216]	; (8000454 <autoLightHandler+0x14c>)
 800037c:	f001 fc11 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000380:	2201      	movs	r2, #1
 8000382:	2110      	movs	r1, #16
 8000384:	4833      	ldr	r0, [pc, #204]	; (8000454 <autoLightHandler+0x14c>)
 8000386:	f001 fc0c 	bl	8001ba2 <HAL_GPIO_WritePin>
		lightdisplay[0]--;
 800038a:	4b33      	ldr	r3, [pc, #204]	; (8000458 <autoLightHandler+0x150>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	3b01      	subs	r3, #1
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4b31      	ldr	r3, [pc, #196]	; (8000458 <autoLightHandler+0x150>)
 8000394:	701a      	strb	r2, [r3, #0]
		lightdisplay[1]--;
 8000396:	4b30      	ldr	r3, [pc, #192]	; (8000458 <autoLightHandler+0x150>)
 8000398:	785b      	ldrb	r3, [r3, #1]
 800039a:	3b01      	subs	r3, #1
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b2e      	ldr	r3, [pc, #184]	; (8000458 <autoLightHandler+0x150>)
 80003a0:	705a      	strb	r2, [r3, #1]
		break;
 80003a2:	e051      	b.n	8000448 <autoLightHandler+0x140>
	case RY:
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2120      	movs	r1, #32
 80003a8:	482a      	ldr	r0, [pc, #168]	; (8000454 <autoLightHandler+0x14c>)
 80003aa:	f001 fbfa 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 80003ae:	2201      	movs	r2, #1
 80003b0:	2110      	movs	r1, #16
 80003b2:	4828      	ldr	r0, [pc, #160]	; (8000454 <autoLightHandler+0x14c>)
 80003b4:	f001 fbf5 	bl	8001ba2 <HAL_GPIO_WritePin>
		lightdisplay[0]--;
 80003b8:	4b27      	ldr	r3, [pc, #156]	; (8000458 <autoLightHandler+0x150>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	3b01      	subs	r3, #1
 80003be:	b2da      	uxtb	r2, r3
 80003c0:	4b25      	ldr	r3, [pc, #148]	; (8000458 <autoLightHandler+0x150>)
 80003c2:	701a      	strb	r2, [r3, #0]
		lightdisplay[1]--;
 80003c4:	4b24      	ldr	r3, [pc, #144]	; (8000458 <autoLightHandler+0x150>)
 80003c6:	785b      	ldrb	r3, [r3, #1]
 80003c8:	3b01      	subs	r3, #1
 80003ca:	b2da      	uxtb	r2, r3
 80003cc:	4b22      	ldr	r3, [pc, #136]	; (8000458 <autoLightHandler+0x150>)
 80003ce:	705a      	strb	r2, [r3, #1]
		break;
 80003d0:	e03a      	b.n	8000448 <autoLightHandler+0x140>
	case GR:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d8:	481d      	ldr	r0, [pc, #116]	; (8000450 <autoLightHandler+0x148>)
 80003da:	f001 fbe2 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80003de:	2201      	movs	r2, #1
 80003e0:	2108      	movs	r1, #8
 80003e2:	481c      	ldr	r0, [pc, #112]	; (8000454 <autoLightHandler+0x14c>)
 80003e4:	f001 fbdd 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2120      	movs	r1, #32
 80003ec:	4819      	ldr	r0, [pc, #100]	; (8000454 <autoLightHandler+0x14c>)
 80003ee:	f001 fbd8 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2110      	movs	r1, #16
 80003f6:	4817      	ldr	r0, [pc, #92]	; (8000454 <autoLightHandler+0x14c>)
 80003f8:	f001 fbd3 	bl	8001ba2 <HAL_GPIO_WritePin>
		lightdisplay[0]--;
 80003fc:	4b16      	ldr	r3, [pc, #88]	; (8000458 <autoLightHandler+0x150>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	3b01      	subs	r3, #1
 8000402:	b2da      	uxtb	r2, r3
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <autoLightHandler+0x150>)
 8000406:	701a      	strb	r2, [r3, #0]
		lightdisplay[1]--;
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <autoLightHandler+0x150>)
 800040a:	785b      	ldrb	r3, [r3, #1]
 800040c:	3b01      	subs	r3, #1
 800040e:	b2da      	uxtb	r2, r3
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <autoLightHandler+0x150>)
 8000412:	705a      	strb	r2, [r3, #1]
		break;
 8000414:	e018      	b.n	8000448 <autoLightHandler+0x140>
	case YR:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041c:	480c      	ldr	r0, [pc, #48]	; (8000450 <autoLightHandler+0x148>)
 800041e:	f001 fbc0 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000422:	2201      	movs	r2, #1
 8000424:	2108      	movs	r1, #8
 8000426:	480b      	ldr	r0, [pc, #44]	; (8000454 <autoLightHandler+0x14c>)
 8000428:	f001 fbbb 	bl	8001ba2 <HAL_GPIO_WritePin>
		lightdisplay[0]--;
 800042c:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <autoLightHandler+0x150>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	3b01      	subs	r3, #1
 8000432:	b2da      	uxtb	r2, r3
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <autoLightHandler+0x150>)
 8000436:	701a      	strb	r2, [r3, #0]
		lightdisplay[1]--;
 8000438:	4b07      	ldr	r3, [pc, #28]	; (8000458 <autoLightHandler+0x150>)
 800043a:	785b      	ldrb	r3, [r3, #1]
 800043c:	3b01      	subs	r3, #1
 800043e:	b2da      	uxtb	r2, r3
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <autoLightHandler+0x150>)
 8000442:	705a      	strb	r2, [r3, #1]
		break;
 8000444:	e000      	b.n	8000448 <autoLightHandler+0x140>
		break;
 8000446:	bf00      	nop
	}
}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000072 	.word	0x20000072
 8000450:	40010800 	.word	0x40010800
 8000454:	40010c00 	.word	0x40010c00
 8000458:	20000070 	.word	0x20000070

0800045c <autoButtonHandler>:
void autoButtonHandler(){
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	if(is_button_pressed(0)){
 8000460:	2000      	movs	r0, #0
 8000462:	f000 f8ab 	bl	80005bc <is_button_pressed>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d003      	beq.n	8000474 <autoButtonHandler+0x18>
		flag_mode_press=1;
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <autoButtonHandler+0x7c>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
 8000472:	e012      	b.n	800049a <autoButtonHandler+0x3e>
	}
	else if(!is_button_pressed(0) && flag_mode_press==1){
 8000474:	2000      	movs	r0, #0
 8000476:	f000 f8a1 	bl	80005bc <is_button_pressed>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d10c      	bne.n	800049a <autoButtonHandler+0x3e>
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <autoButtonHandler+0x7c>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d108      	bne.n	800049a <autoButtonHandler+0x3e>
		flag_mode_press=0;
 8000488:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <autoButtonHandler+0x7c>)
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]
		mode=TUNING_M;
 800048e:	4b13      	ldr	r3, [pc, #76]	; (80004dc <autoButtonHandler+0x80>)
 8000490:	2201      	movs	r2, #1
 8000492:	701a      	strb	r2, [r3, #0]
		autolightstate=HOLD;
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <autoButtonHandler+0x84>)
 8000496:	2201      	movs	r2, #1
 8000498:	701a      	strb	r2, [r3, #0]
	}
	if(is_button_pressed(1)){
 800049a:	2001      	movs	r0, #1
 800049c:	f000 f88e 	bl	80005bc <is_button_pressed>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d003      	beq.n	80004ae <autoButtonHandler+0x52>
		flag_man_press=1;
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <autoButtonHandler+0x88>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	701a      	strb	r2, [r3, #0]
	else if (!is_button_pressed(1) && flag_man_press==1){
		flag_man_press=0;
		mode=MANUAL_M;
		autolightstate=HOLD;
	}
}
 80004ac:	e012      	b.n	80004d4 <autoButtonHandler+0x78>
	else if (!is_button_pressed(1) && flag_man_press==1){
 80004ae:	2001      	movs	r0, #1
 80004b0:	f000 f884 	bl	80005bc <is_button_pressed>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d10c      	bne.n	80004d4 <autoButtonHandler+0x78>
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <autoButtonHandler+0x88>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d108      	bne.n	80004d4 <autoButtonHandler+0x78>
		flag_man_press=0;
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <autoButtonHandler+0x88>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
		mode=MANUAL_M;
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <autoButtonHandler+0x80>)
 80004ca:	2202      	movs	r2, #2
 80004cc:	701a      	strb	r2, [r3, #0]
		autolightstate=HOLD;
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <autoButtonHandler+0x84>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	701a      	strb	r2, [r3, #0]
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	2000006c 	.word	0x2000006c
 80004dc:	20000050 	.word	0x20000050
 80004e0:	20000072 	.word	0x20000072
 80004e4:	20000075 	.word	0x20000075

080004e8 <button_reading>:
static uint8_t flagForButtonPress1s [ NO_OF_BUTTONS ];

static uint16_t counterForButtonPress1s [ NO_OF_BUTTONS ];


void button_reading(void){
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
	for(char i=0;i< NO_OF_BUTTONS;i++){
 80004ee:	2300      	movs	r3, #0
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	e04c      	b.n	800058e <button_reading+0xa6>
		debounceButtonBuffer2[i]=debounceButtonBuffer1[i];
 80004f4:	79fa      	ldrb	r2, [r7, #7]
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	4929      	ldr	r1, [pc, #164]	; (80005a0 <button_reading+0xb8>)
 80004fa:	5c89      	ldrb	r1, [r1, r2]
 80004fc:	4a29      	ldr	r2, [pc, #164]	; (80005a4 <button_reading+0xbc>)
 80004fe:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i]= HAL_GPIO_ReadPin(GPIO_Buttons[i], Buttons[i]);
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	4a29      	ldr	r2, [pc, #164]	; (80005a8 <button_reading+0xc0>)
 8000504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000508:	4618      	mov	r0, r3
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	4a27      	ldr	r2, [pc, #156]	; (80005ac <button_reading+0xc4>)
 800050e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000512:	b29b      	uxth	r3, r3
 8000514:	79fc      	ldrb	r4, [r7, #7]
 8000516:	4619      	mov	r1, r3
 8000518:	f001 fb2c 	bl	8001b74 <HAL_GPIO_ReadPin>
 800051c:	4603      	mov	r3, r0
 800051e:	461a      	mov	r2, r3
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <button_reading+0xb8>)
 8000522:	551a      	strb	r2, [r3, r4]
		if(debounceButtonBuffer1[i]==debounceButtonBuffer2[i]) buttonBuffer[i]= debounceButtonBuffer1[i];
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	4a1e      	ldr	r2, [pc, #120]	; (80005a0 <button_reading+0xb8>)
 8000528:	5cd2      	ldrb	r2, [r2, r3]
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	491d      	ldr	r1, [pc, #116]	; (80005a4 <button_reading+0xbc>)
 800052e:	5ccb      	ldrb	r3, [r1, r3]
 8000530:	429a      	cmp	r2, r3
 8000532:	d105      	bne.n	8000540 <button_reading+0x58>
 8000534:	79fa      	ldrb	r2, [r7, #7]
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	4919      	ldr	r1, [pc, #100]	; (80005a0 <button_reading+0xb8>)
 800053a:	5c89      	ldrb	r1, [r1, r2]
 800053c:	4a1c      	ldr	r2, [pc, #112]	; (80005b0 <button_reading+0xc8>)
 800053e:	54d1      	strb	r1, [r2, r3]

		if(buttonBuffer[i]==BUTTON_IS_PRESSED){
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	4a1b      	ldr	r2, [pc, #108]	; (80005b0 <button_reading+0xc8>)
 8000544:	5cd3      	ldrb	r3, [r2, r3]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d115      	bne.n	8000576 <button_reading+0x8e>
			if(counterForButtonPress1s[i]<DURATION_FOR_AUTO_INCREASING){
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4a19      	ldr	r2, [pc, #100]	; (80005b4 <button_reading+0xcc>)
 800054e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000556:	d209      	bcs.n	800056c <button_reading+0x84>
				counterForButtonPress1s[i]++;
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <button_reading+0xcc>)
 800055c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000560:	3201      	adds	r2, #1
 8000562:	b291      	uxth	r1, r2
 8000564:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <button_reading+0xcc>)
 8000566:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800056a:	e00d      	b.n	8000588 <button_reading+0xa0>
				}
			else{
					flagForButtonPress1s[i]=1;
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <button_reading+0xd0>)
 8000570:	2101      	movs	r1, #1
 8000572:	54d1      	strb	r1, [r2, r3]
 8000574:	e008      	b.n	8000588 <button_reading+0xa0>
				}
		}
		else{
			counterForButtonPress1s[i]=0;
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <button_reading+0xcc>)
 800057a:	2100      	movs	r1, #0
 800057c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i]=0;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <button_reading+0xd0>)
 8000584:	2100      	movs	r1, #0
 8000586:	54d1      	strb	r1, [r2, r3]
	for(char i=0;i< NO_OF_BUTTONS;i++){
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	3301      	adds	r3, #1
 800058c:	71fb      	strb	r3, [r7, #7]
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b03      	cmp	r3, #3
 8000592:	d9af      	bls.n	80004f4 <button_reading+0xc>
		}
	}
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000058 	.word	0x20000058
 80005a4:	2000005c 	.word	0x2000005c
 80005a8:	20000010 	.word	0x20000010
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000054 	.word	0x20000054
 80005b4:	20000064 	.word	0x20000064
 80005b8:	20000060 	.word	0x20000060

080005bc <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	if(index>=NO_OF_BUTTONS) return 0;
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b03      	cmp	r3, #3
 80005ca:	d901      	bls.n	80005d0 <is_button_pressed+0x14>
 80005cc:	2300      	movs	r3, #0
 80005ce:	e007      	b.n	80005e0 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4a06      	ldr	r2, [pc, #24]	; (80005ec <is_button_pressed+0x30>)
 80005d4:	5cd3      	ldrb	r3, [r2, r3]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	bf0c      	ite	eq
 80005da:	2301      	moveq	r3, #1
 80005dc:	2300      	movne	r3, #0
 80005de:	b2db      	uxtb	r3, r3
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000054 	.word	0x20000054

080005f0 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	if(index>= NO_OF_BUTTONS) return 0xff;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d901      	bls.n	8000604 <is_button_pressed_1s+0x14>
 8000600:	23ff      	movs	r3, #255	; 0xff
 8000602:	e007      	b.n	8000614 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4a06      	ldr	r2, [pc, #24]	; (8000620 <is_button_pressed_1s+0x30>)
 8000608:	5cd3      	ldrb	r3, [r2, r3]
 800060a:	2b01      	cmp	r3, #1
 800060c:	bf0c      	ite	eq
 800060e:	2301      	moveq	r3, #1
 8000610:	2300      	movne	r3, #0
 8000612:	b2db      	uxtb	r3, r3
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000060 	.word	0x20000060

08000624 <system_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void system_init(){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
//	SCH_Init();
	setAutoLightTimer(100);
 8000628:	2064      	movs	r0, #100	; 0x64
 800062a:	f000 fb65 	bl	8000cf8 <setAutoLightTimer>
	setButtonCooldownTimer(100);
 800062e:	2064      	movs	r0, #100	; 0x64
 8000630:	f000 fb8a 	bl	8000d48 <setButtonCooldownTimer>
	setAutoIncTimer(100);
 8000634:	2064      	movs	r0, #100	; 0x64
 8000636:	f000 fb9b 	bl	8000d70 <setAutoIncTimer>
	setTuningLightTimer(100);
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f000 fb70 	bl	8000d20 <setTuningLightTimer>
	setBuzzerStateTimer(100);
 8000640:	2064      	movs	r0, #100	; 0x64
 8000642:	f000 fba9 	bl	8000d98 <setBuzzerStateTimer>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 feea 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f81e 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f94a 	bl	80008f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800065c:	f000 f85c 	bl	8000718 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000660:	f000 f8a6 	bl	80007b0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000664:	f000 f91a 	bl	800089c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000668:	4808      	ldr	r0, [pc, #32]	; (800068c <main+0x40>)
 800066a:	f001 ff29 	bl	80024c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800066e:	2100      	movs	r1, #0
 8000670:	4807      	ldr	r0, [pc, #28]	; (8000690 <main+0x44>)
 8000672:	f001 ffcf 	bl	8002614 <HAL_TIM_PWM_Start>
  system_init();
 8000676:	f7ff ffd5 	bl	8000624 <system_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  auto_fsm();
 800067a:	f7ff fd67 	bl	800014c <auto_fsm>
	  tuning_fsm();
 800067e:	f000 fd11 	bl	80010a4 <tuning_fsm>
	  manual_fsm();
 8000682:	f000 f9b9 	bl	80009f8 <manual_fsm>
	  pedestrian_fsm();
 8000686:	f000 fadb 	bl	8000c40 <pedestrian_fsm>
	  auto_fsm();
 800068a:	e7f6      	b.n	800067a <main+0x2e>
 800068c:	200000c0 	.word	0x200000c0
 8000690:	20000078 	.word	0x20000078

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b090      	sub	sp, #64	; 0x40
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0318 	add.w	r3, r7, #24
 800069e:	2228      	movs	r2, #40	; 0x28
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fb78 	bl	8003d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ba:	2301      	movs	r3, #1
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006be:	2310      	movs	r3, #16
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006c6:	2300      	movs	r3, #0
 80006c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006ca:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0318 	add.w	r3, r7, #24
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fa95 	bl	8001c04 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006e0:	f000 f985 	bl	80009ee <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fd00 	bl	8002104 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800070a:	f000 f970 	bl	80009ee <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3740      	adds	r7, #64	; 0x40
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	463b      	mov	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000734:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_TIM2_Init+0x94>)
 8000736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_TIM2_Init+0x94>)
 800073e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000742:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_TIM2_Init+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_TIM2_Init+0x94>)
 800074c:	2209      	movs	r2, #9
 800074e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_TIM2_Init+0x94>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_TIM2_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800075c:	4813      	ldr	r0, [pc, #76]	; (80007ac <MX_TIM2_Init+0x94>)
 800075e:	f001 fe5f 	bl	8002420 <HAL_TIM_Base_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000768:	f000 f941 	bl	80009ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000770:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_TIM2_Init+0x94>)
 800077a:	f002 f9b7 	bl	8002aec <HAL_TIM_ConfigClockSource>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 f933 	bl	80009ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_TIM2_Init+0x94>)
 8000796:	f002 fd39 	bl	800320c <HAL_TIMEx_MasterConfigSynchronization>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007a0:	f000 f925 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000c0 	.word	0x200000c0

080007b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08e      	sub	sp, #56	; 0x38
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007e0:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <MX_TIM3_Init+0xe4>)
 80007e2:	4a2d      	ldr	r2, [pc, #180]	; (8000898 <MX_TIM3_Init+0xe8>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <MX_TIM3_Init+0xe4>)
 80007e8:	223f      	movs	r2, #63	; 0x3f
 80007ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b29      	ldr	r3, [pc, #164]	; (8000894 <MX_TIM3_Init+0xe4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <MX_TIM3_Init+0xe4>)
 80007f4:	2209      	movs	r2, #9
 80007f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_TIM3_Init+0xe4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <MX_TIM3_Init+0xe4>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000804:	4823      	ldr	r0, [pc, #140]	; (8000894 <MX_TIM3_Init+0xe4>)
 8000806:	f001 fe0b 	bl	8002420 <HAL_TIM_Base_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000810:	f000 f8ed 	bl	80009ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800081a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800081e:	4619      	mov	r1, r3
 8000820:	481c      	ldr	r0, [pc, #112]	; (8000894 <MX_TIM3_Init+0xe4>)
 8000822:	f002 f963 	bl	8002aec <HAL_TIM_ConfigClockSource>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800082c:	f000 f8df 	bl	80009ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000830:	4818      	ldr	r0, [pc, #96]	; (8000894 <MX_TIM3_Init+0xe4>)
 8000832:	f001 fe97 	bl	8002564 <HAL_TIM_PWM_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800083c:	f000 f8d7 	bl	80009ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4619      	mov	r1, r3
 800084e:	4811      	ldr	r0, [pc, #68]	; (8000894 <MX_TIM3_Init+0xe4>)
 8000850:	f002 fcdc 	bl	800320c <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800085a:	f000 f8c8 	bl	80009ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085e:	2360      	movs	r3, #96	; 0x60
 8000860:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	4807      	ldr	r0, [pc, #28]	; (8000894 <MX_TIM3_Init+0xe4>)
 8000876:	f002 f877 	bl	8002968 <HAL_TIM_PWM_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000880:	f000 f8b5 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000884:	4803      	ldr	r0, [pc, #12]	; (8000894 <MX_TIM3_Init+0xe4>)
 8000886:	f000 fb3d 	bl	8000f04 <HAL_TIM_MspPostInit>

}
 800088a:	bf00      	nop
 800088c:	3738      	adds	r7, #56	; 0x38
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000078 	.word	0x20000078
 8000898:	40000400 	.word	0x40000400

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_USART2_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f002 fd0a 	bl	80032ec <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 f886 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000108 	.word	0x20000108
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <MX_GPIO_Init+0xd0>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a2d      	ldr	r2, [pc, #180]	; (80009c0 <MX_GPIO_Init+0xd0>)
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <MX_GPIO_Init+0xd0>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <MX_GPIO_Init+0xd0>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a27      	ldr	r2, [pc, #156]	; (80009c0 <MX_GPIO_Init+0xd0>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_GPIO_Init+0xd0>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800093a:	4822      	ldr	r0, [pc, #136]	; (80009c4 <MX_GPIO_Init+0xd4>)
 800093c:	f001 f931 	bl	8001ba2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000946:	4820      	ldr	r0, [pc, #128]	; (80009c8 <MX_GPIO_Init+0xd8>)
 8000948:	f001 f92b 	bl	8001ba2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 800094c:	2313      	movs	r3, #19
 800094e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000954:	2301      	movs	r3, #1
 8000956:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	4619      	mov	r1, r3
 800095e:	4819      	ldr	r0, [pc, #100]	; (80009c4 <MX_GPIO_Init+0xd4>)
 8000960:	f000 ff84 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|D7_Pin|D2_Pin;
 8000964:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2302      	movs	r3, #2
 8000974:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	4619      	mov	r1, r3
 800097c:	4811      	ldr	r0, [pc, #68]	; (80009c4 <MX_GPIO_Init+0xd4>)
 800097e:	f000 ff75 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000982:	2301      	movs	r3, #1
 8000984:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098a:	2301      	movs	r3, #1
 800098c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	4619      	mov	r1, r3
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <MX_GPIO_Init+0xd8>)
 8000996:	f000 ff69 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 800099a:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800099e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2302      	movs	r3, #2
 80009aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	4619      	mov	r1, r3
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_GPIO_Init+0xd8>)
 80009b4:	f000 ff5a 	bl	800186c <HAL_GPIO_Init>

}
 80009b8:	bf00      	nop
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010800 	.word	0x40010800
 80009c8:	40010c00 	.word	0x40010c00

080009cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009dc:	d103      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 80009de:	f7ff fd83 	bl	80004e8 <button_reading>
//		SCH_Update();
		timerRun();
 80009e2:	f000 f9ed 	bl	8000dc0 <timerRun>
	}
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f2:	b672      	cpsid	i
}
 80009f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <Error_Handler+0x8>

080009f8 <manual_fsm>:
#include "manual_fsm.h"

enum MANLIGHTSTATE{M_INIT,M_HOLD,M_RG,M_RY,M_GR,M_YR};
enum MANLIGHTSTATE manlightstate=M_HOLD;

void manual_fsm(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	switch(manlightstate){
 80009fc:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <manual_fsm+0xb8>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b05      	cmp	r3, #5
 8000a02:	d852      	bhi.n	8000aaa <manual_fsm+0xb2>
 8000a04:	a201      	add	r2, pc, #4	; (adr r2, 8000a0c <manual_fsm+0x14>)
 8000a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0a:	bf00      	nop
 8000a0c:	08000a25 	.word	0x08000a25
 8000a10:	08000a31 	.word	0x08000a31
 8000a14:	08000a41 	.word	0x08000a41
 8000a18:	08000a57 	.word	0x08000a57
 8000a1c:	08000a6d 	.word	0x08000a6d
 8000a20:	08000a83 	.word	0x08000a83
	case M_INIT:
		manLightHandler();
 8000a24:	f000 f84a 	bl	8000abc <manLightHandler>
		manlightstate=RG;
 8000a28:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <manual_fsm+0xb8>)
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	701a      	strb	r2, [r3, #0]
		break;
 8000a2e:	e03c      	b.n	8000aaa <manual_fsm+0xb2>
	case M_HOLD:
		if(mode==MANUAL_M) manlightstate=INIT;
 8000a30:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <manual_fsm+0xbc>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d12f      	bne.n	8000a98 <manual_fsm+0xa0>
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <manual_fsm+0xb8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
		break;
 8000a3e:	e02b      	b.n	8000a98 <manual_fsm+0xa0>
	case M_RG:
		if(FLAG_BUT_CD==1){
 8000a40:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <manual_fsm+0xc0>)
 8000a42:	789b      	ldrb	r3, [r3, #2]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d129      	bne.n	8000a9c <manual_fsm+0xa4>
			manButtonHandler(RY);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f8af 	bl	8000bac <manButtonHandler>
			setButtonCooldownTimer(100);
 8000a4e:	2064      	movs	r0, #100	; 0x64
 8000a50:	f000 f97a 	bl	8000d48 <setButtonCooldownTimer>
		}
		break;
 8000a54:	e022      	b.n	8000a9c <manual_fsm+0xa4>
	case M_RY:
		if(FLAG_BUT_CD==1){
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <manual_fsm+0xc0>)
 8000a58:	789b      	ldrb	r3, [r3, #2]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d120      	bne.n	8000aa0 <manual_fsm+0xa8>
			manButtonHandler(GR);
 8000a5e:	2004      	movs	r0, #4
 8000a60:	f000 f8a4 	bl	8000bac <manButtonHandler>
			setButtonCooldownTimer(100);
 8000a64:	2064      	movs	r0, #100	; 0x64
 8000a66:	f000 f96f 	bl	8000d48 <setButtonCooldownTimer>
		}
		break;
 8000a6a:	e019      	b.n	8000aa0 <manual_fsm+0xa8>
	case M_GR:
		if(FLAG_BUT_CD==1){
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <manual_fsm+0xc0>)
 8000a6e:	789b      	ldrb	r3, [r3, #2]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d117      	bne.n	8000aa4 <manual_fsm+0xac>
			manButtonHandler(YR);
 8000a74:	2005      	movs	r0, #5
 8000a76:	f000 f899 	bl	8000bac <manButtonHandler>
			setButtonCooldownTimer(100);
 8000a7a:	2064      	movs	r0, #100	; 0x64
 8000a7c:	f000 f964 	bl	8000d48 <setButtonCooldownTimer>
		}
		break;
 8000a80:	e010      	b.n	8000aa4 <manual_fsm+0xac>
	case M_YR:
		if(FLAG_BUT_CD==1){
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <manual_fsm+0xc0>)
 8000a84:	789b      	ldrb	r3, [r3, #2]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d10e      	bne.n	8000aa8 <manual_fsm+0xb0>
			manButtonHandler(RG);
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f000 f88e 	bl	8000bac <manButtonHandler>
			setButtonCooldownTimer(100);
 8000a90:	2064      	movs	r0, #100	; 0x64
 8000a92:	f000 f959 	bl	8000d48 <setButtonCooldownTimer>
		}
		break;
 8000a96:	e007      	b.n	8000aa8 <manual_fsm+0xb0>
		break;
 8000a98:	bf00      	nop
 8000a9a:	e006      	b.n	8000aaa <manual_fsm+0xb2>
		break;
 8000a9c:	bf00      	nop
 8000a9e:	e004      	b.n	8000aaa <manual_fsm+0xb2>
		break;
 8000aa0:	bf00      	nop
 8000aa2:	e002      	b.n	8000aaa <manual_fsm+0xb2>
		break;
 8000aa4:	bf00      	nop
 8000aa6:	e000      	b.n	8000aaa <manual_fsm+0xb2>
		break;
 8000aa8:	bf00      	nop
	}
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000023 	.word	0x20000023
 8000ab4:	20000050 	.word	0x20000050
 8000ab8:	20000150 	.word	0x20000150

08000abc <manLightHandler>:

void manLightHandler(){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	switch(manlightstate){
 8000ac0:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <manLightHandler+0xe4>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b05      	cmp	r3, #5
 8000ac6:	d868      	bhi.n	8000b9a <manLightHandler+0xde>
 8000ac8:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <manLightHandler+0x14>)
 8000aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ace:	bf00      	nop
 8000ad0:	08000ae9 	.word	0x08000ae9
 8000ad4:	08000b99 	.word	0x08000b99
 8000ad8:	08000b15 	.word	0x08000b15
 8000adc:	08000b2b 	.word	0x08000b2b
 8000ae0:	08000b57 	.word	0x08000b57
 8000ae4:	08000b79 	.word	0x08000b79
	case M_INIT:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aee:	482d      	ldr	r0, [pc, #180]	; (8000ba4 <manLightHandler+0xe8>)
 8000af0:	f001 f857 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2108      	movs	r1, #8
 8000af8:	482b      	ldr	r0, [pc, #172]	; (8000ba8 <manLightHandler+0xec>)
 8000afa:	f001 f852 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2120      	movs	r1, #32
 8000b02:	4829      	ldr	r0, [pc, #164]	; (8000ba8 <manLightHandler+0xec>)
 8000b04:	f001 f84d 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	4826      	ldr	r0, [pc, #152]	; (8000ba8 <manLightHandler+0xec>)
 8000b0e:	f001 f848 	bl	8001ba2 <HAL_GPIO_WritePin>
		break;
 8000b12:	e042      	b.n	8000b9a <manLightHandler+0xde>
	case M_HOLD:
		break;
	case M_RG:
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2120      	movs	r1, #32
 8000b18:	4823      	ldr	r0, [pc, #140]	; (8000ba8 <manLightHandler+0xec>)
 8000b1a:	f001 f842 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2110      	movs	r1, #16
 8000b22:	4821      	ldr	r0, [pc, #132]	; (8000ba8 <manLightHandler+0xec>)
 8000b24:	f001 f83d 	bl	8001ba2 <HAL_GPIO_WritePin>
		break;
 8000b28:	e037      	b.n	8000b9a <manLightHandler+0xde>
	case M_RY:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b30:	481c      	ldr	r0, [pc, #112]	; (8000ba4 <manLightHandler+0xe8>)
 8000b32:	f001 f836 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2108      	movs	r1, #8
 8000b3a:	481b      	ldr	r0, [pc, #108]	; (8000ba8 <manLightHandler+0xec>)
 8000b3c:	f001 f831 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2120      	movs	r1, #32
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <manLightHandler+0xec>)
 8000b46:	f001 f82c 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2110      	movs	r1, #16
 8000b4e:	4816      	ldr	r0, [pc, #88]	; (8000ba8 <manLightHandler+0xec>)
 8000b50:	f001 f827 	bl	8001ba2 <HAL_GPIO_WritePin>
		break;
 8000b54:	e021      	b.n	8000b9a <manLightHandler+0xde>
	case M_GR:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5c:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <manLightHandler+0xe8>)
 8000b5e:	f001 f820 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000b62:	2201      	movs	r2, #1
 8000b64:	2108      	movs	r1, #8
 8000b66:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <manLightHandler+0xec>)
 8000b68:	f001 f81b 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2120      	movs	r1, #32
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <manLightHandler+0xec>)
 8000b72:	f001 f816 	bl	8001ba2 <HAL_GPIO_WritePin>
		break;
 8000b76:	e010      	b.n	8000b9a <manLightHandler+0xde>
	case M_YR:
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2108      	movs	r1, #8
 8000b7c:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <manLightHandler+0xec>)
 8000b7e:	f001 f810 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2120      	movs	r1, #32
 8000b86:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <manLightHandler+0xec>)
 8000b88:	f001 f80b 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2110      	movs	r1, #16
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <manLightHandler+0xec>)
 8000b92:	f001 f806 	bl	8001ba2 <HAL_GPIO_WritePin>
		break;
 8000b96:	e000      	b.n	8000b9a <manLightHandler+0xde>
		break;
 8000b98:	bf00      	nop
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000023 	.word	0x20000023
 8000ba4:	40010800 	.word	0x40010800
 8000ba8:	40010c00 	.word	0x40010c00

08000bac <manButtonHandler>:
void manButtonHandler(enum MANLIGHTSTATE nextState){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	if(is_button_pressed(1)){
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff fd00 	bl	80005bc <is_button_pressed>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <manButtonHandler+0x1e>
			flag_man_press=1;
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <manButtonHandler+0x84>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	e011      	b.n	8000bee <manButtonHandler+0x42>
	}
	else if (!is_button_pressed(1) && flag_man_press==1){
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fcf6 	bl	80005bc <is_button_pressed>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10b      	bne.n	8000bee <manButtonHandler+0x42>
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <manButtonHandler+0x84>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d107      	bne.n	8000bee <manButtonHandler+0x42>
		flag_man_press=0;
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <manButtonHandler+0x84>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
		manlightstate=nextState;
 8000be4:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <manButtonHandler+0x88>)
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	7013      	strb	r3, [r2, #0]
		manLightHandler();
 8000bea:	f7ff ff67 	bl	8000abc <manLightHandler>
	}
	if(is_button_pressed(0)){
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff fce4 	bl	80005bc <is_button_pressed>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <manButtonHandler+0x56>
		flag_mode_press=1;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <manButtonHandler+0x8c>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
	else if(!is_button_pressed(0) && flag_mode_press==1){
		flag_mode_press=0;
		mode=AUTO_M;
		manlightstate=HOLD;
	}
}
 8000c00:	e012      	b.n	8000c28 <manButtonHandler+0x7c>
	else if(!is_button_pressed(0) && flag_mode_press==1){
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff fcda 	bl	80005bc <is_button_pressed>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10c      	bne.n	8000c28 <manButtonHandler+0x7c>
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <manButtonHandler+0x8c>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d108      	bne.n	8000c28 <manButtonHandler+0x7c>
		flag_mode_press=0;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <manButtonHandler+0x8c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
		mode=AUTO_M;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <manButtonHandler+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
		manlightstate=HOLD;
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <manButtonHandler+0x88>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000075 	.word	0x20000075
 8000c34:	20000023 	.word	0x20000023
 8000c38:	2000006c 	.word	0x2000006c
 8000c3c:	20000050 	.word	0x20000050

08000c40 <pedestrian_fsm>:



TIM_HandleTypeDef htim3;
uint8_t buzzstate=0;
void pedestrian_fsm(){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	switch(pedstate){
 8000c44:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <pedestrian_fsm+0x48>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <pedestrian_fsm+0x12>
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d00b      	beq.n	8000c68 <pedestrian_fsm+0x28>
			pedButtonHandler(OFF);
			setButtonCooldownTimer(100);
		}
		break;
	}
}
 8000c50:	e018      	b.n	8000c84 <pedestrian_fsm+0x44>
		if(FLAG_BUT_CD==1){
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <pedestrian_fsm+0x4c>)
 8000c54:	789b      	ldrb	r3, [r3, #2]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d111      	bne.n	8000c7e <pedestrian_fsm+0x3e>
			pedButtonHandler(ON);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f000 f818 	bl	8000c90 <pedButtonHandler>
			setButtonCooldownTimer(100);
 8000c60:	2064      	movs	r0, #100	; 0x64
 8000c62:	f000 f871 	bl	8000d48 <setButtonCooldownTimer>
		break;
 8000c66:	e00a      	b.n	8000c7e <pedestrian_fsm+0x3e>
		if(FLAG_BUT_CD==1){
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <pedestrian_fsm+0x4c>)
 8000c6a:	789b      	ldrb	r3, [r3, #2]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d108      	bne.n	8000c82 <pedestrian_fsm+0x42>
			pedButtonHandler(OFF);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 f80d 	bl	8000c90 <pedButtonHandler>
			setButtonCooldownTimer(100);
 8000c76:	2064      	movs	r0, #100	; 0x64
 8000c78:	f000 f866 	bl	8000d48 <setButtonCooldownTimer>
		break;
 8000c7c:	e001      	b.n	8000c82 <pedestrian_fsm+0x42>
		break;
 8000c7e:	bf00      	nop
 8000c80:	e000      	b.n	8000c84 <pedestrian_fsm+0x44>
		break;
 8000c82:	bf00      	nop
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000073 	.word	0x20000073
 8000c8c:	20000150 	.word	0x20000150

08000c90 <pedButtonHandler>:
		}
		break;
	}
}

void pedButtonHandler(enum PEDESTRIANSTATE nextState){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	if(is_button_pressed(3)){
 8000c9a:	2003      	movs	r0, #3
 8000c9c:	f7ff fc8e 	bl	80005bc <is_button_pressed>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <pedButtonHandler+0x1e>
		flag_ped_press=1;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <pedButtonHandler+0x58>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
			autolightstate=INIT;
			FLAG_AUTO=1;
		}
#endif
	}
}
 8000cac:	e018      	b.n	8000ce0 <pedButtonHandler+0x50>
	else if(!is_button_pressed(3) && flag_ped_press==1){
 8000cae:	2003      	movs	r0, #3
 8000cb0:	f7ff fc84 	bl	80005bc <is_button_pressed>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d112      	bne.n	8000ce0 <pedButtonHandler+0x50>
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <pedButtonHandler+0x58>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d10e      	bne.n	8000ce0 <pedButtonHandler+0x50>
		flag_ped_press=0;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <pedButtonHandler+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
		pedstate=nextState;
 8000cc8:	4a08      	ldr	r2, [pc, #32]	; (8000cec <pedButtonHandler+0x5c>)
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	7013      	strb	r3, [r2, #0]
		if(nextState==ON){
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d105      	bne.n	8000ce0 <pedButtonHandler+0x50>
			autolightstate=INIT;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <pedButtonHandler+0x60>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
			FLAG_AUTO=1;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <pedButtonHandler+0x64>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000076 	.word	0x20000076
 8000cec:	20000073 	.word	0x20000073
 8000cf0:	20000072 	.word	0x20000072
 8000cf4:	20000150 	.word	0x20000150

08000cf8 <setAutoLightTimer>:


uint8_t flag[MAX_SOFTWARE_TIMER];
uint32_t counter[MAX_SOFTWARE_TIMER];

void setAutoLightTimer(int duration){
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	flag[0]=0;
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <setAutoLightTimer+0x20>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
	counter[0]=duration/TIMER_CYCLE;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <setAutoLightTimer+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000150 	.word	0x20000150
 8000d1c:	2000015c 	.word	0x2000015c

08000d20 <setTuningLightTimer>:

void setTuningLightTimer(int duration){
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	flag[1]=0;
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <setTuningLightTimer+0x20>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	705a      	strb	r2, [r3, #1]
	counter[1]=duration/TIMER_CYCLE;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <setTuningLightTimer+0x24>)
 8000d32:	6053      	str	r3, [r2, #4]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000150 	.word	0x20000150
 8000d44:	2000015c 	.word	0x2000015c

08000d48 <setButtonCooldownTimer>:

void setButtonCooldownTimer(int duration){
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	flag[2]=0;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <setButtonCooldownTimer+0x20>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	709a      	strb	r2, [r3, #2]
	counter[2]=duration/TIMER_CYCLE;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <setButtonCooldownTimer+0x24>)
 8000d5a:	6093      	str	r3, [r2, #8]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000150 	.word	0x20000150
 8000d6c:	2000015c 	.word	0x2000015c

08000d70 <setAutoIncTimer>:

void setAutoIncTimer(int duration){
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	flag[3]=0;
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <setAutoIncTimer+0x20>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	70da      	strb	r2, [r3, #3]
	counter[3]=duration/TIMER_CYCLE;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <setAutoIncTimer+0x24>)
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000150 	.word	0x20000150
 8000d94:	2000015c 	.word	0x2000015c

08000d98 <setBuzzerStateTimer>:
void setBuzzerStateTimer(int duration){
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	flag[4]=0;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <setBuzzerStateTimer+0x20>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	711a      	strb	r2, [r3, #4]
	counter[4]=duration/TIMER_CYCLE;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <setBuzzerStateTimer+0x24>)
 8000daa:	6113      	str	r3, [r2, #16]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000150 	.word	0x20000150
 8000dbc:	2000015c 	.word	0x2000015c

08000dc0 <timerRun>:

void timerRun(){
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_SOFTWARE_TIMER;i++){
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	e01c      	b.n	8000e06 <timerRun+0x46>
		if(counter[i]>0) counter[i]--;
 8000dcc:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <timerRun+0x58>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d008      	beq.n	8000dea <timerRun+0x2a>
 8000dd8:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <timerRun+0x58>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de0:	1e5a      	subs	r2, r3, #1
 8000de2:	490d      	ldr	r1, [pc, #52]	; (8000e18 <timerRun+0x58>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(counter[i]==0) flag[i]=1;
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <timerRun+0x58>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d104      	bne.n	8000e00 <timerRun+0x40>
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <timerRun+0x5c>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<MAX_SOFTWARE_TIMER;i++){
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3301      	adds	r3, #1
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b09      	cmp	r3, #9
 8000e0a:	dddf      	ble.n	8000dcc <timerRun+0xc>
	}
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	2000015c 	.word	0x2000015c
 8000e1c:	20000150 	.word	0x20000150

08000e20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6193      	str	r3, [r2, #24]
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_MspInit+0x60>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_MspInit+0x60>)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010000 	.word	0x40010000

08000e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e94:	d114      	bne.n	8000ec0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_TIM_Base_MspInit+0x78>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <HAL_TIM_Base_MspInit+0x78>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_TIM_Base_MspInit+0x78>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	201c      	movs	r0, #28
 8000eb4:	f000 fbf1 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eb8:	201c      	movs	r0, #28
 8000eba:	f000 fc0a 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ebe:	e018      	b.n	8000ef2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_TIM_Base_MspInit+0x7c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d113      	bne.n	8000ef2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_TIM_Base_MspInit+0x78>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <HAL_TIM_Base_MspInit+0x78>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	61d3      	str	r3, [r2, #28]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_TIM_Base_MspInit+0x78>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	201d      	movs	r0, #29
 8000ee8:	f000 fbd7 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000eec:	201d      	movs	r0, #29
 8000eee:	f000 fbf0 	bl	80016d2 <HAL_NVIC_EnableIRQ>
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40000400 	.word	0x40000400

08000f04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <HAL_TIM_MspPostInit+0x58>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d117      	bne.n	8000f54 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_TIM_MspPostInit+0x5c>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_TIM_MspPostInit+0x5c>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_TIM_MspPostInit+0x5c>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 8000f3c:	2340      	movs	r3, #64	; 0x40
 8000f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_TIM_MspPostInit+0x60>)
 8000f50:	f000 fc8c 	bl	800186c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40000400 	.word	0x40000400
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010800 	.word	0x40010800

08000f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <HAL_UART_MspInit+0x98>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d137      	bne.n	8000ff8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <HAL_UART_MspInit+0x9c>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	4a1d      	ldr	r2, [pc, #116]	; (8001004 <HAL_UART_MspInit+0x9c>)
 8000f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_UART_MspInit+0x9c>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_UART_MspInit+0x9c>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a17      	ldr	r2, [pc, #92]	; (8001004 <HAL_UART_MspInit+0x9c>)
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_UART_MspInit+0x9c>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480f      	ldr	r0, [pc, #60]	; (8001008 <HAL_UART_MspInit+0xa0>)
 8000fcc:	f000 fc4e 	bl	800186c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4809      	ldr	r0, [pc, #36]	; (8001008 <HAL_UART_MspInit+0xa0>)
 8000fe4:	f000 fc42 	bl	800186c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2026      	movs	r0, #38	; 0x26
 8000fee:	f000 fb54 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ff2:	2026      	movs	r0, #38	; 0x26
 8000ff4:	f000 fb6d 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40004400 	.word	0x40004400
 8001004:	40021000 	.word	0x40021000
 8001008:	40010800 	.word	0x40010800

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001052:	f000 fa2f 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <TIM2_IRQHandler+0x10>)
 8001062:	f001 fb79 	bl	8002758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200000c0 	.word	0x200000c0

08001070 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <TIM3_IRQHandler+0x10>)
 8001076:	f001 fb6f 	bl	8002758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000078 	.word	0x20000078

08001084 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <USART2_IRQHandler+0x10>)
 800108a:	f002 f97f 	bl	800338c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000108 	.word	0x20000108

08001098 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <tuning_fsm>:

#include <tuning_fsm.h>
UART_HandleTypeDef huart2;
char message[20];
uint8_t temp_lightdisplay=0;
void tuning_fsm(){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	switch(tunlightstate){
 80010a8:	4b35      	ldr	r3, [pc, #212]	; (8001180 <tuning_fsm+0xdc>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d865      	bhi.n	800117c <tuning_fsm+0xd8>
 80010b0:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <tuning_fsm+0x14>)
 80010b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b6:	bf00      	nop
 80010b8:	080010f1 	.word	0x080010f1
 80010bc:	0800111b 	.word	0x0800111b
 80010c0:	08001145 	.word	0x08001145
 80010c4:	080010cd 	.word	0x080010cd
 80010c8:	080010e1 	.word	0x080010e1
	case T_INIT:
		tunLightHandler();
 80010cc:	f000 f862 	bl	8001194 <tunLightHandler>
		tunlightstate=T_RED;
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <tuning_fsm+0xdc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
		temp_lightdisplay=lightDuration[0];
 80010d6:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <tuning_fsm+0xe0>)
 80010d8:	781a      	ldrb	r2, [r3, #0]
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <tuning_fsm+0xe4>)
 80010dc:	701a      	strb	r2, [r3, #0]
		break;
 80010de:	e04d      	b.n	800117c <tuning_fsm+0xd8>
	case T_HOLD:
		if(mode==TUNING_M){
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <tuning_fsm+0xe8>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d142      	bne.n	800116e <tuning_fsm+0xca>
			tunlightstate=T_INIT;
 80010e8:	4b25      	ldr	r3, [pc, #148]	; (8001180 <tuning_fsm+0xdc>)
 80010ea:	2203      	movs	r2, #3
 80010ec:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010ee:	e03e      	b.n	800116e <tuning_fsm+0xca>
	case T_RED:
		if(FLAG_TUN==1){
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <tuning_fsm+0xec>)
 80010f2:	785b      	ldrb	r3, [r3, #1]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d104      	bne.n	8001102 <tuning_fsm+0x5e>
//			FLAG_MAN=0;
			tunLightHandler();
 80010f8:	f000 f84c 	bl	8001194 <tunLightHandler>
			setTuningLightTimer(250);
 80010fc:	20fa      	movs	r0, #250	; 0xfa
 80010fe:	f7ff fe0f 	bl	8000d20 <setTuningLightTimer>
		}
		if(FLAG_BUT_CD==1){
 8001102:	4b23      	ldr	r3, [pc, #140]	; (8001190 <tuning_fsm+0xec>)
 8001104:	789b      	ldrb	r3, [r3, #2]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d133      	bne.n	8001172 <tuning_fsm+0xce>
//			FLAG_BUT_CD=0;
			tunButtonHandler(0, T_YELLOW);
 800110a:	2101      	movs	r1, #1
 800110c:	2000      	movs	r0, #0
 800110e:	f000 f8b7 	bl	8001280 <tunButtonHandler>
			setButtonCooldownTimer(100);
 8001112:	2064      	movs	r0, #100	; 0x64
 8001114:	f7ff fe18 	bl	8000d48 <setButtonCooldownTimer>
		}
		break;
 8001118:	e02b      	b.n	8001172 <tuning_fsm+0xce>
	case T_YELLOW:
		if(FLAG_TUN==1){
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <tuning_fsm+0xec>)
 800111c:	785b      	ldrb	r3, [r3, #1]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d104      	bne.n	800112c <tuning_fsm+0x88>
//			FLAG_MAN=0;
			tunLightHandler();
 8001122:	f000 f837 	bl	8001194 <tunLightHandler>
			setTuningLightTimer(250);
 8001126:	20fa      	movs	r0, #250	; 0xfa
 8001128:	f7ff fdfa 	bl	8000d20 <setTuningLightTimer>
		}
		if(FLAG_BUT_CD==1){
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <tuning_fsm+0xec>)
 800112e:	789b      	ldrb	r3, [r3, #2]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d120      	bne.n	8001176 <tuning_fsm+0xd2>
//			FLAG_BUT_CD=0;
			tunButtonHandler(1, T_GREEN);
 8001134:	2102      	movs	r1, #2
 8001136:	2001      	movs	r0, #1
 8001138:	f000 f8a2 	bl	8001280 <tunButtonHandler>
			setButtonCooldownTimer(100);
 800113c:	2064      	movs	r0, #100	; 0x64
 800113e:	f7ff fe03 	bl	8000d48 <setButtonCooldownTimer>
		}
		break;
 8001142:	e018      	b.n	8001176 <tuning_fsm+0xd2>
	case T_GREEN:
		if(FLAG_TUN==1){
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <tuning_fsm+0xec>)
 8001146:	785b      	ldrb	r3, [r3, #1]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d104      	bne.n	8001156 <tuning_fsm+0xb2>
//			FLAG_MAN=0;
			tunLightHandler();
 800114c:	f000 f822 	bl	8001194 <tunLightHandler>
			setTuningLightTimer(250);
 8001150:	20fa      	movs	r0, #250	; 0xfa
 8001152:	f7ff fde5 	bl	8000d20 <setTuningLightTimer>
		}
		if(FLAG_BUT_CD==1){
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <tuning_fsm+0xec>)
 8001158:	789b      	ldrb	r3, [r3, #2]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d10d      	bne.n	800117a <tuning_fsm+0xd6>
//			FLAG_BUT_CD=0;
			tunButtonHandler(2, T_HOLD);
 800115e:	2104      	movs	r1, #4
 8001160:	2002      	movs	r0, #2
 8001162:	f000 f88d 	bl	8001280 <tunButtonHandler>
			setButtonCooldownTimer(100);
 8001166:	2064      	movs	r0, #100	; 0x64
 8001168:	f7ff fdee 	bl	8000d48 <setButtonCooldownTimer>
		}
		break;
 800116c:	e005      	b.n	800117a <tuning_fsm+0xd6>
		break;
 800116e:	bf00      	nop
 8001170:	e004      	b.n	800117c <tuning_fsm+0xd8>
		break;
 8001172:	bf00      	nop
 8001174:	e002      	b.n	800117c <tuning_fsm+0xd8>
		break;
 8001176:	bf00      	nop
 8001178:	e000      	b.n	800117c <tuning_fsm+0xd8>
		break;
 800117a:	bf00      	nop
	}
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000028 	.word	0x20000028
 8001184:	20000020 	.word	0x20000020
 8001188:	20000074 	.word	0x20000074
 800118c:	20000050 	.word	0x20000050
 8001190:	20000150 	.word	0x20000150

08001194 <tunLightHandler>:

void tunLightHandler(){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	switch(tunlightstate){
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <tunLightHandler+0xa4>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d849      	bhi.n	8001234 <tunLightHandler+0xa0>
 80011a0:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <tunLightHandler+0x14>)
 80011a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a6:	bf00      	nop
 80011a8:	080011e9 	.word	0x080011e9
 80011ac:	080011fd 	.word	0x080011fd
 80011b0:	08001221 	.word	0x08001221
 80011b4:	080011bd 	.word	0x080011bd
 80011b8:	08001233 	.word	0x08001233
	case T_INIT:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c2:	481e      	ldr	r0, [pc, #120]	; (800123c <tunLightHandler+0xa8>)
 80011c4:	f000 fced 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2108      	movs	r1, #8
 80011cc:	481c      	ldr	r0, [pc, #112]	; (8001240 <tunLightHandler+0xac>)
 80011ce:	f000 fce8 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2120      	movs	r1, #32
 80011d6:	481a      	ldr	r0, [pc, #104]	; (8001240 <tunLightHandler+0xac>)
 80011d8:	f000 fce3 	bl	8001ba2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2110      	movs	r1, #16
 80011e0:	4817      	ldr	r0, [pc, #92]	; (8001240 <tunLightHandler+0xac>)
 80011e2:	f000 fcde 	bl	8001ba2 <HAL_GPIO_WritePin>
		break;
 80011e6:	e025      	b.n	8001234 <tunLightHandler+0xa0>
	case T_HOLD:
		break;
	case T_RED:
		HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 80011e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ec:	4813      	ldr	r0, [pc, #76]	; (800123c <tunLightHandler+0xa8>)
 80011ee:	f000 fcf0 	bl	8001bd2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80011f2:	2120      	movs	r1, #32
 80011f4:	4812      	ldr	r0, [pc, #72]	; (8001240 <tunLightHandler+0xac>)
 80011f6:	f000 fcec 	bl	8001bd2 <HAL_GPIO_TogglePin>
		break;
 80011fa:	e01b      	b.n	8001234 <tunLightHandler+0xa0>
	case T_YELLOW:
		HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 80011fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001200:	480e      	ldr	r0, [pc, #56]	; (800123c <tunLightHandler+0xa8>)
 8001202:	f000 fce6 	bl	8001bd2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8001206:	2108      	movs	r1, #8
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <tunLightHandler+0xac>)
 800120a:	f000 fce2 	bl	8001bd2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 800120e:	2120      	movs	r1, #32
 8001210:	480b      	ldr	r0, [pc, #44]	; (8001240 <tunLightHandler+0xac>)
 8001212:	f000 fcde 	bl	8001bd2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8001216:	2110      	movs	r1, #16
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <tunLightHandler+0xac>)
 800121a:	f000 fcda 	bl	8001bd2 <HAL_GPIO_TogglePin>
		break;
 800121e:	e009      	b.n	8001234 <tunLightHandler+0xa0>
	case T_GREEN:
		HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8001220:	2108      	movs	r1, #8
 8001222:	4807      	ldr	r0, [pc, #28]	; (8001240 <tunLightHandler+0xac>)
 8001224:	f000 fcd5 	bl	8001bd2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8001228:	2110      	movs	r1, #16
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <tunLightHandler+0xac>)
 800122c:	f000 fcd1 	bl	8001bd2 <HAL_GPIO_TogglePin>
		break;
 8001230:	e000      	b.n	8001234 <tunLightHandler+0xa0>
		break;
 8001232:	bf00      	nop
	}
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000028 	.word	0x20000028
 800123c:	40010800 	.word	0x40010800
 8001240:	40010c00 	.word	0x40010c00

08001244 <turnOffCurrentLight>:

void turnOffCurrentLight(){
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800124e:	480a      	ldr	r0, [pc, #40]	; (8001278 <turnOffCurrentLight+0x34>)
 8001250:	f000 fca7 	bl	8001ba2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2108      	movs	r1, #8
 8001258:	4808      	ldr	r0, [pc, #32]	; (800127c <turnOffCurrentLight+0x38>)
 800125a:	f000 fca2 	bl	8001ba2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2120      	movs	r1, #32
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <turnOffCurrentLight+0x38>)
 8001264:	f000 fc9d 	bl	8001ba2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2110      	movs	r1, #16
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <turnOffCurrentLight+0x38>)
 800126e:	f000 fc98 	bl	8001ba2 <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40010800 	.word	0x40010800
 800127c:	40010c00 	.word	0x40010c00

08001280 <tunButtonHandler>:

void tunButtonHandler(enum TUNINGLIGHT curLight,enum TUNINGLIGHT nextLight){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	460a      	mov	r2, r1
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	4613      	mov	r3, r2
 800128e:	71bb      	strb	r3, [r7, #6]
	if(is_button_pressed(0)){
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff f993 	bl	80005bc <is_button_pressed>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <tunButtonHandler+0x24>
		flag_mode_press=1;
 800129c:	4b46      	ldr	r3, [pc, #280]	; (80013b8 <tunButtonHandler+0x138>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	e01d      	b.n	80012e0 <tunButtonHandler+0x60>
	}
	else if(!is_button_pressed(0) && flag_mode_press==1){
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff f989 	bl	80005bc <is_button_pressed>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d117      	bne.n	80012e0 <tunButtonHandler+0x60>
 80012b0:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <tunButtonHandler+0x138>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d113      	bne.n	80012e0 <tunButtonHandler+0x60>
		flag_mode_press=0;
 80012b8:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <tunButtonHandler+0x138>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
		if(nextLight==T_HOLD) mode=AUTO_M;
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d103      	bne.n	80012cc <tunButtonHandler+0x4c>
 80012c4:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <tunButtonHandler+0x13c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e004      	b.n	80012d6 <tunButtonHandler+0x56>
		else temp_lightdisplay=lightDuration[nextLight];
 80012cc:	79bb      	ldrb	r3, [r7, #6]
 80012ce:	4a3c      	ldr	r2, [pc, #240]	; (80013c0 <tunButtonHandler+0x140>)
 80012d0:	5cd2      	ldrb	r2, [r2, r3]
 80012d2:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <tunButtonHandler+0x144>)
 80012d4:	701a      	strb	r2, [r3, #0]
		tunlightstate=nextLight;
 80012d6:	4a3c      	ldr	r2, [pc, #240]	; (80013c8 <tunButtonHandler+0x148>)
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	7013      	strb	r3, [r2, #0]
		turnOffCurrentLight();
 80012dc:	f7ff ffb2 	bl	8001244 <turnOffCurrentLight>
	}

	if(is_button_pressed(1)){
 80012e0:	2001      	movs	r0, #1
 80012e2:	f7ff f96b 	bl	80005bc <is_button_pressed>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d021      	beq.n	8001330 <tunButtonHandler+0xb0>
		flag_inc_press=1;
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <tunButtonHandler+0x14c>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
		if(is_button_pressed_1s(1)){
 80012f2:	2001      	movs	r0, #1
 80012f4:	f7ff f97c 	bl	80005f0 <is_button_pressed_1s>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d03a      	beq.n	8001374 <tunButtonHandler+0xf4>
			flag_hold=1;
 80012fe:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <tunButtonHandler+0x150>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
			if(FLAG_AUTO_INC==1){
 8001304:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <tunButtonHandler+0x154>)
 8001306:	78db      	ldrb	r3, [r3, #3]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d133      	bne.n	8001374 <tunButtonHandler+0xf4>
				temp_lightdisplay++;
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <tunButtonHandler+0x144>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <tunButtonHandler+0x144>)
 8001316:	701a      	strb	r2, [r3, #0]
				if(temp_lightdisplay>99) temp_lightdisplay=0;
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <tunButtonHandler+0x144>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b63      	cmp	r3, #99	; 0x63
 800131e:	d902      	bls.n	8001326 <tunButtonHandler+0xa6>
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <tunButtonHandler+0x144>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
				setAutoIncTimer(500);
 8001326:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800132a:	f7ff fd21 	bl	8000d70 <setAutoIncTimer>
 800132e:	e021      	b.n	8001374 <tunButtonHandler+0xf4>
			}
		}
	}
	else if (!is_button_pressed(1) && flag_inc_press==1){
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff f943 	bl	80005bc <is_button_pressed>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d11b      	bne.n	8001374 <tunButtonHandler+0xf4>
 800133c:	4b23      	ldr	r3, [pc, #140]	; (80013cc <tunButtonHandler+0x14c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d117      	bne.n	8001374 <tunButtonHandler+0xf4>
		flag_inc_press=0;
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <tunButtonHandler+0x14c>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
		if(flag_hold==0){
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <tunButtonHandler+0x150>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <tunButtonHandler+0xee>
			temp_lightdisplay++;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <tunButtonHandler+0x144>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <tunButtonHandler+0x144>)
 800135c:	701a      	strb	r2, [r3, #0]
			if(temp_lightdisplay>99) temp_lightdisplay=0;
 800135e:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <tunButtonHandler+0x144>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b63      	cmp	r3, #99	; 0x63
 8001364:	d906      	bls.n	8001374 <tunButtonHandler+0xf4>
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <tunButtonHandler+0x144>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	e002      	b.n	8001374 <tunButtonHandler+0xf4>
		}
		else flag_hold=0;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <tunButtonHandler+0x150>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
	}

	if(is_button_pressed(2)){
 8001374:	2002      	movs	r0, #2
 8001376:	f7ff f921 	bl	80005bc <is_button_pressed>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <tunButtonHandler+0x108>
		flag_set_press=1;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <tunButtonHandler+0x158>)
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
	}
	else if (!is_button_pressed(2) && flag_inc_press==1){
		flag_set_press=0;
		lightDuration[curLight]=temp_lightdisplay+1;
	}
}
 8001386:	e013      	b.n	80013b0 <tunButtonHandler+0x130>
	else if (!is_button_pressed(2) && flag_inc_press==1){
 8001388:	2002      	movs	r0, #2
 800138a:	f7ff f917 	bl	80005bc <is_button_pressed>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10d      	bne.n	80013b0 <tunButtonHandler+0x130>
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <tunButtonHandler+0x14c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d109      	bne.n	80013b0 <tunButtonHandler+0x130>
		flag_set_press=0;
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <tunButtonHandler+0x158>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
		lightDuration[curLight]=temp_lightdisplay+1;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <tunButtonHandler+0x144>)
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	3201      	adds	r2, #1
 80013aa:	b2d1      	uxtb	r1, r2
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <tunButtonHandler+0x140>)
 80013ae:	54d1      	strb	r1, [r2, r3]
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000006c 	.word	0x2000006c
 80013bc:	20000050 	.word	0x20000050
 80013c0:	20000020 	.word	0x20000020
 80013c4:	20000074 	.word	0x20000074
 80013c8:	20000028 	.word	0x20000028
 80013cc:	2000006d 	.word	0x2000006d
 80013d0:	2000006f 	.word	0x2000006f
 80013d4:	20000150 	.word	0x20000150
 80013d8:	2000006e 	.word	0x2000006e

080013dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013dc:	f7ff fe5c 	bl	8001098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013e2:	490c      	ldr	r1, [pc, #48]	; (8001414 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013e4:	4a0c      	ldr	r2, [pc, #48]	; (8001418 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013f8:	4c09      	ldr	r4, [pc, #36]	; (8001420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001406:	f002 fca3 	bl	8003d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800140a:	f7ff f91f 	bl	800064c <main>
  bx lr
 800140e:	4770      	bx	lr
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001418:	08003df4 	.word	0x08003df4
  ldr r2, =_sbss
 800141c:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001420:	20000188 	.word	0x20000188

08001424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC1_2_IRQHandler>
	...

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_Init+0x28>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_Init+0x28>)
 8001432:	f043 0310 	orr.w	r3, r3, #16
 8001436:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 f923 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	200f      	movs	r0, #15
 8001440:	f000 f808 	bl	8001454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001444:	f7ff fcec 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40022000 	.word	0x40022000

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x54>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_InitTick+0x58>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	fbb3 f3f1 	udiv	r3, r3, r1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f93b 	bl	80016ee <HAL_SYSTICK_Config>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e00e      	b.n	80014a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d80a      	bhi.n	800149e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 f903 	bl	800169a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <HAL_InitTick+0x5c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e000      	b.n	80014a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000024 	.word	0x20000024
 80014ac:	20000030 	.word	0x20000030
 80014b0:	2000002c 	.word	0x2000002c

080014b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_IncTick+0x1c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_IncTick+0x20>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a03      	ldr	r2, [pc, #12]	; (80014d4 <HAL_IncTick+0x20>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	20000030 	.word	0x20000030
 80014d4:	20000184 	.word	0x20000184

080014d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b02      	ldr	r3, [pc, #8]	; (80014e8 <HAL_GetTick+0x10>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000184 	.word	0x20000184

080014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4906      	ldr	r1, [pc, #24]	; (8001584 <__NVIC_EnableIRQ+0x34>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff90 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff2d 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff42 	bl	8001534 <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff90 	bl	80015dc <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5f 	bl	8001588 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff35 	bl	8001550 <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa2 	bl	8001640 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001706:	b480      	push	{r7}
 8001708:	b085      	sub	sp, #20
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d008      	beq.n	8001730 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2204      	movs	r2, #4
 8001722:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e020      	b.n	8001772 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 020e 	bic.w	r2, r2, #14
 800173e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001758:	2101      	movs	r1, #1
 800175a:	fa01 f202 	lsl.w	r2, r1, r2
 800175e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d005      	beq.n	80017a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2204      	movs	r2, #4
 8001798:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e051      	b.n	8001844 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 020e 	bic.w	r2, r2, #14
 80017ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a22      	ldr	r2, [pc, #136]	; (8001850 <HAL_DMA_Abort_IT+0xd4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d029      	beq.n	800181e <HAL_DMA_Abort_IT+0xa2>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a21      	ldr	r2, [pc, #132]	; (8001854 <HAL_DMA_Abort_IT+0xd8>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d022      	beq.n	800181a <HAL_DMA_Abort_IT+0x9e>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <HAL_DMA_Abort_IT+0xdc>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d01a      	beq.n	8001814 <HAL_DMA_Abort_IT+0x98>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1e      	ldr	r2, [pc, #120]	; (800185c <HAL_DMA_Abort_IT+0xe0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d012      	beq.n	800180e <HAL_DMA_Abort_IT+0x92>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <HAL_DMA_Abort_IT+0xe4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d00a      	beq.n	8001808 <HAL_DMA_Abort_IT+0x8c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <HAL_DMA_Abort_IT+0xe8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d102      	bne.n	8001802 <HAL_DMA_Abort_IT+0x86>
 80017fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001800:	e00e      	b.n	8001820 <HAL_DMA_Abort_IT+0xa4>
 8001802:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001806:	e00b      	b.n	8001820 <HAL_DMA_Abort_IT+0xa4>
 8001808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800180c:	e008      	b.n	8001820 <HAL_DMA_Abort_IT+0xa4>
 800180e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001812:	e005      	b.n	8001820 <HAL_DMA_Abort_IT+0xa4>
 8001814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001818:	e002      	b.n	8001820 <HAL_DMA_Abort_IT+0xa4>
 800181a:	2310      	movs	r3, #16
 800181c:	e000      	b.n	8001820 <HAL_DMA_Abort_IT+0xa4>
 800181e:	2301      	movs	r3, #1
 8001820:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_DMA_Abort_IT+0xec>)
 8001822:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	4798      	blx	r3
    } 
  }
  return status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40020008 	.word	0x40020008
 8001854:	4002001c 	.word	0x4002001c
 8001858:	40020030 	.word	0x40020030
 800185c:	40020044 	.word	0x40020044
 8001860:	40020058 	.word	0x40020058
 8001864:	4002006c 	.word	0x4002006c
 8001868:	40020000 	.word	0x40020000

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b08b      	sub	sp, #44	; 0x2c
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187e:	e169      	b.n	8001b54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001880:	2201      	movs	r2, #1
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	429a      	cmp	r2, r3
 800189a:	f040 8158 	bne.w	8001b4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a9a      	ldr	r2, [pc, #616]	; (8001b0c <HAL_GPIO_Init+0x2a0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d05e      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018a8:	4a98      	ldr	r2, [pc, #608]	; (8001b0c <HAL_GPIO_Init+0x2a0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d875      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018ae:	4a98      	ldr	r2, [pc, #608]	; (8001b10 <HAL_GPIO_Init+0x2a4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d058      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018b4:	4a96      	ldr	r2, [pc, #600]	; (8001b10 <HAL_GPIO_Init+0x2a4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d86f      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018ba:	4a96      	ldr	r2, [pc, #600]	; (8001b14 <HAL_GPIO_Init+0x2a8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d052      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018c0:	4a94      	ldr	r2, [pc, #592]	; (8001b14 <HAL_GPIO_Init+0x2a8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d869      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018c6:	4a94      	ldr	r2, [pc, #592]	; (8001b18 <HAL_GPIO_Init+0x2ac>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d04c      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018cc:	4a92      	ldr	r2, [pc, #584]	; (8001b18 <HAL_GPIO_Init+0x2ac>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d863      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018d2:	4a92      	ldr	r2, [pc, #584]	; (8001b1c <HAL_GPIO_Init+0x2b0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d046      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018d8:	4a90      	ldr	r2, [pc, #576]	; (8001b1c <HAL_GPIO_Init+0x2b0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d85d      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018de:	2b12      	cmp	r3, #18
 80018e0:	d82a      	bhi.n	8001938 <HAL_GPIO_Init+0xcc>
 80018e2:	2b12      	cmp	r3, #18
 80018e4:	d859      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018e6:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <HAL_GPIO_Init+0x80>)
 80018e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ec:	08001967 	.word	0x08001967
 80018f0:	08001941 	.word	0x08001941
 80018f4:	08001953 	.word	0x08001953
 80018f8:	08001995 	.word	0x08001995
 80018fc:	0800199b 	.word	0x0800199b
 8001900:	0800199b 	.word	0x0800199b
 8001904:	0800199b 	.word	0x0800199b
 8001908:	0800199b 	.word	0x0800199b
 800190c:	0800199b 	.word	0x0800199b
 8001910:	0800199b 	.word	0x0800199b
 8001914:	0800199b 	.word	0x0800199b
 8001918:	0800199b 	.word	0x0800199b
 800191c:	0800199b 	.word	0x0800199b
 8001920:	0800199b 	.word	0x0800199b
 8001924:	0800199b 	.word	0x0800199b
 8001928:	0800199b 	.word	0x0800199b
 800192c:	0800199b 	.word	0x0800199b
 8001930:	08001949 	.word	0x08001949
 8001934:	0800195d 	.word	0x0800195d
 8001938:	4a79      	ldr	r2, [pc, #484]	; (8001b20 <HAL_GPIO_Init+0x2b4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800193e:	e02c      	b.n	800199a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	623b      	str	r3, [r7, #32]
          break;
 8001946:	e029      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	3304      	adds	r3, #4
 800194e:	623b      	str	r3, [r7, #32]
          break;
 8001950:	e024      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	3308      	adds	r3, #8
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e01f      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	330c      	adds	r3, #12
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e01a      	b.n	800199c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800196e:	2304      	movs	r3, #4
 8001970:	623b      	str	r3, [r7, #32]
          break;
 8001972:	e013      	b.n	800199c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800197c:	2308      	movs	r3, #8
 800197e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	611a      	str	r2, [r3, #16]
          break;
 8001986:	e009      	b.n	800199c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001988:	2308      	movs	r3, #8
 800198a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	615a      	str	r2, [r3, #20]
          break;
 8001992:	e003      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
          break;
 8001998:	e000      	b.n	800199c <HAL_GPIO_Init+0x130>
          break;
 800199a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2bff      	cmp	r3, #255	; 0xff
 80019a0:	d801      	bhi.n	80019a6 <HAL_GPIO_Init+0x13a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	e001      	b.n	80019aa <HAL_GPIO_Init+0x13e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3304      	adds	r3, #4
 80019aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2bff      	cmp	r3, #255	; 0xff
 80019b0:	d802      	bhi.n	80019b8 <HAL_GPIO_Init+0x14c>
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	e002      	b.n	80019be <HAL_GPIO_Init+0x152>
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	3b08      	subs	r3, #8
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	210f      	movs	r1, #15
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	401a      	ands	r2, r3
 80019d0:	6a39      	ldr	r1, [r7, #32]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	431a      	orrs	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80b1 	beq.w	8001b4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019ec:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <HAL_GPIO_Init+0x2b8>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a4c      	ldr	r2, [pc, #304]	; (8001b24 <HAL_GPIO_Init+0x2b8>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <HAL_GPIO_Init+0x2b8>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a04:	4a48      	ldr	r2, [pc, #288]	; (8001b28 <HAL_GPIO_Init+0x2bc>)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a40      	ldr	r2, [pc, #256]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d013      	beq.n	8001a58 <HAL_GPIO_Init+0x1ec>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a3f      	ldr	r2, [pc, #252]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d00d      	beq.n	8001a54 <HAL_GPIO_Init+0x1e8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a3e      	ldr	r2, [pc, #248]	; (8001b34 <HAL_GPIO_Init+0x2c8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d007      	beq.n	8001a50 <HAL_GPIO_Init+0x1e4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a3d      	ldr	r2, [pc, #244]	; (8001b38 <HAL_GPIO_Init+0x2cc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d101      	bne.n	8001a4c <HAL_GPIO_Init+0x1e0>
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e006      	b.n	8001a5a <HAL_GPIO_Init+0x1ee>
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	e004      	b.n	8001a5a <HAL_GPIO_Init+0x1ee>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e002      	b.n	8001a5a <HAL_GPIO_Init+0x1ee>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <HAL_GPIO_Init+0x1ee>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5c:	f002 0203 	and.w	r2, r2, #3
 8001a60:	0092      	lsls	r2, r2, #2
 8001a62:	4093      	lsls	r3, r2
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a6a:	492f      	ldr	r1, [pc, #188]	; (8001b28 <HAL_GPIO_Init+0x2bc>)
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	492c      	ldr	r1, [pc, #176]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4928      	ldr	r1, [pc, #160]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	4922      	ldr	r1, [pc, #136]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60cb      	str	r3, [r1, #12]
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	491e      	ldr	r1, [pc, #120]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4918      	ldr	r1, [pc, #96]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4914      	ldr	r1, [pc, #80]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d021      	beq.n	8001b40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	490e      	ldr	r1, [pc, #56]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
 8001b08:	e021      	b.n	8001b4e <HAL_GPIO_Init+0x2e2>
 8001b0a:	bf00      	nop
 8001b0c:	10320000 	.word	0x10320000
 8001b10:	10310000 	.word	0x10310000
 8001b14:	10220000 	.word	0x10220000
 8001b18:	10210000 	.word	0x10210000
 8001b1c:	10120000 	.word	0x10120000
 8001b20:	10110000 	.word	0x10110000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	40010800 	.word	0x40010800
 8001b30:	40010c00 	.word	0x40010c00
 8001b34:	40011000 	.word	0x40011000
 8001b38:	40011400 	.word	0x40011400
 8001b3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	4909      	ldr	r1, [pc, #36]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	3301      	adds	r3, #1
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f47f ae8e 	bne.w	8001880 <HAL_GPIO_Init+0x14>
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	372c      	adds	r7, #44	; 0x2c
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	40010400 	.word	0x40010400

08001b74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e001      	b.n	8001b96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	807b      	strh	r3, [r7, #2]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb2:	787b      	ldrb	r3, [r7, #1]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb8:	887a      	ldrh	r2, [r7, #2]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bbe:	e003      	b.n	8001bc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bc0:	887b      	ldrh	r3, [r7, #2]
 8001bc2:	041a      	lsls	r2, r3, #16
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	611a      	str	r2, [r3, #16]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001be4:	887a      	ldrh	r2, [r7, #2]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4013      	ands	r3, r2
 8001bea:	041a      	lsls	r2, r3, #16
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	400b      	ands	r3, r1
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	611a      	str	r2, [r3, #16]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e26c      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8087 	beq.w	8001d32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c24:	4b92      	ldr	r3, [pc, #584]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 030c 	and.w	r3, r3, #12
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d00c      	beq.n	8001c4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c30:	4b8f      	ldr	r3, [pc, #572]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d112      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
 8001c3c:	4b8c      	ldr	r3, [pc, #560]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c48:	d10b      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4a:	4b89      	ldr	r3, [pc, #548]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d06c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x12c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d168      	bne.n	8001d30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e246      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x76>
 8001c6c:	4b80      	ldr	r3, [pc, #512]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a7f      	ldr	r2, [pc, #508]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e02e      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x98>
 8001c82:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a7a      	ldr	r2, [pc, #488]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b78      	ldr	r3, [pc, #480]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a77      	ldr	r2, [pc, #476]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xbc>
 8001ca6:	4b72      	ldr	r3, [pc, #456]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a71      	ldr	r2, [pc, #452]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6e      	ldr	r2, [pc, #440]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001cc0:	4b6b      	ldr	r3, [pc, #428]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6a      	ldr	r2, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b68      	ldr	r3, [pc, #416]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a67      	ldr	r2, [pc, #412]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fbfa 	bl	80014d8 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fbf6 	bl	80014d8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1fa      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe4>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fbe6 	bl	80014d8 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff fbe2 	bl	80014d8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1e6      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b53      	ldr	r3, [pc, #332]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x10c>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d063      	beq.n	8001e06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d3e:	4b4c      	ldr	r3, [pc, #304]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4a:	4b49      	ldr	r3, [pc, #292]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d11c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x18c>
 8001d56:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d116      	bne.n	8001d90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_RCC_OscConfig+0x176>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e1ba      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4939      	ldr	r1, [pc, #228]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	e03a      	b.n	8001e06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d98:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7ff fb9b 	bl	80014d8 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da6:	f7ff fb97 	bl	80014d8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e19b      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4927      	ldr	r1, [pc, #156]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	e015      	b.n	8001e06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fb7a 	bl	80014d8 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de8:	f7ff fb76 	bl	80014d8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e17a      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d03a      	beq.n	8001e88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d019      	beq.n	8001e4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7ff fb5a 	bl	80014d8 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7ff fb56 	bl	80014d8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e15a      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e46:	2001      	movs	r0, #1
 8001e48:	f000 facc 	bl	80023e4 <RCC_Delay>
 8001e4c:	e01c      	b.n	8001e88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e54:	f7ff fb40 	bl	80014d8 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5a:	e00f      	b.n	8001e7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7ff fb3c 	bl	80014d8 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d908      	bls.n	8001e7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e140      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	42420000 	.word	0x42420000
 8001e78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	4b9e      	ldr	r3, [pc, #632]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1e9      	bne.n	8001e5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80a6 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9a:	4b97      	ldr	r3, [pc, #604]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10d      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	4b94      	ldr	r3, [pc, #592]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a93      	ldr	r2, [pc, #588]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b91      	ldr	r3, [pc, #580]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	4b8e      	ldr	r3, [pc, #568]	; (80020fc <HAL_RCC_OscConfig+0x4f8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d118      	bne.n	8001f00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ece:	4b8b      	ldr	r3, [pc, #556]	; (80020fc <HAL_RCC_OscConfig+0x4f8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a8a      	ldr	r2, [pc, #552]	; (80020fc <HAL_RCC_OscConfig+0x4f8>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eda:	f7ff fafd 	bl	80014d8 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee2:	f7ff faf9 	bl	80014d8 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b64      	cmp	r3, #100	; 0x64
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0fd      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	4b81      	ldr	r3, [pc, #516]	; (80020fc <HAL_RCC_OscConfig+0x4f8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x312>
 8001f08:	4b7b      	ldr	r3, [pc, #492]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a7a      	ldr	r2, [pc, #488]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	e02d      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x334>
 8001f1e:	4b76      	ldr	r3, [pc, #472]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a75      	ldr	r2, [pc, #468]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	4b73      	ldr	r3, [pc, #460]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a72      	ldr	r2, [pc, #456]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	e01c      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x356>
 8001f40:	4b6d      	ldr	r3, [pc, #436]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4a6c      	ldr	r2, [pc, #432]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6213      	str	r3, [r2, #32]
 8001f4c:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a69      	ldr	r2, [pc, #420]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	e00b      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f5a:	4b67      	ldr	r3, [pc, #412]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a66      	ldr	r2, [pc, #408]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6213      	str	r3, [r2, #32]
 8001f66:	4b64      	ldr	r3, [pc, #400]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a63      	ldr	r2, [pc, #396]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d015      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7a:	f7ff faad 	bl	80014d8 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7ff faa9 	bl	80014d8 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0ab      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	4b57      	ldr	r3, [pc, #348]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ee      	beq.n	8001f82 <HAL_RCC_OscConfig+0x37e>
 8001fa4:	e014      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff fa97 	bl	80014d8 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7ff fa93 	bl	80014d8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e095      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	4b4c      	ldr	r3, [pc, #304]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4b48      	ldr	r3, [pc, #288]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a47      	ldr	r2, [pc, #284]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8081 	beq.w	80020ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fec:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d061      	beq.n	80020bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d146      	bne.n	800208e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002000:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <HAL_RCC_OscConfig+0x4fc>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff fa67 	bl	80014d8 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7ff fa63 	bl	80014d8 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e067      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002020:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002034:	d108      	bne.n	8002048 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002036:	4b30      	ldr	r3, [pc, #192]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	492d      	ldr	r1, [pc, #180]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002048:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a19      	ldr	r1, [r3, #32]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	430b      	orrs	r3, r1
 800205a:	4927      	ldr	r1, [pc, #156]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_RCC_OscConfig+0x4fc>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7ff fa37 	bl	80014d8 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206e:	f7ff fa33 	bl	80014d8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e037      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x46a>
 800208c:	e02f      	b.n	80020ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <HAL_RCC_OscConfig+0x4fc>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7ff fa20 	bl	80014d8 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff fa1c 	bl	80014d8 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e020      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x498>
 80020ba:	e018      	b.n	80020ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e013      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d106      	bne.n	80020ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40007000 	.word	0x40007000
 8002100:	42420060 	.word	0x42420060

08002104 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0d0      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002118:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d910      	bls.n	8002148 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	4b67      	ldr	r3, [pc, #412]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 0207 	bic.w	r2, r3, #7
 800212e:	4965      	ldr	r1, [pc, #404]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b63      	ldr	r3, [pc, #396]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0b8      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002160:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800216a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002178:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a52      	ldr	r2, [pc, #328]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002182:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002184:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	494d      	ldr	r1, [pc, #308]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d040      	beq.n	8002224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d115      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e07f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c2:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e073      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d2:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e06b      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e2:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f023 0203 	bic.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4936      	ldr	r1, [pc, #216]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f4:	f7ff f970 	bl	80014d8 <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fc:	f7ff f96c 	bl	80014d8 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e053      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002212:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 020c 	and.w	r2, r3, #12
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	429a      	cmp	r2, r3
 8002222:	d1eb      	bne.n	80021fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d210      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 0207 	bic.w	r2, r3, #7
 800223a:	4922      	ldr	r1, [pc, #136]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e032      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4916      	ldr	r1, [pc, #88]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	490e      	ldr	r1, [pc, #56]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002292:	f000 f821 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002296:	4602      	mov	r2, r0
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	490a      	ldr	r1, [pc, #40]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 80022a4:	5ccb      	ldrb	r3, [r1, r3]
 80022a6:	fa22 f303 	lsr.w	r3, r2, r3
 80022aa:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_RCC_ClockConfig+0x1cc>)
 80022ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1d0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff f8ce 	bl	8001454 <HAL_InitTick>

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40022000 	.word	0x40022000
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08003dc0 	.word	0x08003dc0
 80022d0:	20000024 	.word	0x20000024
 80022d4:	2000002c 	.word	0x2000002c

080022d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022f2:	4b1e      	ldr	r3, [pc, #120]	; (800236c <HAL_RCC_GetSysClockFreq+0x94>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d002      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x30>
 8002302:	2b08      	cmp	r3, #8
 8002304:	d003      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x36>
 8002306:	e027      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002308:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_RCC_GetSysClockFreq+0x98>)
 800230a:	613b      	str	r3, [r7, #16]
      break;
 800230c:	e027      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	0c9b      	lsrs	r3, r3, #18
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	4a17      	ldr	r2, [pc, #92]	; (8002374 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002318:	5cd3      	ldrb	r3, [r2, r3]
 800231a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d010      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_RCC_GetSysClockFreq+0x94>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	0c5b      	lsrs	r3, r3, #17
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	4a11      	ldr	r2, [pc, #68]	; (8002378 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <HAL_RCC_GetSysClockFreq+0x98>)
 800233a:	fb02 f203 	mul.w	r2, r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	e004      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a0c      	ldr	r2, [pc, #48]	; (800237c <HAL_RCC_GetSysClockFreq+0xa4>)
 800234c:	fb02 f303 	mul.w	r3, r2, r3
 8002350:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	613b      	str	r3, [r7, #16]
      break;
 8002356:	e002      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_RCC_GetSysClockFreq+0x98>)
 800235a:	613b      	str	r3, [r7, #16]
      break;
 800235c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235e:	693b      	ldr	r3, [r7, #16]
}
 8002360:	4618      	mov	r0, r3
 8002362:	371c      	adds	r7, #28
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	007a1200 	.word	0x007a1200
 8002374:	08003dd8 	.word	0x08003dd8
 8002378:	08003de8 	.word	0x08003de8
 800237c:	003d0900 	.word	0x003d0900

08002380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002384:	4b02      	ldr	r3, [pc, #8]	; (8002390 <HAL_RCC_GetHCLKFreq+0x10>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	20000024 	.word	0x20000024

08002394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002398:	f7ff fff2 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	4903      	ldr	r1, [pc, #12]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000
 80023b8:	08003dd0 	.word	0x08003dd0

080023bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023c0:	f7ff ffde 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	0adb      	lsrs	r3, r3, #11
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4903      	ldr	r1, [pc, #12]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	08003dd0 	.word	0x08003dd0

080023e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <RCC_Delay+0x34>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <RCC_Delay+0x38>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0a5b      	lsrs	r3, r3, #9
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002400:	bf00      	nop
  }
  while (Delay --);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	60fa      	str	r2, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f9      	bne.n	8002400 <RCC_Delay+0x1c>
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	20000024 	.word	0x20000024
 800241c:	10624dd3 	.word	0x10624dd3

08002420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e041      	b.n	80024b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe fd1c 	bl	8000e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3304      	adds	r3, #4
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f000 fc30 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d001      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e03a      	b.n	800254e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a18      	ldr	r2, [pc, #96]	; (8002558 <HAL_TIM_Base_Start_IT+0x98>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00e      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x58>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002502:	d009      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x58>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a14      	ldr	r2, [pc, #80]	; (800255c <HAL_TIM_Base_Start_IT+0x9c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d004      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x58>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a13      	ldr	r2, [pc, #76]	; (8002560 <HAL_TIM_Base_Start_IT+0xa0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d111      	bne.n	800253c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b06      	cmp	r3, #6
 8002528:	d010      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253a:	e007      	b.n	800254c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	40012c00 	.word	0x40012c00
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800

08002564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e041      	b.n	80025fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f839 	bl	8002602 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4610      	mov	r0, r2
 80025a4:	f000 fb8e 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d109      	bne.n	8002638 <HAL_TIM_PWM_Start+0x24>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	e022      	b.n	800267e <HAL_TIM_PWM_Start+0x6a>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b04      	cmp	r3, #4
 800263c:	d109      	bne.n	8002652 <HAL_TIM_PWM_Start+0x3e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	bf14      	ite	ne
 800264a:	2301      	movne	r3, #1
 800264c:	2300      	moveq	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	e015      	b.n	800267e <HAL_TIM_PWM_Start+0x6a>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b08      	cmp	r3, #8
 8002656:	d109      	bne.n	800266c <HAL_TIM_PWM_Start+0x58>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	bf14      	ite	ne
 8002664:	2301      	movne	r3, #1
 8002666:	2300      	moveq	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	e008      	b.n	800267e <HAL_TIM_PWM_Start+0x6a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b01      	cmp	r3, #1
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e05e      	b.n	8002744 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d104      	bne.n	8002696 <HAL_TIM_PWM_Start+0x82>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002694:	e013      	b.n	80026be <HAL_TIM_PWM_Start+0xaa>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b04      	cmp	r3, #4
 800269a:	d104      	bne.n	80026a6 <HAL_TIM_PWM_Start+0x92>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a4:	e00b      	b.n	80026be <HAL_TIM_PWM_Start+0xaa>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d104      	bne.n	80026b6 <HAL_TIM_PWM_Start+0xa2>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b4:	e003      	b.n	80026be <HAL_TIM_PWM_Start+0xaa>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2201      	movs	r2, #1
 80026c4:	6839      	ldr	r1, [r7, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fd7c 	bl	80031c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1e      	ldr	r2, [pc, #120]	; (800274c <HAL_TIM_PWM_Start+0x138>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d107      	bne.n	80026e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a18      	ldr	r2, [pc, #96]	; (800274c <HAL_TIM_PWM_Start+0x138>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00e      	beq.n	800270e <HAL_TIM_PWM_Start+0xfa>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f8:	d009      	beq.n	800270e <HAL_TIM_PWM_Start+0xfa>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a14      	ldr	r2, [pc, #80]	; (8002750 <HAL_TIM_PWM_Start+0x13c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d004      	beq.n	800270e <HAL_TIM_PWM_Start+0xfa>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a12      	ldr	r2, [pc, #72]	; (8002754 <HAL_TIM_PWM_Start+0x140>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d111      	bne.n	8002732 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b06      	cmp	r3, #6
 800271e:	d010      	beq.n	8002742 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002730:	e007      	b.n	8002742 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40000400 	.word	0x40000400
 8002754:	40000800 	.word	0x40000800

08002758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b02      	cmp	r3, #2
 800276c:	d122      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b02      	cmp	r3, #2
 800277a:	d11b      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0202 	mvn.w	r2, #2
 8002784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fa76 	bl	8002c8c <HAL_TIM_IC_CaptureCallback>
 80027a0:	e005      	b.n	80027ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fa69 	bl	8002c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fa78 	bl	8002c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d122      	bne.n	8002808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d11b      	bne.n	8002808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0204 	mvn.w	r2, #4
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fa4c 	bl	8002c8c <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fa3f 	bl	8002c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fa4e 	bl	8002c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b08      	cmp	r3, #8
 8002814:	d122      	bne.n	800285c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b08      	cmp	r3, #8
 8002822:	d11b      	bne.n	800285c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0208 	mvn.w	r2, #8
 800282c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2204      	movs	r2, #4
 8002832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fa22 	bl	8002c8c <HAL_TIM_IC_CaptureCallback>
 8002848:	e005      	b.n	8002856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fa15 	bl	8002c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fa24 	bl	8002c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b10      	cmp	r3, #16
 8002868:	d122      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b10      	cmp	r3, #16
 8002876:	d11b      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0210 	mvn.w	r2, #16
 8002880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2208      	movs	r2, #8
 8002886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f9f8 	bl	8002c8c <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f9eb 	bl	8002c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f9fa 	bl	8002c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d107      	bne.n	80028dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0201 	mvn.w	r2, #1
 80028d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe f878 	bl	80009cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e6:	2b80      	cmp	r3, #128	; 0x80
 80028e8:	d10e      	bne.n	8002908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f4:	2b80      	cmp	r3, #128	; 0x80
 80028f6:	d107      	bne.n	8002908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fce9 	bl	80032da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002912:	2b40      	cmp	r3, #64	; 0x40
 8002914:	d10e      	bne.n	8002934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d107      	bne.n	8002934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f9be 	bl	8002cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b20      	cmp	r3, #32
 8002940:	d10e      	bne.n	8002960 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b20      	cmp	r3, #32
 800294e:	d107      	bne.n	8002960 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0220 	mvn.w	r2, #32
 8002958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fcb4 	bl	80032c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002982:	2302      	movs	r3, #2
 8002984:	e0ae      	b.n	8002ae4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b0c      	cmp	r3, #12
 8002992:	f200 809f 	bhi.w	8002ad4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002996:	a201      	add	r2, pc, #4	; (adr r2, 800299c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299c:	080029d1 	.word	0x080029d1
 80029a0:	08002ad5 	.word	0x08002ad5
 80029a4:	08002ad5 	.word	0x08002ad5
 80029a8:	08002ad5 	.word	0x08002ad5
 80029ac:	08002a11 	.word	0x08002a11
 80029b0:	08002ad5 	.word	0x08002ad5
 80029b4:	08002ad5 	.word	0x08002ad5
 80029b8:	08002ad5 	.word	0x08002ad5
 80029bc:	08002a53 	.word	0x08002a53
 80029c0:	08002ad5 	.word	0x08002ad5
 80029c4:	08002ad5 	.word	0x08002ad5
 80029c8:	08002ad5 	.word	0x08002ad5
 80029cc:	08002a93 	.word	0x08002a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f9d6 	bl	8002d88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0208 	orr.w	r2, r2, #8
 80029ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0204 	bic.w	r2, r2, #4
 80029fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6999      	ldr	r1, [r3, #24]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	619a      	str	r2, [r3, #24]
      break;
 8002a0e:	e064      	b.n	8002ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fa1c 	bl	8002e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6999      	ldr	r1, [r3, #24]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	021a      	lsls	r2, r3, #8
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	619a      	str	r2, [r3, #24]
      break;
 8002a50:	e043      	b.n	8002ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fa65 	bl	8002f28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0208 	orr.w	r2, r2, #8
 8002a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0204 	bic.w	r2, r2, #4
 8002a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69d9      	ldr	r1, [r3, #28]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	61da      	str	r2, [r3, #28]
      break;
 8002a90:	e023      	b.n	8002ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 faaf 	bl	8002ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69d9      	ldr	r1, [r3, #28]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	021a      	lsls	r2, r3, #8
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	61da      	str	r2, [r3, #28]
      break;
 8002ad2:	e002      	b.n	8002ada <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ad8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_TIM_ConfigClockSource+0x1c>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e0b4      	b.n	8002c72 <HAL_TIM_ConfigClockSource+0x186>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b40:	d03e      	beq.n	8002bc0 <HAL_TIM_ConfigClockSource+0xd4>
 8002b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b46:	f200 8087 	bhi.w	8002c58 <HAL_TIM_ConfigClockSource+0x16c>
 8002b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4e:	f000 8086 	beq.w	8002c5e <HAL_TIM_ConfigClockSource+0x172>
 8002b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b56:	d87f      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x16c>
 8002b58:	2b70      	cmp	r3, #112	; 0x70
 8002b5a:	d01a      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0xa6>
 8002b5c:	2b70      	cmp	r3, #112	; 0x70
 8002b5e:	d87b      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x16c>
 8002b60:	2b60      	cmp	r3, #96	; 0x60
 8002b62:	d050      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x11a>
 8002b64:	2b60      	cmp	r3, #96	; 0x60
 8002b66:	d877      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x16c>
 8002b68:	2b50      	cmp	r3, #80	; 0x50
 8002b6a:	d03c      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0xfa>
 8002b6c:	2b50      	cmp	r3, #80	; 0x50
 8002b6e:	d873      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x16c>
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d058      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x13a>
 8002b74:	2b40      	cmp	r3, #64	; 0x40
 8002b76:	d86f      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x16c>
 8002b78:	2b30      	cmp	r3, #48	; 0x30
 8002b7a:	d064      	beq.n	8002c46 <HAL_TIM_ConfigClockSource+0x15a>
 8002b7c:	2b30      	cmp	r3, #48	; 0x30
 8002b7e:	d86b      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x16c>
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d060      	beq.n	8002c46 <HAL_TIM_ConfigClockSource+0x15a>
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d867      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x16c>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d05c      	beq.n	8002c46 <HAL_TIM_ConfigClockSource+0x15a>
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d05a      	beq.n	8002c46 <HAL_TIM_ConfigClockSource+0x15a>
 8002b90:	e062      	b.n	8002c58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6899      	ldr	r1, [r3, #8]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f000 faf0 	bl	8003186 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	609a      	str	r2, [r3, #8]
      break;
 8002bbe:	e04f      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6899      	ldr	r1, [r3, #8]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f000 fad9 	bl	8003186 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002be2:	609a      	str	r2, [r3, #8]
      break;
 8002be4:	e03c      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f000 fa50 	bl	8003098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2150      	movs	r1, #80	; 0x50
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 faa7 	bl	8003152 <TIM_ITRx_SetConfig>
      break;
 8002c04:	e02c      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6859      	ldr	r1, [r3, #4]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	461a      	mov	r2, r3
 8002c14:	f000 fa6e 	bl	80030f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2160      	movs	r1, #96	; 0x60
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fa97 	bl	8003152 <TIM_ITRx_SetConfig>
      break;
 8002c24:	e01c      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6859      	ldr	r1, [r3, #4]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	461a      	mov	r2, r3
 8002c34:	f000 fa30 	bl	8003098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2140      	movs	r1, #64	; 0x40
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fa87 	bl	8003152 <TIM_ITRx_SetConfig>
      break;
 8002c44:	e00c      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4610      	mov	r0, r2
 8002c52:	f000 fa7e 	bl	8003152 <TIM_ITRx_SetConfig>
      break;
 8002c56:	e003      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5c:	e000      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
	...

08002cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a29      	ldr	r2, [pc, #164]	; (8002d7c <TIM_Base_SetConfig+0xb8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00b      	beq.n	8002cf4 <TIM_Base_SetConfig+0x30>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce2:	d007      	beq.n	8002cf4 <TIM_Base_SetConfig+0x30>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a26      	ldr	r2, [pc, #152]	; (8002d80 <TIM_Base_SetConfig+0xbc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <TIM_Base_SetConfig+0x30>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a25      	ldr	r2, [pc, #148]	; (8002d84 <TIM_Base_SetConfig+0xc0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d108      	bne.n	8002d06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <TIM_Base_SetConfig+0xb8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00b      	beq.n	8002d26 <TIM_Base_SetConfig+0x62>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d14:	d007      	beq.n	8002d26 <TIM_Base_SetConfig+0x62>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a19      	ldr	r2, [pc, #100]	; (8002d80 <TIM_Base_SetConfig+0xbc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d003      	beq.n	8002d26 <TIM_Base_SetConfig+0x62>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a18      	ldr	r2, [pc, #96]	; (8002d84 <TIM_Base_SetConfig+0xc0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d108      	bne.n	8002d38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <TIM_Base_SetConfig+0xb8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d103      	bne.n	8002d6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	615a      	str	r2, [r3, #20]
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800

08002d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f023 0201 	bic.w	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0303 	bic.w	r3, r3, #3
 8002dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f023 0302 	bic.w	r3, r3, #2
 8002dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <TIM_OC1_SetConfig+0xc8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d10c      	bne.n	8002dfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f023 0308 	bic.w	r3, r3, #8
 8002dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <TIM_OC1_SetConfig+0xc8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d111      	bne.n	8002e2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	621a      	str	r2, [r3, #32]
}
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40012c00 	.word	0x40012c00

08002e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f023 0210 	bic.w	r2, r3, #16
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f023 0320 	bic.w	r3, r3, #32
 8002e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <TIM_OC2_SetConfig+0xd0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d10d      	bne.n	8002ed0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ece:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <TIM_OC2_SetConfig+0xd0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d113      	bne.n	8002f00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	40012c00 	.word	0x40012c00

08002f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0303 	bic.w	r3, r3, #3
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1d      	ldr	r2, [pc, #116]	; (8002ff8 <TIM_OC3_SetConfig+0xd0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10d      	bne.n	8002fa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <TIM_OC3_SetConfig+0xd0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d113      	bne.n	8002fd2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	621a      	str	r2, [r3, #32]
}
 8002fec:	bf00      	nop
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40012c00 	.word	0x40012c00

08002ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	031b      	lsls	r3, r3, #12
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a0f      	ldr	r2, [pc, #60]	; (8003094 <TIM_OC4_SetConfig+0x98>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d109      	bne.n	8003070 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	019b      	lsls	r3, r3, #6
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	621a      	str	r2, [r3, #32]
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	40012c00 	.word	0x40012c00

08003098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f023 0201 	bic.w	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f023 030a 	bic.w	r3, r3, #10
 80030d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	621a      	str	r2, [r3, #32]
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f023 0210 	bic.w	r2, r3, #16
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800311e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	031b      	lsls	r3, r3, #12
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003130:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	621a      	str	r2, [r3, #32]
}
 8003148:	bf00      	nop
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr

08003152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003152:	b480      	push	{r7}
 8003154:	b085      	sub	sp, #20
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	f043 0307 	orr.w	r3, r3, #7
 8003174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	609a      	str	r2, [r3, #8]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003186:	b480      	push	{r7}
 8003188:	b087      	sub	sp, #28
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	021a      	lsls	r2, r3, #8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	609a      	str	r2, [r3, #8]
}
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	2201      	movs	r2, #1
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	401a      	ands	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a1a      	ldr	r2, [r3, #32]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	621a      	str	r2, [r3, #32]
}
 8003202:	bf00      	nop
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003220:	2302      	movs	r3, #2
 8003222:	e046      	b.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a16      	ldr	r2, [pc, #88]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00e      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003270:	d009      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10c      	bne.n	80032a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800328c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	4313      	orrs	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000800 	.word	0x40000800

080032c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e042      	b.n	8003384 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd fe28 	bl	8000f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2224      	movs	r2, #36	; 0x24
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800332e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fc7f 	bl	8003c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b0ba      	sub	sp, #232	; 0xe8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <HAL_UART_IRQHandler+0x66>
 80033de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fb63 	bl	8003ab6 <UART_Receive_IT>
      return;
 80033f0:	e25b      	b.n	80038aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80de 	beq.w	80035b8 <HAL_UART_IRQHandler+0x22c>
 80033fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d106      	bne.n	8003416 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800340c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80d1 	beq.w	80035b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_UART_IRQHandler+0xae>
 8003422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f043 0201 	orr.w	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_UART_IRQHandler+0xd2>
 8003446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f043 0202 	orr.w	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800345e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_UART_IRQHandler+0xf6>
 800346a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f043 0204 	orr.w	r2, r3, #4
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d011      	beq.n	80034b2 <HAL_UART_IRQHandler+0x126>
 800348e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d105      	bne.n	80034a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800349a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f043 0208 	orr.w	r2, r3, #8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 81f2 	beq.w	80038a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_UART_IRQHandler+0x14e>
 80034c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 faee 	bl	8003ab6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <HAL_UART_IRQHandler+0x17a>
 80034fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d04f      	beq.n	80035a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f9f8 	bl	80038fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d041      	beq.n	800359e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3314      	adds	r3, #20
 8003520:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003530:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3314      	adds	r3, #20
 8003542:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003546:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800354a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003552:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800355e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1d9      	bne.n	800351a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d013      	beq.n	8003596 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003572:	4a7e      	ldr	r2, [pc, #504]	; (800376c <HAL_UART_IRQHandler+0x3e0>)
 8003574:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe f8fe 	bl	800177c <HAL_DMA_Abort_IT>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d016      	beq.n	80035b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003590:	4610      	mov	r0, r2
 8003592:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003594:	e00e      	b.n	80035b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f99c 	bl	80038d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359c:	e00a      	b.n	80035b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f998 	bl	80038d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a4:	e006      	b.n	80035b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f994 	bl	80038d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80035b2:	e175      	b.n	80038a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b4:	bf00      	nop
    return;
 80035b6:	e173      	b.n	80038a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	2b01      	cmp	r3, #1
 80035be:	f040 814f 	bne.w	8003860 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8148 	beq.w	8003860 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8141 	beq.w	8003860 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80b6 	beq.w	8003770 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003610:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8145 	beq.w	80038a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800361e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003622:	429a      	cmp	r2, r3
 8003624:	f080 813e 	bcs.w	80038a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800362e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b20      	cmp	r3, #32
 8003638:	f000 8088 	beq.w	800374c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003652:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800365a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	330c      	adds	r3, #12
 8003664:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003668:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800366c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003674:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1d9      	bne.n	800363c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3314      	adds	r3, #20
 800368e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003698:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3314      	adds	r3, #20
 80036a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e1      	bne.n	8003688 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3314      	adds	r3, #20
 80036ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ce:	e853 3f00 	ldrex	r3, [r3]
 80036d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3314      	adds	r3, #20
 80036e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036f0:	e841 2300 	strex	r3, r2, [r1]
 80036f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e3      	bne.n	80036c4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800371a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800371c:	f023 0310 	bic.w	r3, r3, #16
 8003720:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800372e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003730:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003734:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800373c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e3      	bne.n	800370a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd ffdd 	bl	8001706 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800375a:	b29b      	uxth	r3, r3
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	b29b      	uxth	r3, r3
 8003760:	4619      	mov	r1, r3
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f8bf 	bl	80038e6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003768:	e09c      	b.n	80038a4 <HAL_UART_IRQHandler+0x518>
 800376a:	bf00      	nop
 800376c:	080039c1 	.word	0x080039c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003778:	b29b      	uxth	r3, r3
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 808e 	beq.w	80038a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800378c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8089 	beq.w	80038a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037ba:	647a      	str	r2, [r7, #68]	; 0x44
 80037bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e3      	bne.n	8003796 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3314      	adds	r3, #20
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	623b      	str	r3, [r7, #32]
   return(result);
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3314      	adds	r3, #20
 80037ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037f2:	633a      	str	r2, [r7, #48]	; 0x30
 80037f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fa:	e841 2300 	strex	r3, r2, [r1]
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e3      	bne.n	80037ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	60fb      	str	r3, [r7, #12]
   return(result);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0310 	bic.w	r3, r3, #16
 800382a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	330c      	adds	r3, #12
 8003834:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003838:	61fa      	str	r2, [r7, #28]
 800383a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	69b9      	ldr	r1, [r7, #24]
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	617b      	str	r3, [r7, #20]
   return(result);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e3      	bne.n	8003814 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003852:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003856:	4619      	mov	r1, r3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f844 	bl	80038e6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800385e:	e023      	b.n	80038a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	2b00      	cmp	r3, #0
 800386a:	d009      	beq.n	8003880 <HAL_UART_IRQHandler+0x4f4>
 800386c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f8b5 	bl	80039e8 <UART_Transmit_IT>
    return;
 800387e:	e014      	b.n	80038aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00e      	beq.n	80038aa <HAL_UART_IRQHandler+0x51e>
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f8f4 	bl	8003a86 <UART_EndTransmit_IT>
    return;
 800389e:	e004      	b.n	80038aa <HAL_UART_IRQHandler+0x51e>
    return;
 80038a0:	bf00      	nop
 80038a2:	e002      	b.n	80038aa <HAL_UART_IRQHandler+0x51e>
      return;
 80038a4:	bf00      	nop
 80038a6:	e000      	b.n	80038aa <HAL_UART_IRQHandler+0x51e>
      return;
 80038a8:	bf00      	nop
  }
}
 80038aa:	37e8      	adds	r7, #232	; 0xe8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr

080038c2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	460b      	mov	r3, r1
 80038f0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b095      	sub	sp, #84	; 0x54
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	330c      	adds	r3, #12
 800390a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390e:	e853 3f00 	ldrex	r3, [r3]
 8003912:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003924:	643a      	str	r2, [r7, #64]	; 0x40
 8003926:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800392a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e5      	bne.n	8003904 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3314      	adds	r3, #20
 800393e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	61fb      	str	r3, [r7, #28]
   return(result);
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3314      	adds	r3, #20
 8003956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003958:	62fa      	str	r2, [r7, #44]	; 0x2c
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800395e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e5      	bne.n	8003938 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	2b01      	cmp	r3, #1
 8003972:	d119      	bne.n	80039a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	60bb      	str	r3, [r7, #8]
   return(result);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f023 0310 	bic.w	r3, r3, #16
 800398a:	647b      	str	r3, [r7, #68]	; 0x44
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003994:	61ba      	str	r2, [r7, #24]
 8003996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6979      	ldr	r1, [r7, #20]
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	613b      	str	r3, [r7, #16]
   return(result);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e5      	bne.n	8003974 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039b6:	bf00      	nop
 80039b8:	3754      	adds	r7, #84	; 0x54
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff ff7a 	bl	80038d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b21      	cmp	r3, #33	; 0x21
 80039fa:	d13e      	bne.n	8003a7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a04:	d114      	bne.n	8003a30 <UART_Transmit_IT+0x48>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d110      	bne.n	8003a30 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	1c9a      	adds	r2, r3, #2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	621a      	str	r2, [r3, #32]
 8003a2e:	e008      	b.n	8003a42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	1c59      	adds	r1, r3, #1
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6211      	str	r1, [r2, #32]
 8003a3a:	781a      	ldrb	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10f      	bne.n	8003a76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e000      	b.n	8003a7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a7a:	2302      	movs	r3, #2
  }
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr

08003a86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff ff02 	bl	80038b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b08c      	sub	sp, #48	; 0x30
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b22      	cmp	r3, #34	; 0x22
 8003ac8:	f040 80ae 	bne.w	8003c28 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad4:	d117      	bne.n	8003b06 <UART_Receive_IT+0x50>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d113      	bne.n	8003b06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	1c9a      	adds	r2, r3, #2
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	629a      	str	r2, [r3, #40]	; 0x28
 8003b04:	e026      	b.n	8003b54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b18:	d007      	beq.n	8003b2a <UART_Receive_IT+0x74>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <UART_Receive_IT+0x82>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	701a      	strb	r2, [r3, #0]
 8003b36:	e008      	b.n	8003b4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	4619      	mov	r1, r3
 8003b62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d15d      	bne.n	8003c24 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0220 	bic.w	r2, r2, #32
 8003b76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0201 	bic.w	r2, r2, #1
 8003b96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d135      	bne.n	8003c1a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f023 0310 	bic.w	r3, r3, #16
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	623a      	str	r2, [r7, #32]
 8003bd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	69f9      	ldr	r1, [r7, #28]
 8003bda:	6a3a      	ldr	r2, [r7, #32]
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e5      	bne.n	8003bb4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d10a      	bne.n	8003c0c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c10:	4619      	mov	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff fe67 	bl	80038e6 <HAL_UARTEx_RxEventCallback>
 8003c18:	e002      	b.n	8003c20 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff fe51 	bl	80038c2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e002      	b.n	8003c2a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3730      	adds	r7, #48	; 0x30
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c6e:	f023 030c 	bic.w	r3, r3, #12
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2c      	ldr	r2, [pc, #176]	; (8003d48 <UART_SetConfig+0x114>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d103      	bne.n	8003ca4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c9c:	f7fe fb8e 	bl	80023bc <HAL_RCC_GetPCLK2Freq>
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	e002      	b.n	8003caa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ca4:	f7fe fb76 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 8003ca8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009a      	lsls	r2, r3, #2
 8003cb4:	441a      	add	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	4a22      	ldr	r2, [pc, #136]	; (8003d4c <UART_SetConfig+0x118>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	0119      	lsls	r1, r3, #4
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009a      	lsls	r2, r3, #2
 8003cd4:	441a      	add	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <UART_SetConfig+0x118>)
 8003ce2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2064      	movs	r0, #100	; 0x64
 8003cea:	fb00 f303 	mul.w	r3, r0, r3
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	3332      	adds	r3, #50	; 0x32
 8003cf4:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <UART_SetConfig+0x118>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d00:	4419      	add	r1, r3
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009a      	lsls	r2, r3, #2
 8003d0c:	441a      	add	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <UART_SetConfig+0x118>)
 8003d1a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	2064      	movs	r0, #100	; 0x64
 8003d22:	fb00 f303 	mul.w	r3, r0, r3
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	3332      	adds	r3, #50	; 0x32
 8003d2c:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <UART_SetConfig+0x118>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	f003 020f 	and.w	r2, r3, #15
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	440a      	add	r2, r1
 8003d3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40013800 	.word	0x40013800
 8003d4c:	51eb851f 	.word	0x51eb851f

08003d50 <__libc_init_array>:
 8003d50:	b570      	push	{r4, r5, r6, lr}
 8003d52:	2600      	movs	r6, #0
 8003d54:	4d0c      	ldr	r5, [pc, #48]	; (8003d88 <__libc_init_array+0x38>)
 8003d56:	4c0d      	ldr	r4, [pc, #52]	; (8003d8c <__libc_init_array+0x3c>)
 8003d58:	1b64      	subs	r4, r4, r5
 8003d5a:	10a4      	asrs	r4, r4, #2
 8003d5c:	42a6      	cmp	r6, r4
 8003d5e:	d109      	bne.n	8003d74 <__libc_init_array+0x24>
 8003d60:	f000 f822 	bl	8003da8 <_init>
 8003d64:	2600      	movs	r6, #0
 8003d66:	4d0a      	ldr	r5, [pc, #40]	; (8003d90 <__libc_init_array+0x40>)
 8003d68:	4c0a      	ldr	r4, [pc, #40]	; (8003d94 <__libc_init_array+0x44>)
 8003d6a:	1b64      	subs	r4, r4, r5
 8003d6c:	10a4      	asrs	r4, r4, #2
 8003d6e:	42a6      	cmp	r6, r4
 8003d70:	d105      	bne.n	8003d7e <__libc_init_array+0x2e>
 8003d72:	bd70      	pop	{r4, r5, r6, pc}
 8003d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d78:	4798      	blx	r3
 8003d7a:	3601      	adds	r6, #1
 8003d7c:	e7ee      	b.n	8003d5c <__libc_init_array+0xc>
 8003d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d82:	4798      	blx	r3
 8003d84:	3601      	adds	r6, #1
 8003d86:	e7f2      	b.n	8003d6e <__libc_init_array+0x1e>
 8003d88:	08003dec 	.word	0x08003dec
 8003d8c:	08003dec 	.word	0x08003dec
 8003d90:	08003dec 	.word	0x08003dec
 8003d94:	08003df0 	.word	0x08003df0

08003d98 <memset>:
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4402      	add	r2, r0
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d100      	bne.n	8003da2 <memset+0xa>
 8003da0:	4770      	bx	lr
 8003da2:	f803 1b01 	strb.w	r1, [r3], #1
 8003da6:	e7f9      	b.n	8003d9c <memset+0x4>

08003da8 <_init>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	bf00      	nop
 8003dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dae:	bc08      	pop	{r3}
 8003db0:	469e      	mov	lr, r3
 8003db2:	4770      	bx	lr

08003db4 <_fini>:
 8003db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db6:	bf00      	nop
 8003db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dba:	bc08      	pop	{r3}
 8003dbc:	469e      	mov	lr, r3
 8003dbe:	4770      	bx	lr
